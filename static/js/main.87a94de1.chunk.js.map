{"version":3,"sources":["helper/helper-functions.js","Info.js","AbilityScoresForm.js","ClassProficiencies.js","ClassSpells.js","champion/Races.js","champion/Classes.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","InfoDisplay","raceName","className","hit_die","ability_bonuses","abilityScores","saving_throws","characterProficiencies","Info","props","raceSelected","classSelected","abilityScoresInfo","proficiencies","spellsChosen","selectedSpell","setSelectedSpell","proficienciesChosen","classSpells","bonuses","abilities","Object","keys","abilityScoresSelected","map","ability","name","bonus","index","i","length","full_name","toLowerCase","saving_throw","j","proficiency","spell","onClick","navigation","spellDescription","undefined","desc","level","AbilityScoresForm","handleFocus","event","target","select","handleChange","value","scores","state","newScores","JSON","parse","stringify","parseInt","setState","submitForm","handleSubmit","initialState","this","htmlFor","type","id","onChange","onFocus","Component","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","choices","proficiency_choices","from","choose","message","updateAlertMessage","newProficiency","filter","newProfs","chosen","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","console","log","bind","numberOfCategories","chooseFrom","chooseProficiencies","k","push","classProficienciesToChooseFrom","ClassSpells","spellSlots","levelData","slotsAvailable","h","class","spellcasting","cantrips_known","updateSpellSlots","updateSpells","spells","setSpells","spellsChosenByLevel","cantrips","levelOneSpells","spellSource","currentLevel","level0","level1","setClassSpells","spellsInfo","classes","alert","addSpell","removeSpell","displaySpells","spellChoices","slotLevel","slotSpells","classNames","damage","damage_type","spellChoiceDisplay","CharacterRace","buttons","selectRace","racesInfo","setRace","race","races","results","aria-disabled","CharacterClass","selectClass","classesInfo","setClass","cClass","characterClass","Selection","getScore","abilityScore","Navigation","navigationCategories","navigate","navButtons","category","tabIndex","UserAlert","element","alertMessage","CreateCharacter","abilityScoresSetup","abilityScoresData","count","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","slots","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","startingProficiencies","profs","updateProficiencies","proficienciesChoices","noZeroes","zeroesAlert","chosenRace","chosenClass","App","features","featuresInfo","readyToCreate","url","fetch","then","result","json","getInfo","catch","e","data","levels","info","getLevelData","ReactDOM","render"],"mappings":"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","file":"static/js/main.87a94de1.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n","import React from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n//import CharacterImages from'./CharacterImages'\r\n//import ClassProficiencies from './ClassProficiencies'\r\n\r\nfunction InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies){ //choose 1, either underscores or camelCase. You can't have both!!! Or can you...no\r\n    return (<div className=\"col-12 info\">\r\n        <div className='row'>\r\n            <div className='col-12 characterTitle'>\r\n                <h3>{raceName} {className}</h3>\r\n            </div>\r\n            <div className='col-6'>            \r\n                <strong>Ability bonuses</strong><br />\r\n                <ul>{ability_bonuses}</ul>\r\n                <strong>Ability Scores: </strong>\r\n                <div className='row'>\r\n                    {abilityScores}\r\n                </div>  \r\n            </div>\r\n            <div className='col-6'>\r\n                <strong>Hit die: </strong>{hit_die}<br />\r\n                <strong>Saving throws</strong><br />\r\n                <ul>{saving_throws}</ul>\r\n                <strong>Proficiencies</strong>\r\n                <ul>\r\n                    {characterProficiencies}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\n//export class Info extends Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            spellsChosen = [],\r\n//            proficienciesChosen = \r\n\r\n//        }\r\n//    }\r\n//}\r\n\r\n\r\n\r\n//Work on refactoring this mess\r\nconst Info = (props) => {\r\n  //  console.log(\"Info props\", props)\r\n    const { raceSelected } = props\r\n    const { classSelected } = props\r\n    const { abilityScoresInfo } = props\r\n    const { proficiencies } = props\r\n    const { spellsChosen } = props\r\n    const { selectedSpell } = props\r\n    const { setSelectedSpell } = props \r\n    const { proficienciesChosen } = props\r\n\r\n    let raceName = \"\";\r\n    let className = \"\"; \r\n    let hit_die = \"\";\r\n    let ability_bonuses = [];\r\n    let saving_throws = [];\r\n    let characterProficiencies = [];\r\n    let classSpells = [];\r\n  //  let classFeatures = [];\r\n\r\n    let bonuses = []\r\n\r\n    let abilities = Object.keys(props.abilityScoresSelected);\r\n    let abilityScores = abilities.map((ability) => {\r\n       // console.log(\"HERE\")\r\n        return (<div className='col text-center abilityScores' key={ability}>\r\n            <h6>{ability}</h6>\r\n            <p>{props.abilityScoresSelected[ability]}</p>\r\n        </div>);\r\n    });\r\n\r\n    \r\n    if (isSelected(raceSelected)) { //setting up info for when a race has been selected\r\n        raceName = raceSelected.name\r\n        ability_bonuses = raceSelected.ability_bonuses.map((bonus, index) => {\r\n            for (var i = 0; i < abilityScoresInfo.length; i++) {\r\n                if (abilityScoresInfo[i].name === bonus.name) {\r\n                    return (<li key={index}>{abilityScoresInfo[i].full_name}: +{bonus.bonus}</li>);\r\n                }\r\n            }\r\n            return (<li key={index}>Ability: +BONUS</li>);\r\n        });        \r\n        bonuses = raceSelected.ability_bonuses.map((bonus) => {\r\n            return bonus\r\n        });\r\n        abilityScores = abilities.map((ability) => {\r\n            for (var i = 0; i < bonuses.length; i++) {\r\n                if (bonuses[i].name.toLowerCase() === ability) {\r\n                    return (<div className='col text-center abilityScores' key={ability}>\r\n                        <h6>{ability}</h6>\r\n                        <p>{props.abilityScoresSelected[ability]}+{bonuses[i].bonus}</p>\r\n                    </div>);\r\n                }\r\n            }\r\n            return (<div className='col text-center abilityScores' key={ability}>\r\n                <h6>{ability}</h6>\r\n                <p>{props.abilityScoresSelected[ability]}</p>\r\n            </div>);\r\n        });\r\n    }\r\n\r\n    if (isSelected(classSelected)) { //setting up info for when a class has been selected\r\n        className = classSelected.name\r\n        hit_die = props.classSelected.hit_die\r\n        saving_throws = props.classSelected.saving_throws.map((saving_throw, index) => {\r\n            for (var j = 0; j < abilityScoresInfo.length; j++) {\r\n                if (abilityScoresInfo[j].name === saving_throw.name) {\r\n                    return (<li key={saving_throw.name.toLowerCase()}>{abilityScoresInfo[j].full_name}</li>);\r\n                }\r\n            }\r\n            return (<li key={index}>Ability: +BONUS</li>);\r\n        });\r\n\r\n       // console.log(\"Chosen profs \", proficienciesChosen);\r\n      \r\n        characterProficiencies = proficiencies.map((proficiency) => {\r\n            return (<li key={proficiency.name}>{proficiency.name}</li>);\r\n        });\r\n\r\n\r\n\r\n\r\n        if (spellsChosen.length > 0) {\r\n            classSpells = spellsChosen.map((spell) => {\r\n                if (spell === selectedSpell) {\r\n                    return (<li key={spell.name}>{spell.name}</li>);\r\n                } else {\r\n                    return (<li onClick={() => setSelectedSpell(spell)} key={spell.name}>{spell.name}</li>);\r\n                }\r\n            });            \r\n        } \r\n    }\r\n    \r\n    switch (props.navigation) {\r\n        //case \"Races\":        \r\n        //    if (props.isRaceSelected(raceSelected) || props.isClassSelected(classSelected)) {\r\n        //        return InfoDisplay(raceName, className, hit_die, ability_bonuses, saving_throws);\r\n        //    } else {\r\n        //        return (<div className=\"col-12 info\">\r\n        //                    <p className='text-center'> ...Choose your race</p>\r\n        //                </div>);\r\n        //    }\r\n        //case 'Classes':\r\n        //    if (props.isClassSelected(classSelected) || props.isRaceSelected(raceSelected)) {\r\n        //        return InfoDisplay(raceName, className, hit_die, ability_bonuses, saving_throws);\r\n        //    } else {\r\n        //        return (<div className=\"col-12 info\">\r\n        //                    <h3>{className}</h3>\r\n        //                    <p className='text-center'> ...Choose your class</p>\r\n        //                </div>);\r\n        //    }\r\n        case 'Ability-Scores':\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies);\r\n        case 'Proficiencies':\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies);\r\n        case 'Spells':\r\n            if (isSelected(classSelected)) {\r\n                let spellDescription;\r\n                if (selectedSpell.name === undefined) {\r\n               //     console.log(\"check check check\")\r\n                } else {\r\n                    spellDescription = <p>{selectedSpell.desc}</p>\r\n                }\r\n                return (<div className='col-12 info'>\r\n                    <div className='row'>\r\n                        <div className='col-12'>\r\n                            <h3>{props.raceSelected.name} {props.classSelected.name}</h3>\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <p>Spells</p>\r\n                            <ul>{classSpells}</ul>\r\n                        </div>\r\n                        <div className='col-9'>\r\n                            <h4>{selectedSpell.name} {selectedSpell.level}</h4>\r\n                            {spellDescription}\r\n                        </div>\r\n                    </div>\r\n                </div>);\r\n            } else {\r\n                return (<div className='col-12 info'>\r\n                            <p className='text-center'>..Choose your class to select spells </p>\r\n                        </div>);\r\n            }\r\n        default:\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies); \r\n        }\r\n    }\r\n    \r\nexport default Info","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }\r\n        }        \r\n        this.setState({ scores: newScores })\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        return (<form className='col-12'>\r\n                    <label className='col-3' htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3'htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3'htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3' htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3' htmlFor='str'>Strength</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3' htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"constructor() \", props);\r\n        this.state = {\r\n            proficiencies: [],\r\n            proficienciesChosen: [],            \r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected }  = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n        }           \r\n    }   \r\n    \r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props; \r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = []; \r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }        \r\n    }\r\n   \r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean \r\n        const { classSelected } = this.props;\r\n       // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only selected \" + choices[choicesIndex].choose + \" proficiency from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }            \r\n        }\r\n    }\r\n    \r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {                    \r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });              \r\n                    \r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }           \r\n        }       \r\n    }\r\n\r\n    classProficienciesToChooseFrom() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = []\r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency) => {               \r\n                    for (var j = 0; j < proficiencies.length; j++) {\r\n                        for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                            if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                                return (<button className='btn-sm btn-block btn-secondary' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                            }\r\n                        }\r\n                    }                \r\n                    return (<button className='btn-sm btn-block btn-primary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                });\r\n            chooseFrom.push(<div className='col-6 chooseProficiency' key={'catetory' + choicesIndex}><h6>Choose: {classSelected.proficiency_choices[choicesIndex].choose}</h6>{chooseProficiencies}</div>)\r\n        }\r\n        return (chooseFrom);\r\n    }\r\n\r\n    render() {\r\n          return (<div className='row'>\r\n                    {this.classProficienciesToChooseFrom()}\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React, { Component } from 'react';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],    \r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"ClassSpells mounted:\", this.props);\r\n        \r\n        this.spellSlots();\r\n        this.setClassSpells(1); // character level: 1\r\n    }\r\n    componentDidUpdate() {\r\n        console.log(\"ClassSpells updated: \", this.props);\r\n    }\r\n    spellSlots = () => { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;    \r\n        let slotsAvailable = [];\r\n        if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {\r\n            for (var h = 0; h < levelData.length; h++) {\r\n                if (levelData[h].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = 0;\r\n                    for (var i = 1; i < 6; i++) {\r\n                        if (levelData[h].spellcasting['spell_slots_level_' + i] !== 0) {\r\n                            slotsAvailable[i] = levelData[h].spellcasting['spell_slots_level_' + i];\r\n                            console.log(\"SLOTS avail\", slotsAvailable[i])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var j = 0; j < levelData.length; j++) {\r\n                if (levelData[j].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = levelData[j].spellcasting.cantrips_known;\r\n                    for (var k = 1; k < 10; k++) {\r\n                        if (levelData[j].spellcasting['spell_slots_level_' + k] !== 0) {\r\n                            slotsAvailable[k] = levelData[j].spellcasting['spell_slots_level_' + k];\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        } \r\n        console.log(\"slots available \", slotsAvailable);\r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => {\r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => {\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n                this.props.updateAlertMessage(message)\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    setClassSpells = (level) => { \r\n        const { classSelected } = this.props;\r\n        const { spellsInfo } = this.props;   \r\n        let spells = []\r\n        console.log(\"setClassSpells() fired\")\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                    for (var j = 0; j < spellsInfo[i].classes.length; j++) {\r\n                        if (classSelected.name === spellsInfo[i].classes[j].name && (spellsInfo[i].level <= level)) {\r\n                            spells.push(spellsInfo[i])\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default: \r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n    \r\n    addSpell = (spell) => {\r\n        console.log(\"Add Spell: \", spell.name);\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n\r\n        let spells = []\r\n\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        console.log(\"Spells that wont be removed, \", spells)\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = [];\r\n       \r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            //console.log(\"Slots Spells\", slotSpells);\r\n\r\n            spellChoices[slotLevel] = slotSpells.map((spell) => {\r\n                let classNames = \"btn btn-sm btn-block spell-btn \";\r\n              //  console.log(\"Spell \", spell);\r\n                    if (spell.damage !== undefined) { // Is there a better check for this?\r\n                        if (spell.damage.damage_type !== undefined) {\r\n                            classNames += spell.damage.damage_type.index + \" \";\r\n                        }\r\n                    }\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += \"btn-secondary \";\r\n                        return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                    }\r\n                    for (var b = 0; b < spellsChosen.length; b++) {\r\n                        let chosen = b;\r\n                        if (spellsChosen[chosen].name === spell.name) {  \r\n                            classNames += \"btn-primary \";\r\n                            return (<button className={classNames} onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                        } \r\n                }\r\n                classNames += 'btn-secondary ';\r\n                return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n            });\r\n\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='cantrips'><h6>You have no spells to choose from at level 1</h6></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='col-6' key='cantrips'><h6>Cantrips</h6>{spellChoices[b]}</div>\r\n                }\r\n                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='col-6' key={keyForThee + b}><h6>Spell Level {b}</h6>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {\r\n        return (<div className='row'>{this.displaySpells()}</div>);\r\n    }\r\n}\r\n\r\nexport default ClassSpells;","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            raceSelected: {},            \r\n        }\r\n        this.buttons = this.buttons.bind(this);\r\n        this.selectRace = this.selectRace.bind(this);\r\n      //  console.log(\"Race Constructor\", props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            this.setState({ raceSelected: this.props.raceSelected, });\r\n        }\r\n    }\r\n\r\n    selectRace(index) {\r\n        const { racesInfo } = this.props;\r\n        const { setRace } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });\r\n                setRace(raceSelected[0]); \r\n                break;\r\n            }\r\n        }\r\n    }   \r\n\r\n    buttons() {\r\n        const { races } = this.props\r\n        const { raceSelected } = this.state;              \r\n        let raceButtons = races.results.map((race) => {\r\n            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n                return (<button className='selectionButtons buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n            }\r\n            return (<button onClick={() => this.selectRace(race.index)} className='selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n        });\r\n        return raceButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"col-12\">\r\n                         {this.buttons()}\r\n                </div>);\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n        }\r\n        this.buttons = this.buttons.bind(this);\r\n        this.selectClass = this.selectClass.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        } else {\r\n            this.setState({ classSelected: this.props.classesInfo[1], });\r\n        }\r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.props;\r\n        const { setClass } = this.props;\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], });\r\n                setClass(classSelected[0]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    buttons() {\r\n        const { classes } = this.props\r\n        const { classSelected } = this.state;\r\n\r\n        let classButtons = classes.results.map((characterClass) => {\r\n            if (isSelected(classSelected) && classSelected.index === characterClass.index) {\r\n                //console.log(\"selection disabled for class\");\r\n                return (<button className='selectionButtons buttonSelected col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n            }\r\n            return (<button onClick={() => this.selectClass(characterClass.index)} className='selectionButtons col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n\r\n        });       \r\n        return classButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"row\">\r\n                    <div className=\"col-12 text-center selection\">\r\n                        {this.buttons()}\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './ClassProficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nconst Selection = (props) => {\r\n    //console.log(\"Selection() props\", props)\r\n\r\n    const abilityScores = props.abilityScores;\r\n    const classSelected = props.classSelected;\r\n    const navigation = props.navigation;\r\n    const getScore = props.getScore;\r\n\r\n    switch (navigation) {\r\n        case 'Races':\r\n            return (<div className='col-12 text-center selection'><Races {...props} /></div>);           \r\n        case 'Classes':\r\n            return (<div className='col-12 text-center selection'><Classes {...props} /></div>); \r\n        case 'Proficiencies':\r\n            if (isSelected(classSelected)) {\r\n                return (<div className='col-12 text-center selection'>\r\n                            <ClassProficiencies {...props}/>\r\n                        </div>);\r\n            }\r\n            return (<div className='col-12 text-center selection'>You must first choose a class, before you can select your proficiencies.</div>)\r\n            \r\n        case 'Spells':\r\n            if (isSelected(classSelected) && classSelected.spellcasting !== undefined) {\r\n                return (<div className='col-12 text-center selection'>\r\n                            <ClassSpells {...props} />\r\n                        </div>);\r\n            }\r\n            return (<div className='col-12 text-center selection'>{classSelected.name} is not a spell caster.</div>);\r\n            \r\n        case 'Ability-Scores':\r\n            let scores = abilityScores.results.map((abilityScore, index) => {\r\n                return (<button onClick={() => getScore(abilityScore.index)} className='col-2 abilityScoresSelection' key={index}>{abilityScore.name}</button>)\r\n            });\r\n            return (\r\n                <div className='col-12 text-center selection'>\r\n                    <div className='row'>\r\n                        <div className='col-12'>\r\n                            {scores}\r\n                        </div>\r\n                        <AbilityScoresForm handleSubmit={props.handleSubmit} />\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        default:\r\n            return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n    }    \r\n}\r\n\r\n//<div className='row'>\r\n    //<div className='col-12'>\r\n    //    <AbilityScoresForm handleSubmit={props.handleSubmit} />\r\n    //</div>\r\n//</div>\r\n\r\nexport default Selection ","import React from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nconst Navigation = (props) => {\r\n //   console.log(\"Navigation\", props)\r\n    const navigation = props.navigation\r\n    const navigationCategories = props.navigationCategories\r\n    const navigate = props.navigate\r\n    const classSelected = props.classSelected\r\n\r\n    let navButtons = navigationCategories.map((category, index) => {\r\n        if (isSelected(classSelected)) {\r\n            if (navigation === category) {\r\n                return (<button className='navigationButtons buttonSelected disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                return (<button onClick={() => navigate(category)} className='navigationButtons' key={index}>{category}</button>);\r\n            }\r\n        } else {\r\n            if (navigation === category) {\r\n                return (<button className='navigationButtons buttonSelected disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n                    switch (navigation) {\r\n                        case 'Proficiencies':\r\n                            return (<button onClick={() => navigate(category)} className='navigationButtons shiny' key={index}>{category}</button>);\r\n                        default:\r\n                            return (<button onClick={() => navigate(category)} className='navigationButtons shinyBlue' key={index}>{category}</button>);\r\n                    }     \r\n                } else {\r\n                    return (<button onClick={() => navigate(category)} className='navigationButtons' key={index}>{category}</button>);\r\n                }\r\n            }\r\n        }                \r\n    });\r\n    return (<div className=\"col-12 text-center navigation\">\r\n                {navButtons}\r\n            </div>);\r\n}\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n\r\nimport Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\n//import isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScoresSelected: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},\r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setSpells: this.setSpells,\r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { abilityScores } = this.props;\r\n        this.abilityScoresSetup(abilityScores);\r\n        console.log(\"CreateCharacter mounted\");\r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"CreateCharacter updated\")\r\n    }\r\n\r\n\r\n    abilityScoresSetup = (abilityScoresData) => {\r\n        const { count } = abilityScoresData;\r\n        const { results } = abilityScoresData;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    getScore = (ability) => {\r\n        const { abilityScores } = this.props;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = this.randomDiceRoll(6)\r\n                this.setState({abilityScoresSelected: scores})\r\n                break;\r\n            }\r\n        }\r\n   //     console.log(\"Ability Scores Selected\", abilityScoresSelected[ability])\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [] });\r\n    }\r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        console.log(\"SET PROFICIENCIES\", profs, choices)\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n\r\n    //isRaceSelected = (raceSelected) => {\r\n    //    return (this.isSelected(raceSelected));\r\n    //}\r\n\r\n    //isClassSelected = (classSelected) => {\r\n    //    return (this.isSelected(classSelected));\r\n    //}\r\n\r\n    //isSelected = (obj) => {\r\n    //    for (var key in obj) {\r\n    //        obj.hasOwnProperty(key)\r\n    //        return true;\r\n    //    }\r\n    //    return false;\r\n    //}\r\n\r\n    handleSubmit = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n       \r\n    render() {\r\n       // const { navigationCategories, navigation, } = this.state\r\n        \r\n        return (<div id='creator' className='container-fluid creation'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <Info {...this.state} {...this.props} />\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} setRace={this.setRace} setClass={this.setClass} handleSubmit={this.handleSubmit} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>\r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\n\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ////////\r\n            races: {},\r\n            racesInfo: [],\r\n            ////////\r\n            classes: {},\r\n            classesInfo: [],\r\n            ////////\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            ////////\r\n            spells: {},\r\n            spellsInfo: [],\r\n            ////////\r\n            features: {},\r\n            featuresInfo: [],\r\n            ////////\r\n            levelData: [],\r\n        }\r\n      //  this.state = this.initialState;\r\n        this.readyToCreate = this.readyToCreate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n       \r\n        fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result }, this.getInfo(result, 'races')) })\r\n            .catch(e => { console.log(e + \" -- \" + url);})\r\n        fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result }, this.getInfo(result, 'classes')) })\r\n            .catch(e => { console.log(\"API Request Error: \", e); });\r\n        fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result }, this.getInfo(result, 'ability-scores')) })\r\n            .catch(e => { console.log(\"API Request Error: \", e); });\r\n        fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result }, this.getInfo(result, 'spells')) })\r\n            .catch(e => { console.log(\"API Request Error: \", e); });\r\n        \r\n        //fetch(url + 'features')\r\n        //    .then(result => result.json())\r\n        //    .then(result => { this.setState({ features: result }, this.getInfo(result, 'features')) });\r\n     //   console.log(\"App mounted: \", this.state);\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n        //let keys = Object.getOwnPropertyNames(this.state)\r\n        //if (this.props.userID !== prevProps.userID) {\r\n        //    this.fetchData(this.props.userID);\r\n        //}\r\n     //   console.log(\"App updated: \", this.state);\r\n     // this.readyToCreate();\r\n\r\n        this.readyToCreate();\r\n    }\r\n\r\n    getLevelData(data, currentLevel) {\r\n        let levels = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel)\r\n                .then(result => result.json())\r\n                .then(result => levels.push(result))\r\n        }\r\n        this.setState({\r\n            levelData: levels,\r\n        });\r\n    }\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => info.push(result))\r\n        }\r\n        switch(category) {\r\n            case 'races':\r\n                this.setState({ racesInfo: info, });\r\n            break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, });\r\n                this.getLevelData(data, 1);\r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                this.setState({ featuresInfo: info, })\r\n                break;\r\n            default:\r\n        }\r\n        let cat = category;\r\n     //   console.log(\"Cat..\", category, this.state)\r\n\r\n    }\r\n\r\n    readyToCreate() {\r\n        const { races } = this.state;\r\n        const { racesInfo } = this.state;\r\n        //const { classesInfo } = this.state;\r\n        //const { abilityScoresInfo } = this.state;\r\n        //const { spellsInfo } = this.state;\r\n        //let count = 0;\r\n        //let ready = false;\r\n        //let checkLength = 0;\r\n        //console.log(\"Info Length\", racesInfo, \"race count \", races)\r\n        if (racesInfo.length === races.count) {\r\n            console.log(\"Info Length\", racesInfo, \"race count \", races)\r\n            \r\n        }\r\n        //switch (category) {\r\n        //    case 'races':\r\n        //        console.log(\"Info Length\", racesInfo, \"race count \", races)\r\n        //        if (racesInfo.length === races.count) {\r\n        //            console.log(\"Yup\");\r\n        //        }\r\n        //        break;\r\n        //    case 'classes':\r\n               \r\n        //        break;\r\n        //    case 'ability-scores':\r\n                \r\n        //        break;\r\n        //    case 'spells':\r\n               \r\n        //        break;\r\n        //    case 'features':\r\n               \r\n        //        break;\r\n        //    default:\r\n        //}\r\n        //console.log(\"Category\", category)\r\n        //for (var key in characterInfo) {\r\n        //    switch (Object.getPrototypeOf(characterInfo[key]).constructor) {\r\n        //        case Array:\r\n        //            console.log(\"Key \", key, \" \", characterInfo[key], \" category \", category, \" \", characterInfo[category]);                  \r\n        //            if (key === 'racesInfo') {\r\n        //                if (characterInfo[key].length === characterInfo[category].count) {\r\n        //                //    count++;\r\n                            \r\n        //                    console.log(\"ReadyToCreate() info\", characterInfo[key]);\r\n        //                }\r\n        //            }\r\n        //           // let length = characterInfo[key].length;\r\n        //          //  console.log(\"Array\", key, \" : \", length);\r\n                    \r\n        //            break;\r\n        //        case Object:\r\n        //          //  console.log(\"Object\", key, \" : \", characterInfo[key]);\r\n        //            //if (key === 'races' && key.count > 0) {\r\n        //            //    checkLength = key.count;\r\n        //            //    count++;\r\n        //            //    console.log(\"ReadytoCreate() \", characterInfo[key]);\r\n        //            //}\r\n        //            count++;\r\n        //            break;\r\n        //        default:\r\n        //            console.log(\"BROKEN IN readyToCreate()\");\r\n        //            break;\r\n        //    }\r\n            \r\n            //console.log(\"KEY:\", Object.getPrototypeOf(characterInfo[key]).constructor);\r\n            //if (Object.getPrototypeOf(characterInfo[key]) === 'object') {\r\n            //    console.log(\"Object: \", key)\r\n            //}\r\n        //}\r\n       \r\n       // console.log(\"Total elements in App state: \", count);\r\n       // return ready;\r\n    }\r\n\r\n          \r\n    render() {\r\n        const { races } = this.state;\r\n        const { classes } = this.state;\r\n        const { abilityScores } = this.state;\r\n        const { spells } = this.state;\r\n        const { spellsInfo } = this.state;\r\n        const { features } = this.state; // be sure to change !==  to === below, once you are pulling the features data. \r\n        const { levelData } = this.state;\r\n        //if (this.readyToCreate()) {\r\n        //    return (<div className=\"container-fluid\">\r\n        //        <div className=\"row\">\r\n        //            <div className=\"col-12 text-center\">\r\n        //                <p>...Loading API</p>\r\n        //            </div>\r\n        //        </div>\r\n        //    </div>);\r\n        //} else {\r\n        //    return (<CreateCharacter {...this.state} />);\r\n        //}\r\n        //this.readyToCreate();\r\n        if (races.results === undefined || classes.results === undefined || abilityScores.results === undefined || spells.results === undefined || spellsInfo.length === spells.count || levelData.length === 12 || features.results !== undefined) {\r\n            return (<div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 text-center\">\r\n                                <p>...Loading API</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>);\r\n        } else {\r\n            return (<CreateCharacter {...this.state} />); \r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}