{"version":3,"sources":["helper/helper-functions.js","Info.js","AbilityScoresForm.js","ClassProficiencies.js","ClassSpells.js","helper/modal.js","helper/search-bar.js","helper/search-results.js","champion/Races.js","champion/Classes.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","Component","AbilityScoresForm","props","handleFocus","event","target","select","handleChange","name","value","scores","state","newScores","JSON","parse","stringify","i","length","parseInt","setState","submitForm","handleSubmit","initialState","console","log","this","abilityScoresSelected","className","htmlFor","type","id","onChange","onFocus","onClick","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","classSelected","proficienciesChosen","choices","proficiency_choices","from","choose","message","updateAlertMessage","newProficiency","filter","proficiency","newProfs","proficiencies","chosen","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","category","bind","numberOfCategories","chooseFrom","chooseProficiencies","map","j","k","push","newCategory","buttons","num","undefined","setNavigationCategory","proficienciesNavigation","proficienciesToChooseFrom","ClassSpells","spellSlots","levelData","slotsAvailable","h","class","spellcasting","cantrips_known","updateSpellSlots","updateSpells","spell","spellsChosen","spells","setSpells","spellsChosenByLevel","cantrips","levelOneSpells","level","spellSource","currentLevel","level0","level1","setClassSpells","spellsInfo","classes","classSpells","alert","addSpell","setSelectedSpell","removeSpell","displaySpells","spellChoices","slotLevel","slotSpells","classNames","damage","damage_type","index","spellChoiceDisplay","navigationCategory","spellBook","spellsSlots","navigation","spellsNavigation","InfoModal","traits","getTraits","info","raceSelected","url","fetch","then","result","json","catch","e","trait","desc","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","showTraits","SearchBar","userValue","SearchResults","champions","cards","race","bonuses","ability_bonuses","ability_score","bonus","data-toggle","data-target","size_description","age","alignment","language_desc","speed","championClass","count","prof","savingThrows","saving_throws","savingThrow","hit_die","CharacterRace","searchRaces","word","racesInfo","oldList","newList","includes","toLowerCase","searchResults","races","selectRace","getRaces","getInfo","setRaces","setRacesInfo","data","results","setRace","CharacterClass","searchClasses","classesInfo","characterClass","selectClass","getClasses","setClasses","setClassesInfo","setClass","cClass","Selection","abilityScoresSwitch","abilityScoreSwitchy","abilityScoresInfo","getScore","abilityScore","full_name","Navigation","navigationCategories","navigate","aria-disabled","aria-controls","aria-expanded","navigationButtons","UserAlert","element","alertMessage","CreateCharacter","abilityScoresSetup","abilityScoresData","abilityScores","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","selectedSpell","slots","ability","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","startingProficiencies","profs","updateProficiencies","proficienciesChoices","abilities","noZeroes","zeroesAlert","champion","chosenRace","chosenClass","App","chooseYourChampion","ready","Array","features","featuresInfo","enter","getLevelData","Promise","all","getAbilityScores","getSpells","getFeatures","levels","resolve","ReactDOM","render"],"mappings":"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","file":"static/js/main.64867781.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass Info extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {            \r\n            raceName: null,\r\n            className: null,\r\n            hit_die: null,\r\n            abilityScores: [],\r\n            ability_bonuses: [],\r\n            saving_throws: [],\r\n            characterProficiencies: [],\r\n            classSpells: [],\r\n        }        \r\n    }   \r\n\r\n    characterRaceInfo() {\r\n        const { raceSelected, classSelected, abilityScoresInfo } = this.props;\r\n        let bonuses, ability_bonuses = [];\r\n\r\n\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            let abilityScore = \"abilityScore\";\r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += \"abilityScore savingThrow \"\r\n                        console.log(\"saving throw set: \", classSelected.saving_throws[a].index);\r\n                    }\r\n                }\r\n            }\r\n            return (<div className='col-2 text-center ability' key={ability.index}>\r\n                <p>{ability.full_name}</p>\r\n                <p className={abilityScore}>{this.props.abilityScoresSelected[ability.index]}</p>\r\n            </div>);\r\n        }); \r\n\r\n        if (isSelected(raceSelected)) { //setting up info for when a race has been selected\r\n           \r\n            ability_bonuses = raceSelected.ability_bonuses.map((bonus, index) => {\r\n                for (var i = 0; i < abilityScoresInfo.length; i++) {\r\n                    if (abilityScoresInfo[i].name === bonus.ability_score.name) {\r\n                        return (<li className='col-6 text-center' key={index}>{abilityScoresInfo[i].full_name}: +{bonus.bonus}</li>);\r\n                    }\r\n                }\r\n                return (<li key={index}>Ability: +BONUS</li>);\r\n            });\r\n            bonuses = raceSelected.ability_bonuses.map((bonus) => {\r\n                return bonus\r\n            });\r\n            abilityScores = abilityScoresInfo.map((ability) => {\r\n                let abilityScore = \"abilityScore \";\r\n                if (isSelected(classSelected)) {\r\n                    for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                        if (ability.index === classSelected.saving_throws[a].index) {\r\n                            abilityScore = \"abilityScore savingThrow \"\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < bonuses.length; i++) {\r\n                    if (bonuses[i].ability_score.name.toLowerCase() === ability.index) {\r\n                        abilityScore += \"bonus \"\r\n                        let bonus = this.props.abilityScoresSelected[ability.index] + bonuses[i].bonus;\r\n                        return (<div className='col-2 text-center ability' key={ability.index}>\r\n                            <p>{ability.full_name}</p>\r\n                            <p className={abilityScore}>{bonus}</p>\r\n                        </div>);\r\n                    }\r\n                }\r\n                return (<div className='col-2 text-center ability' key={ability.index}>\r\n                    <p>{ability.full_name}</p>\r\n                    <p className={abilityScore}>{this.props.abilityScoresSelected[ability.index]}</p>\r\n                </div>);\r\n            });\r\n        }\r\n        return ([ability_bonuses, abilityScores, bonuses])\r\n    }\r\n\r\n    characterClassInfo() {\r\n        const { abilityScoresInfo, classSelected, spellsChosen, proficiencies, selectedSpell, setSelectedSpell } = this.props;\r\n        let characterProficiencies = [];\r\n        let classSpells = [];\r\n        let hit_die = \"\";       \r\n        let saving_throws = [];\r\n        if (isSelected(classSelected)) { //setting up info for when a class has been selected\r\n            hit_die = classSelected.hit_die\r\n            saving_throws = classSelected.saving_throws.map((saving_throw, index) => {\r\n                for (var j = 0; j < abilityScoresInfo.length; j++) {\r\n                    if (abilityScoresInfo[j].name === saving_throw.name) {\r\n                        return (<li className='col-6 text-center' key={saving_throw.name.toLowerCase()}> {abilityScoresInfo[j].full_name}</li>);\r\n                    }\r\n                }\r\n                return (<li key={index}>Ability: +BONUS</li>);\r\n            });\r\n            characterProficiencies = proficiencies.map((proficiency) => {\r\n                return (<li className='col-6 text-center' key={proficiency.name}>{proficiency.name}</li>);\r\n            });\r\n            if (spellsChosen.length > 0) {\r\n                classSpells = spellsChosen.map((spell) => {\r\n                    if (spell === selectedSpell) {\r\n                        return (<li key={spell.name}>{spell.name}</li>);\r\n                    } else {\r\n                        return (<li onClick={() => setSelectedSpell(spell)} key={spell.name}>{spell.name}</li>);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return ([characterProficiencies, classSpells, hit_die, saving_throws])\r\n    }\r\n\r\n    render() {\r\n        const { raceSelected, classSelected, navigation } = this.props;\r\n        const [ability_bonuses, abilityScores] = this.characterRaceInfo();\r\n        const [characterProficiencies, classSpells, hit_die, saving_throws] = this.characterClassInfo();\r\n        switch (navigation) {\r\n            case 'Spells':\r\n                if (isSelected(classSelected)) {\r\n                    let spellDescription;\r\n                    let selectedSpellName;\r\n                    let selectedSpellLevel;\r\n                    const { selectedSpell } = this.props.selectedSpell;\r\n                    if (isSelected(selectedSpell)) {                       \r\n                        spellDescription = <p>{selectedSpell.desc}</p>\r\n                        selectedSpellName = selectedSpell.name;\r\n                        selectedSpellLevel = selectedSpell.level;\r\n                    }\r\n                    return (<div className='col-12 info'>\r\n                        <div className='row'>\r\n                            <div className='col-12 characterTitle'>\r\n                                <h3>{raceSelected.name ? raceSelected.name : \"-\"}<span> </span>{classSelected.name ? classSelected.name : \"-\"}</h3>\r\n                                <div className='row'>{abilityScores}</div>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <p>Spells</p>\r\n                                <ul className='info-spells-selected'>{classSpells}</ul>\r\n                            </div>\r\n                            <div className='col-9'>\r\n                                <h4>{selectedSpellName} {selectedSpellLevel}</h4>\r\n                                {spellDescription}\r\n                            </div>\r\n                        </div>\r\n                    </div>);\r\n                } else {\r\n                    return (<div className='col-12 info'>\r\n                        <p className='text-center'>..Choose your class to select spells </p>\r\n                    </div>);\r\n                }\r\n            default:\r\n                return (<div className=\"col-12 info\">\r\n                    <div className='row'>\r\n                        <div className='col-12 characterTitle'>\r\n                            <h3>{raceSelected.name ? raceSelected.name : \"-\"}<span> </span>{classSelected.name ? classSelected.name : \"-\"}</h3>\r\n                            <div className='row'>{abilityScores}</div>\r\n                        </div>\r\n                        <div className='col-6 info-col-left'>\r\n                            <h6>Ability bonuses</h6>\r\n                            <ul className='info-abilityBonuses'>{ability_bonuses}</ul>\r\n                        </div>\r\n                        <div className='col-6 info-col-right'>\r\n                            <h6>Hit die: {hit_die}</h6>\r\n                            <h6>Saving throws</h6>\r\n                            <ul className='info-savingThrows'>{saving_throws}</ul>\r\n                            <h6 className='info-proficiencies-title'>Proficiencies</h6>\r\n                            <ul className='info-proficiencies-selected'>\r\n                                {characterProficiencies}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>);\r\n        }        \r\n    }\r\n}\r\n\r\nexport default Info\r\n\r\n\r\n","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(\"AbilityScoresForm \", this.props);\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n     //   console.log(\"constructor() \", props);\r\n        this.state = {\r\n            classSelected: false,\r\n            proficiencies: [],\r\n            proficienciesChosen: [], \r\n            category: 0,\r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected } = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n            this.setState({ classSelected: true, });\r\n           \r\n        }           \r\n    }   \r\n    \r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props; \r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = []; \r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }        \r\n    }\r\n   \r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean up\r\n        const { classSelected } = this.props;\r\n       // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }            \r\n        }\r\n    }\r\n    \r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {                    \r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });   \r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }           \r\n        }       \r\n    }\r\n\r\n    proficienciesToChooseFrom(category) {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = [];\r\n        console.log(classSelected);\r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency) => {               \r\n                for (var j = 0; j < proficiencies.length; j++) {\r\n                    for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                        if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                            return (<button className='btn-sm col-6 btn-success' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                        }\r\n                    }\r\n                }                \r\n                return (<button className='btn-sm col-6 btn-secondary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n            });\r\n            chooseFrom.push(chooseProficiencies);\r\n        } \r\n        return (chooseFrom[category]);\r\n    }\r\n   // <div className='col-12 selection-choose-proficiencies' key={'catetory' + choicesIndex}>\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ category: newCategory, });\r\n    }\r\n\r\n\r\n\r\n\r\n    proficienciesNavigation() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        const { proficienciesChosen } = this.state; \r\n        let buttons = [];   \r\n        for (var a = 0; a < classSelected.proficiency_choices.length; a++) {            \r\n            let newCategory = a;\r\n            let check = proficienciesChosen[newCategory]; //I have to check because this comes through undefined the very first time this function runs, need to figure out a better solution.\r\n            let num;\r\n            if (check === undefined) {\r\n                num = 0;\r\n            } else {\r\n                num = proficienciesChosen[newCategory].length;\r\n            }\r\n            if (category === a) {                \r\n                buttons.push(<button className='btn-sm btn profNavSelected' onClick={() => void (0)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn profNav' onClick={() => this.setNavigationCategory(newCategory)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            }           \r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    render() {\r\n        //let choices = [];\r\n        //let nav = [];\r\n        //if (this.state.classSelected) {\r\n        //    choices = this.classProficienciesToChooseFrom();\r\n        //    nav = this.proficienciesNavigation();\r\n        //}             \r\n        const { category } = this.state;\r\n        const { classSelected } = this.state; //this may need to be changed to not confuse with the object 'classSelected'\r\n        return (classSelected ? <div className='col-12 text-center selection'>\r\n                <div className=\"col-12 selectionTitle\">\r\n                    <h3>Choose your proficiencies</h3>\r\n                </div>\r\n                <div className=\"card border-dark mb-3 \">\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        {this.proficienciesNavigation()}\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        {this.proficienciesToChooseFrom(category)}\r\n                    </div>\r\n                </div>\r\n                </div> : <div className='col-12 text-center selection'>You must choose a class to select your proficiencies.</div> );\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React, { Component } from 'react';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],\r\n            navigationCategory: 0,\r\n            spellBook: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {        \r\n        this.spellSlots();\r\n        this.setClassSpells(1); // character level: 1\r\n    }\r\n\r\n    spellSlots = () => { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;    \r\n        let slotsAvailable = [];\r\n        if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {\r\n            for (var h = 0; h < levelData.length; h++) {\r\n                if (levelData[h].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = 0;\r\n                    for (var i = 1; i < 6; i++) {\r\n                        if (levelData[h].spellcasting['spell_slots_level_' + i] !== 0) {\r\n                            slotsAvailable[i] = levelData[h].spellcasting['spell_slots_level_' + i];\r\n                            console.log(\"SLOTS avail\", slotsAvailable[i])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var j = 0; j < levelData.length; j++) {\r\n                if (levelData[j].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = levelData[j].spellcasting.cantrips_known;\r\n                    for (var k = 1; k < 10; k++) {\r\n                        if (levelData[j].spellcasting['spell_slots_level_' + k] !== 0) {\r\n                            slotsAvailable[k] = levelData[j].spellcasting['spell_slots_level_' + k];\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        } \r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => { //this will only work for level one character creation. Works for this app as its for level one only. \r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => {\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        \r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n              \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    setClassSpells = (level) => { \r\n        const { classSelected } = this.props;\r\n        const { spellsInfo } = this.props;   \r\n        let spells = []\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                    for (var j = 0; j < spellsInfo[i].classes.length; j++) {\r\n                        if (classSelected.name === spellsInfo[i].classes[j].name && (spellsInfo[i].level <= level)) {\r\n                            spells.push(spellsInfo[i])\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default: \r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n        let spells = []\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ navigationCategory: newCategory, });\r\n    }\r\n\r\n    spellsNavigation() {\r\n        const { spellsChosen } = this.props;\r\n        const { navigationCategory } = this.state;\r\n        const { spellSlots } = this.state;\r\n        let buttons = [];\r\n        let spellsSlots = this.spellsChosenByLevel();\r\n        for (var a = 0; a < spellSlots.length; a++) {\r\n            let newCategory = a;\r\n            let num;\r\n            num = spellsSlots[a];            \r\n            if (navigationCategory === a) {\r\n                buttons.push(<button className='btn-sm btn spellsNavigationSelected' onClick={() => void (0)} key={a}> Choose: {spellSlots[a] - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn spellsNavigation' onClick={() => this.setNavigationCategory(newCategory)} key={a}>Choose: {spellSlots[a] - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = [];       \r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            spellChoices[slotLevel] = slotSpells.map((spell) => {\r\n                let classNames = \"btn btn-sm btn-block spell-btn \";\r\n                if (spell.damage !== undefined) { // Is there a better check for this?\r\n                        if (spell.damage.damage_type !== undefined) {\r\n                            classNames += spell.damage.damage_type.index + \" \";\r\n                        }\r\n                    }\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += \"btn-secondary \";\r\n                        return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                }\r\n                for (var b = 0; b < spellsChosen.length; b++) {\r\n                    let chosen = b;\r\n                    if (spellsChosen[chosen].name === spell.name) {  \r\n                        classNames += \"btn-primary \";\r\n                        return (<button className={classNames} onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                    } \r\n                }\r\n                classNames += 'btn-secondary ';\r\n                return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n            });\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='no-known-spells'><h6>You have no spells to choose from at level 1</h6></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='col-6 spells' key='cantrips'><h6>Cantrips</h6>{spellChoices[b]}</div>\r\n                }                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='col-6 spells' key={keyForThee + b}><h6>Spell Level {b}</h6>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {        \r\n        const { navigationCategory } = this.state; \r\n        const spells = this.displaySpells();\r\n        const navigation = this.spellsNavigation();\r\n        return (<div className='col-12 text-center selection'>\r\n            { navigation }\r\n            { spells[navigationCategory] }\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default ClassSpells;","import React, { Component } from 'react'\r\nimport isSelected from './helper-functions.js'\r\n\r\n//async function getTraits(raceSelected) {\r\n//    const url = 'https://www.dnd5eapi.co'\r\n//    let traitsInfo = [];    \r\n//    if (raceSelected.index === \"human\") {\r\n//        console.log(\"Got to the humans\")\r\n//    } else {\r\n//        for (var a = 0; a < raceSelected.traits.length; a++) {\r\n//            fetch(url + raceSelected.traits[a].url)\r\n//                .then(result => result.json())\r\n//                .then(result => { console.log(result); traitsInfo.push(result) })\r\n//                .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n           \r\n//        }\r\n//    }\r\n    \r\n//    console.log(traitsInfo);\r\n//    return traitsInfo;    \r\n//}\r\n\r\n\r\n//export const RaceTraits = (props) => {\r\n//    return (<div className='col-1 info-modal'>\r\n//        <div className=\"modal fade\" id={'race-' + this.props.info.index} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n//            <div className=\"modal-dialog\" role=\"document\">\r\n//                <div className=\"modal-content\">\r\n//                    <div className=\"modal-header\">\r\n//                        <h5 className=\"modal-title\" id=\"raceTraits\">{name} Traits</h5>\r\n//                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n//                            <span aria-hidden=\"true\">&times;</span>\r\n//                        </button>\r\n//                    </div>\r\n//                    <div className=\"modal-body\">\r\n//                        {traits.length !== 0 ? this.showTraits() : \"not loaded\"}\r\n//                    </div>\r\n//                    <div className=\"modal-footer\">\r\n//                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n//                    </div>\r\n//                </div>\r\n//            </div>\r\n//        </div>\r\n//    </div> )\r\n//}\r\n\r\n\r\n\r\nclass InfoModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            traits: [],\r\n        }\r\n        // this.getTraits(props.info);\r\n        this.getTraits = this.getTraits.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"did it mount?\")\r\n        this.getTraits(this.props.info);\r\n    }\r\n\r\n    getTraits(raceSelected) {\r\n        const url = 'https://www.dnd5eapi.co'\r\n        //let traitsInfo = [];\r\n        if (raceSelected.index === \"human\") {\r\n           console.log(\"Got to the humans\")\r\n        } else {\r\n            for (var a = 0; a < raceSelected.traits.length; a++) {\r\n                fetch(url + raceSelected.traits[a].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { this.setState((state) => ({ traits: [...state.traits, result],}))})\r\n                    .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n            }\r\n        }     \r\n    }\r\n\r\n    showTraits() {\r\n        const { traits } = this.state;\r\n        let info = traits.map((trait) => {\r\n            return (<div key={'trait-'+trait.name}>\r\n                <h5>{trait.name}</h5>\r\n                <p>{trait.desc[0]}</p>\r\n            </div>)\r\n        });\r\n        return info;\r\n    }\r\n\r\n    render() {\r\n        const { traits } = this.state;\r\n        const { name } = this.props.info;\r\n        return (<div className='col-1 info-modal'>\r\n            <div className=\"modal fade\" id={'race-'+this.props.info.index} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"raceTraits\">{name} Traits</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {traits.length !== 0 ? this.showTraits() : \"not loaded\"}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\n//}\r\n//<button type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">\r\n//    i\r\n//            </button> \r\n\r\n//function InfoModal(props) {\r\n//    let traits = [];\r\n\r\n//  //  console.log(props.info);\r\n\r\n    \r\n//   // traits = getTraits(props.info);\r\n   \r\n//    console.log(\"Access: \", traits);\r\n//    return (<div className='col-1 info-modal'>\r\n                  \r\n//        <div className=\"modal fade\" id=\"exampleModalLong\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\r\n//            <div className=\"modal-dialog\" role=\"document\">\r\n//                <div className=\"modal-content\">\r\n//                    <div className=\"modal-header\">\r\n//                        <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Modal title</h5>\r\n//                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n//                            <span aria-hidden=\"true\" >&times;</span>\r\n//                        </button>\r\n//                    </div>\r\n//                    <div className=\"modal-body\">\r\n//                        <p>{traits[0]}</p>\r\n//                    </div>\r\n//                    <div className=\"modal-footer\">\r\n//                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n//                        <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\r\n//                    </div>\r\n//                </div>\r\n//            </div>\r\n//        </div>\r\n//    </div>)\r\n    \r\n//}\r\n\r\nexport default InfoModal","import React from 'react'\r\n\r\nexport default function SearchBar({ userValue, handleChange }) {\r\n    return (\r\n        <div className='col-12 text-center searchBar'>\r\n            <label className='search-label' htmlFor='searchBar'>Search:</label><input value={userValue} name='searchBar' id='searchBar' onChange={handleChange} />\r\n        </div>\r\n    );\r\n};","import React from 'react'\r\nimport InfoModal from './modal'\r\n\r\nexport default function SearchResults({ champions, select, category }) {\r\n    console.log(champions)\r\n    let cards = [];\r\n    switch (category) {\r\n        case 'races':\r\n            cards = champions.map((race) => {\r\n                let bonuses = \"\";\r\n                for (var a = 0; a < race.ability_bonuses.length; a++) {\r\n                    bonuses += race.ability_bonuses[a].ability_score.name + \": \" + race.ability_bonuses[a].bonus + \" \";\r\n                }\r\n                let traits = [];\r\n                let target = '#race-' + race.index;\r\n                for (var a = 0; a < race.traits.length; a++) {\r\n                    traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[a].name}>{race.traits[a].name} </span>);\r\n                }\r\n                return (<div className=\"card border-dark mb-3 \" key={race.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{race.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n                        <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n                        <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n                        <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n                        <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n                        <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n                        <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n                        <button className=\"btn btn-primary\" onClick={() => select(race.index)}>Choose {race.name}</button>\r\n                        <InfoModal info={race} />\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break;\r\n        case 'classes':\r\n            cards = champions.map((championClass) => {\r\n                let proficiencies = \"\";\r\n                let count = 0;\r\n                proficiencies = championClass.proficiencies.map((prof) => {\r\n                    if (count === championClass.proficiencies.length - 1) {\r\n                        return (prof.name + \". \");\r\n                    }\r\n                    count++;\r\n                    return (prof.name + \", \");\r\n                });\r\n                let savingThrows = '';\r\n                savingThrows = championClass.saving_throws.map((savingThrow) => {\r\n                    return (savingThrow.name + \" \")\r\n                });\r\n\r\n                //let bonuses = this.abilityBonuses(race);\r\n                return (<div className=\"card border-dark mb-3 \" key={championClass.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{championClass.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Hit die:</strong> {championClass.hit_die}</p>\r\n                        <p className=\"card-text\"><strong>Starting proficiencies:</strong> {proficiencies} </p>\r\n                        <p className=\"card-text\"><strong>Saving Throws:</strong> {savingThrows}</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <button className=\"btn btn-primary\" onClick={() => select(championClass.index)}>Choose {championClass.name}</button>\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break; \r\n        default:\r\n            break;\r\n    }\r\n    return (cards);\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport InfoModal from '../helper/modal'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\n//export default class CharacterRace extends Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            raceSelected: {},\r\n//            searchResults: [],\r\n//            word: \"\",\r\n          \r\n//        }\r\n//        //this.buttons = this.buttons.bind(this);\r\n//        //this.selectRace = this.selectRace.bind(this);\r\n//        //this.abilityBonuses = this.abilityBonuses.bind(this);\r\n//        //this.raceCards = this.raceCards.bind(this);\r\n//        //this.raceCarousel = this.raceCarousel.bind(this);\r\n//        this.traits = this.traits.bind(this);\r\n//    }\r\n\r\n\r\n//    componentDidMount() {\r\n//        if (isSelected(this.props.raceSelected)) {\r\n//            this.setState({ raceSelected: this.props.raceSelected, });\r\n//        }\r\n//        console.log(this.props);\r\n//    }\r\n\r\n//    getRaces() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, },); return result })\r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n//    }\r\n\r\n//    selectRace(index) {\r\n//        const { racesInfo } = this.props;\r\n//        const { setRace } = this.props;\r\n//        for (let i = 0; i < racesInfo.length; i++) {\r\n//            if (racesInfo[i].index === index) {\r\n//                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n//                this.setState({ raceSelected: raceSelected[0] });\r\n//                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n//                console.log(raceSelected[0]);\r\n//                break;\r\n//            }\r\n//        }\r\n//    }   \r\n\r\n//    buttons() {\r\n//        const { races } = this.props;\r\n//        const { raceSelected } = this.state;        \r\n//        let raceButtons = races.results.map((race) => {\r\n//            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n//                return (<button className='btn btn-sm buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n//            }\r\n//            return (<button onClick={() => this.selectRace(race.index)} className='btn btn-sm selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n//        });\r\n//        return raceButtons;\r\n//    }\r\n\r\n//    abilityBonuses(characterRace) {        \r\n//        let bonuses = \"\"; \r\n//        for (var a = 0; a < characterRace.ability_bonuses.length; a++) {\r\n//            bonuses += characterRace.ability_bonuses[a].ability_score.name + \": \" + characterRace.ability_bonuses[a].bonus + \" \";\r\n//        }\r\n//        return (bonuses);\r\n//    }\r\n\r\n//    traits(characterRace) {\r\n//        let traits = [];        \r\n//        let target = '#race-' + characterRace.index;\r\n//        for (var a = 0; a < characterRace.traits.length; a++) {\r\n//            traits.push(<span data-toggle=\"modal\" data-target={target} key={characterRace.traits[a].name}>{characterRace.traits[a].name} </span>);\r\n//        }\r\n//        return (traits);\r\n//    }\r\n\r\n//    raceCards() {       \r\n//        const { racesInfo } = this.props;  \r\n//        //console.log(racesInfo);\r\n//        let raceCards = racesInfo.map((race, index) => {            \r\n//            let bonuses = this.abilityBonuses(race);\r\n//            let traits = this.traits(race);\r\n//            return (<div className=\"card border-dark mb-3 \" key={race.index}>\r\n//                <div className=\"card-header text-white bg-dark text-center\">\r\n//                         <h4>{race.name}</h4>\r\n//                        </div>\r\n//                <div className=\"card-body\">                           \r\n//                    <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n//                    <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n//                    <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n//                    <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n//                    <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n//                    <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n//                    <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n//                    <button className=\"btn btn-primary\" onClick={() => this.selectRace(race.index)}>Choose {race.name}</button>\r\n//                    <InfoModal info={race} />\r\n//                 </div>\r\n//               </div>);\r\n//        }); \r\n//        return (raceCards);\r\n//    }\r\n//   // <button type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">i</button>\r\n   \r\n//    searchRaces = (word) => {\r\n//        const { racesInfo } = this.props;\r\n//        this.setState({\r\n//            word: word,\r\n//        });\r\n//        let oldList = racesInfo.map((race) => {\r\n//            return race;\r\n//        });\r\n//        let newList = [];\r\n//        if (word !== \"\") {\r\n//            newList = oldList.filter(race => race.index.includes(word.toLowerCase())); \r\n//        //    console.log(oldList);\r\n//            this.setState({ searchResults: newList, });\r\n//        } else {\r\n//            console.log(newList);\r\n//            this.setState({ searchResults: oldList, });           \r\n//        }\r\n//    }\r\n\r\n\r\n//    render() {\r\n//        // let cards = this.raceCards();\r\n//        const { word } = this.state;\r\n//        const { searchResults } = this.state;\r\n//        return (<div className='selection col-12'>\r\n//            <h2 className=\"selectionTitle text-center\">Choose your Champions Race</h2>\r\n//            <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />\r\n//            {word !== \"\" ? <SearchResults champions={searchResults} /> : this.raceCards()}           \r\n//            </div>);\r\n//    }\r\n//}\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            raceSelected: {},\r\n            searchResults: [],\r\n            word: \"\",\r\n\r\n        }\r\n        this.selectRace = this.selectRace.bind(this);\r\n        this.getRaces = this.getRaces.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            this.setState({ raceSelected: this.props.raceSelected, });            \r\n        }\r\n        if (isSelected(this.props.races)) {\r\n            this.setState({races: this.props.races, racesInfo: this.props.racesInfo,})\r\n        } else {\r\n            this.getRaces();\r\n        }\r\n        console.log(this.props);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setRaces(this.state.races);\r\n        this.props.setRacesInfo(this.state.racesInfo);\r\n    }\r\n\r\n    getRaces() {\r\n        console.log(\"Getting Races\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, this.getInfo(result));})\r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        console.log(data);\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n           fetch(url + data.results[i].url)\r\n               .then(result => result.json())\r\n               .then(result => { this.setState((state) => ({ racesInfo: [...state.racesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectRace(index) {\r\n        const { racesInfo } = this.state;\r\n        const { setRace } = this.props;\r\n       \r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });\r\n                \r\n                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n                console.log(raceSelected[0]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   \r\n    searchRaces = (word) => {\r\n        const { racesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = racesInfo.map((race) => {\r\n            return race;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(race => race.index.includes(word.toLowerCase()));\r\n            //    console.log(oldList);\r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }  \r\n\r\n    render() {\r\n        // let cards = this.raceCards();\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { racesInfo } = this.state;\r\n        return (<div className='selection col-12'>\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"selectionTitle text-center\">Choose your Race</h3>\r\n                        <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />\r\n                    </div>\r\n                    <SearchResults champions={word !== '' ? searchResults : racesInfo} category='races' select={this.selectRace} />\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            classesInfo: [],\r\n            classSelected: {},           \r\n            searchResults:[],\r\n            word: '',\r\n        }\r\n       \r\n        this.selectClass = this.selectClass.bind(this);\r\n      //  this.classCards = this.classCards.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        }\r\n        if (isSelected(this.props.classes)) {\r\n            this.setState({ classes: this.props.classes, classesInfo: this.props.classesInfo, })\r\n        } else {\r\n            this.getClasses();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (!isSelected(this.props.classes)) { //need a better check for all the information\r\n            console.log(\"first time\");\r\n            this.props.setClasses(this.state.classes);\r\n            this.props.setClassesInfo(this.state.classesInfo);\r\n        } else {\r\n            console.log(\"every other time\");\r\n        }        \r\n    }\r\n\r\n    getClasses() {\r\n        console.log(\"Getting Classes\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, this.getInfo(result)); })\r\n            .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n\r\n    }\r\n\r\n    getInfo(data) {\r\n        console.log(data);\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ classesInfo: [...state.classesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.state;\r\n        const { setClass } = this.props;\r\n        console.log(\"hello\", classesInfo)\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], });\r\n                setClass(classSelected[0]);\r\n                break;\r\n            }\r\n        }        \r\n    } \r\n\r\n    searchClasses = (word) => {\r\n        const { classesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = classesInfo.map((characterClass) => {\r\n            return characterClass;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(characterClass => characterClass.index.includes(word.toLowerCase()));            \r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { classesInfo } = this.state;\r\n        return (<div className=\"col-12 selection\">\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"text-center\">Choose your Class</h3>\r\n                        <SearchBar value={word} handleChange={e => this.searchClasses(e.target.value)} />\r\n                    </div>\r\n                    <SearchResults champions={word !== '' ? searchResults : classesInfo} category='classes' select={this.selectClass} />\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './ClassProficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { abilityScoresInfo } = this.props;\r\n        const { classSelected } = this.props;\r\n        const { navigation } = this.props;\r\n        const { getScore } = this.props;\r\n        const { abilityScoresSwitch } = this.state;\r\n        switch (navigation) {\r\n            case 'Races':\r\n                return (<Races {...this.props} />);           \r\n            case 'Classes':\r\n                return (<Classes {...this.props} />); \r\n            case 'Proficiencies':\r\n                return (<ClassProficiencies {...this.props} />);      \r\n            case 'Spells':\r\n                if (isSelected(classSelected) && classSelected.spellcasting !== undefined) { // Needs better validation? \r\n                    return (<ClassSpells {...this.props} />);\r\n                }\r\n                return (<div className='col-12 text-center selection'>{classSelected.name} is not a spell caster.</div>);            \r\n            case 'Ability-Scores':\r\n                let scores = abilityScoresInfo.map((abilityScore, index) => {\r\n                    return (<button onClick={() => getScore(abilityScore.index)} className='col-4 selectionButtons' key={index}>{abilityScore.full_name}</button>)\r\n                });\r\n                return (<div className='col-12 text-center selection'>                   \r\n                                {abilityScoresSwitch ? <AbilityScoresForm handleSubmit={this.props.handleSubmit} abilityScoresSelected={this.props.abilityScoresSelected} /> : scores}                           \r\n                                <button onClick={() => this.abilityScoreSwitchy()} className='btn btn-primary col-6 align-text-bottom'>{abilityScoresSwitch ? \"Auto fill \" : \"Manual fill \"}</button><br />\r\n                            \r\n                </div>);\r\n            default:\r\n                return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n        }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n        }         \r\n    }\r\n\r\n   \r\n\r\n    navigationButtons() {\r\n        const navigation = this.props.navigation\r\n        const navigationCategories = this.props.navigationCategories\r\n        const navigate = this.props.navigate\r\n        const classSelected = this.props.classSelected       \r\n\r\n        let navButtons = navigationCategories.map((category, index) => {\r\n            if (isSelected(classSelected)) {\r\n                if (navigation === category) {\r\n                    return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n                } else {\r\n                    return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm  btn-dark btn-nav' key={index}>{category}</button>);\r\n                }\r\n            } else {\r\n                if (navigation === category) {\r\n                    return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n                } else {\r\n                    if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n                        switch (navigation) {\r\n                            case 'Proficiencies':\r\n                                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                            default:\r\n                                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                        }\r\n                    } else {\r\n                        return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                    }\r\n                }\r\n            }\r\n        });        \r\n        return (navButtons);\r\n    }\r\n\r\n    render() {\r\n        return (<nav className=\"navbar navbar-expand-lg navbar-light col-12\" id=\"navigation-bottom-container\">            \r\n                    <button className=\"btn btn-sm navbar-toggler bg-light col-2\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navigation-bottom\" aria-controls=\"navigation-bottom\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse col-10\" id=\"navigation-bottom\">\r\n                       {this.navigationButtons()}            \r\n                    </div>            \r\n                </nav>);\r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n    //render() {\r\n    //    const { champion } = this.props; \r\n    //    return (<div className='col-12 text-center' id='navigation' > \r\n    //        <div className='col-6' id='navigation-container' onBlur={(e) => {               \r\n    //            if (!e.currentTarget.contains(e.relatedTarget)) {\r\n    //                // Not triggered when swapping focus between children\r\n    //                this.hideButtons();                  \r\n    //            }\r\n    //        }}>\r\n    //            <div id='navigation-buttons'>\r\n    //                {this.state.toggle ? this.navigationButtons() : null}</div>\r\n    //                    <button className='btn btn-sm btn-primary' id='navigation-toggle' onClick={() => this.toggleNavigation() }>{champion}</button>\r\n    //                </div>                    \r\n    //            </div>);\r\n    //}\r\n}\r\n\r\n//setup() {\r\n\r\n//    <div className='row'>\r\n//        <div className='col-12'>\r\n//             {!this.state.toggle ? this.navigationButtons() : null}\r\n//        </div>\r\n//    </div>\r\n//        <div className='row'>\r\n//            <div className='col-12'>\r\n//                <button className='btn btn-sm btn-primary' id='navigation-toggle' onClick={() => this.toggleNavigation()}>{!this.state.toggle ? 'Hide' : 'Show'}</button>\r\n//            </div>\r\n//        </div>              \r\n\r\n//    <div className=\"btn-group dropup\">\r\n//        <button type=\"button\" className=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n//            Champion\r\n//        </button>\r\n//        <div className=\"dropdown-menu\">\r\n//            {!this.state.toggle ? this.navigationButtons() : null}\r\n//        </div>\r\n//    </div>\r\n//}\r\n\r\n\r\n\r\n\r\n//const Navigation = (props) => {\r\n// //   console.log(\"Navigation\", props)\r\n//    const navigation = props.navigation\r\n//    const navigationCategories = props.navigationCategories\r\n//    const navigate = props.navigate\r\n//    const classSelected = props.classSelected\r\n\r\n//    let navButtons = navigationCategories.map((category, index) => {\r\n//        if (isSelected(classSelected)) {\r\n//            if (navigation === category) {\r\n//                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n//            } else {\r\n//                return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//            }\r\n//        } else {\r\n//            if (navigation === category) {\r\n//                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n//            } else {\r\n//                if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n//                    switch (navigation) {\r\n//                        case 'Proficiencies':\r\n//                            return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                        default:\r\n//                            return (<button onClick={() => navigate(category)} type='button'className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                    }     \r\n//                } else {\r\n//                    return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                }\r\n//            }\r\n//        }                \r\n//    });\r\n//    return (<div className='col-12 text-center navigation'>\r\n//                {navButtons}\r\n//            </div>);\r\n//}\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n\r\nimport Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\n//import isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            champion: 'Champion', //add support: user being able to name their Champion. \r\n            abilityScoresSelected: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},\r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setSpells: this.setSpells,\r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { abilityScores } = this.props;\r\n        this.abilityScoresSetup(abilityScores);\r\n    //    console.log(\"CreateCharacter mounted\");\r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n     //   console.log(\"CreateCharacter updated\")\r\n    }\r\n\r\n\r\n    abilityScoresSetup = (abilityScoresData) => {\r\n        const { count } = abilityScoresData;\r\n        const { results } = abilityScoresData;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    getScore = (ability) => {\r\n        const { abilityScores } = this.props;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = this.randomDiceRoll(6)\r\n                this.setState({abilityScoresSelected: scores})\r\n                break;\r\n            }\r\n        }\r\n   //     console.log(\"Ability Scores Selected\", abilityScoresSelected[ability])\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        console.log(\"and here????\")\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [] });\r\n    }\r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n        \r\n    handleSubmit = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n       \r\n    render() {\r\n      //hacky way of displaying alert        \r\n        return (<div id='creation' className='container-fluid'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} setRace={this.setRace} setClass={this.setClass} handleSubmit={this.handleSubmit} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>\r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <Info {...this.state} {...this.props} />\r\n//</div>\r\n\r\n\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\n//export default class App extends Component { \r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {           \r\n//            races: {},\r\n//            racesInfo: new Array(0),           \r\n//            classes: {},\r\n//            classesInfo: new Array(0),\r\n//            abilityScores: {},\r\n//            abilityScoresInfo: [],\r\n//            spells: {},\r\n//            spellsInfo: [],\r\n//            features: {},\r\n//            featuresInfo: [],\r\n//            levelData: [],\r\n//            ready: false,\r\n//            enter: false,\r\n//        }\r\n//      //  this.state = this.initialState;\r\n//      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n//        this.getInfo = this.getInfo.bind(this);\r\n//        this.getLevelData = this.getLevelData.bind(this);\r\n//        //   this.getStuff = this.getStuff.bind(this);\r\n//        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n//    }\r\n\r\n//    componentDidMount() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        const promise = this.getCharacterInformation(url);\r\n//        promise.then((data) => {\r\n//            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n//        });\r\n//    }\r\n     \r\n\r\n//    getCharacterInformation(url) {\r\n//      return Promise.all([this.getRaces(url),\r\n//            this.getClasses(url),\r\n//            this.getAbilityScores(url),\r\n//            this.getSpells(url),\r\n//            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n//                return {races, classes, abilityScores, spells, features}\r\n//            });\r\n//    }\r\n\r\n\r\n//    getCharacterData(races, classes, abilityScores, spells, features) {\r\n//        Promise.all([this.getInfo(races, 'races'),\r\n//            this.getInfo(classes, 'classes'),\r\n//            this.getLevelData(classes, 1),\r\n//            this.getInfo(abilityScores, 'ability-scores'),\r\n//            this.getInfo(spells, 'spells'),\r\n//            this.getInfo(features, 'features'),\r\n//        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n//    }\r\n\r\n//    getRaces(url) {        \r\n//       return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, }, ); return result })          \r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n//    }\r\n\r\n//    getClasses(url) {\r\n//       return fetch(url + 'classes')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n//           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n//    }\r\n\r\n//    getAbilityScores(url) {\r\n//      return fetch(url + 'ability-scores')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n//    }\r\n\r\n//    getSpells(url) {\r\n//      return fetch(url + 'spells')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ spells: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n//    }\r\n\r\n//    getFeatures(url) {      \r\n//       return fetch(url + 'features')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ features: result }, ); return result  })\r\n//           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n//    }\r\n\r\n//    getLevelData(data, currentLevel) {       \r\n//        let levels = []\r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n//                .then(result => result.json())\r\n//                .then(result => { levels.push(result) });            \r\n//        }        \r\n//        this.setState({\r\n//            levelData: levels,\r\n//        });\r\n//    }\r\n\r\n//    getInfo(data, category) {\r\n//        let info = []    \r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + data.results[i].url))\r\n//                .then(result => result.json())\r\n//                .then(result => { info.push(result) });\r\n//        }\r\n//       // console.log(info);   \r\n//        switch(category) {\r\n//            case 'races':\r\n//                this.setState({ racesInfo: info, });\r\n//                break;\r\n//            case 'classes':\r\n//                this.setState({ classesInfo: info, },);  \r\n//                break;\r\n//            case 'ability-scores':\r\n//                this.setState({ abilityScoresInfo: info, });\r\n//                break;\r\n//            case 'spells':\r\n//                this.setState({ spellsInfo: info, });\r\n//                break;\r\n//            case 'features':                \r\n//                this.setState({ featuresInfo: info, });\r\n//                break;\r\n//            default:\r\n//        }\r\n//    }\r\n\r\n//    //handleClick() {\r\n//    //    this.setState(state => ({\r\n//    //        isToggleOn: !state.isToggleOn\r\n//    //    }));\r\n//    //}\r\n\r\n\r\n//    chooseYourChampion = () => {\r\n//        this.setState(state => ({\r\n//            ready: !state.ready,\r\n//        }));\r\n//    }\r\n    \r\n//    render() {\r\n//        const { ready } = this.state;\r\n              \r\n//        if (!ready) {\r\n//            return (<div className=\"container-fluid\">\r\n//                <div className=\"row\">\r\n//                    <div className=\"col-12 text-center\">\r\n//                        <h1>Welcome</h1>\r\n//                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n//                    </div>\r\n//                </div>\r\n//            </div>);  \r\n//        } else {\r\n//            return (<CreateCharacter {...this.state} />);                   \r\n//        }\r\n//    }\r\n//}\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: new Array(0),\r\n            classes: {},\r\n            classesInfo: new Array(0),\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            spells: {},\r\n            spellsInfo: [],\r\n            features: {},\r\n            featuresInfo: [],\r\n            levelData: [],\r\n            ready: false,\r\n            enter: false,\r\n            setRaces: this.setRaces,\r\n            setRacesInfo: this.setRacesInfo,\r\n            setClasses: this.setClasses, \r\n            setClassesInfo: this.setClassesInfo,\r\n        }\r\n        //  this.state = this.initialState;\r\n        //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // const url = 'https://www.dnd5eapi.co/api/'\r\n        //const promise = this.getCharacterInformation(url);\r\n        //promise.then((data) => {\r\n        //    this.getCharacterData(data.classes, data.abilityScores, data.spells, data.features)\r\n        //});\r\n        this.setState({ enter: true,})\r\n    }\r\n\r\n\r\n    getCharacterInformation(url) {\r\n        return Promise.all([\r\n        this.getClasses(url),\r\n        this.getAbilityScores(url),\r\n        this.getSpells(url),\r\n        this.getFeatures(url),]).then(([abilityScores, spells, features]) => {\r\n            return { abilityScores, spells, features }\r\n        });\r\n    }\r\n\r\n\r\n    getCharacterData(classes, abilityScores, spells, features) {\r\n        Promise.all([       \r\n        this.getLevelData(classes, 1),\r\n        this.getInfo(abilityScores, 'ability-scores'),\r\n        this.getInfo(spells, 'spells'),\r\n        this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ enter: true, }) })\r\n\r\n    }\r\n\r\n   \r\n\r\n    getAbilityScores(url) {\r\n        return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n        return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {\r\n        return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result },); return result })\r\n            .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    getLevelData(data, currentLevel) {\r\n        let levels = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n                .then(result => result.json())\r\n                .then(result => { levels.push(result) });\r\n        }\r\n        this.setState({\r\n            levelData: levels,\r\n        });\r\n    }\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n        // console.log(info);   \r\n        switch (category) {\r\n            //case 'races':\r\n            //    this.setState({ racesInfo: info, });\r\n            //    break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);\r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n\r\n    setRaces = (races) => {\r\n        this.setState({ races: races, });\r\n    }\r\n\r\n    setRacesInfo = (racesInfo) => {\r\n        this.setState({ racesInfo: racesInfo,})\r\n    }\r\n\r\n    setClasses = (classes) => {\r\n        this.setState({classes: classes,})\r\n    }\r\n\r\n    setClassesInfo = (classesInfo) => {\r\n        this.setState({classesInfo: classesInfo,})\r\n    }\r\n\r\n    render() {\r\n        const { ready } = this.state;\r\n\r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p>}\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\nimport './assets/css/navigation-style.css'\r\nimport './assets/css/selection-style.css'\r\nimport './assets/css/info-style.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}