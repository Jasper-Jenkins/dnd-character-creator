{"version":3,"sources":["helper/helper-functions.js","Info.js","champion/Proficiencies.js","ClassSpells.js","helper/modal.js","helper/search-bar.js","helper/search-results.js","champion/Races.js","champion/Classes.js","helper/AbilityScoresForm.js","helper/random-dice-roll.js","champion/AbilityScores.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","Component","ClassProficiencies","props","addProficiency","proficiencyName","choicesIndex","classSelected","proficienciesChosen","state","choices","proficiency_choices","i","from","length","choose","message","updateAlertMessage","name","newProficiency","filter","proficiency","newProfs","proficiencies","chosen","setState","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","isClassSelected","category","bind","this","numberOfCategories","chooseFrom","console","log","chooseProficiencies","map","j","k","className","onClick","push","newCategory","buttons","num","undefined","setNavigationCategory","proficienciesNavigation","proficienciesToChooseFrom","ClassSpells","spellSlots","levelData","slotsAvailable","h","class","spellcasting","cantrips_known","updateSpellSlots","updateSpells","spell","spellsChosen","spells","setSpells","spellsChosenByLevel","cantrips","levelOneSpells","level","spellSource","currentLevel","level0","level1","setClassSpells","spellsInfo","classes","classSpells","alert","addSpell","setSelectedSpell","removeSpell","displaySpells","spellChoices","slotLevel","slotSpells","classNames","damage","damage_type","index","spellChoiceDisplay","navigationCategory","spellBook","spellsSlots","navigation","spellsNavigation","InfoModal","traits","getTraits","info","raceSelected","url","fetch","then","result","json","catch","e","trait","desc","id","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","showTraits","SearchBar","userValue","handleChange","htmlFor","value","onChange","SearchResults","champions","select","cards","race","bonuses","ability_bonuses","ability_score","bonus","target","data-toggle","data-target","size_description","age","alignment","language_desc","speed","championClass","count","prof","savingThrows","saving_throws","savingThrow","hit_die","CharacterRace","searchRaces","word","racesInfo","oldList","newList","includes","toLowerCase","searchResults","races","selectRace","getRaces","getInfo","setRaces","setRacesInfo","data","results","setRace","CharacterClass","searchClasses","classesInfo","characterClass","selectClass","getClasses","setClasses","setClassesInfo","setClass","cClass","AbilityScoresForm","handleFocus","event","scores","newScores","JSON","parse","stringify","parseInt","submitForm","handleSubmit","initialState","abilityScoresSelected","onFocus","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","AbilityScores","abilityScoresSetup","abilityScores","abilityScoresInfo","abilityScoresSwitch","getScore","getAbilityScores","setAbilityScores","setAbilityScoresInfo","ability","abilityScore","full_name","scoreDisplay","abilityScoreSwitchy","Selection","Navigation","navigationCategories","navigate","aria-disabled","aria-controls","aria-expanded","navigationButtons","UserAlert","element","alertMessage","CreateCharacter","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","selectedSpell","slots","startingProficiencies","profs","updateProficiencies","proficienciesChoices","abilities","noZeroes","zeroesAlert","champion","chosenRace","chosenClass","App","chooseYourChampion","ready","Array","features","featuresInfo","enter","getLevelData","Promise","all","getSpells","getFeatures","levels","resolve","ReactDOM","render"],"mappings":"iVAAe,SAASA,EAAWC,GAC/B,IAAK,IAAIC,KAAOD,EAEZ,OADAA,EAAIE,eAAeD,IACZ,EAEX,OAAO,ECFQE,Y,WC8JJC,E,kDA7JX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0CVC,eAAiB,SAACC,EAAiBC,GAK/B,IALgD,IACxCC,EAAkB,EAAKJ,MAAvBI,cAEAC,EAAwB,EAAKC,MAA7BD,oBACFE,EAAUH,EAAcI,oBACrBC,EAAI,EAAGA,EAAIF,EAAQJ,GAAcO,KAAKC,OAAQF,IAAK,CACxD,KAAIJ,EAAoBF,GAAcQ,OAASJ,EAAQJ,GAAcS,QAY9D,CACH,IAAMC,EAAU,uBAAyBN,EAAQJ,GAAcS,OAAS,uBACxE,EAAKZ,MAAMc,mBAAmBD,GAC9B,MAdA,GAAIN,EAAQJ,GAAcO,KAAKD,GAAGM,OAASb,GAAiB,qBACxD,IAAIc,EAAiBT,EAAQJ,GAAcO,KAAKO,QAAO,SAAUC,GAAe,OAAOA,EAAYH,OAASb,KACtGiB,EAAQ,sBAAO,EAAKb,MAAMc,eAAlB,CAAiCJ,EAAe,KAC1DK,EAAShB,EAMb,OALAgB,EAAOlB,GAAP,sBAA2BkB,EAAOlB,IAAlC,CAAiDa,EAAe,KAChE,EAAKM,UAAS,SAAAhB,GAAK,MAAK,CACpBc,cAAc,GAAD,mBAAMd,EAAMc,eAAZ,CAA2BJ,EAAe,KACvDX,oBAAqBgB,KACrB,EAAKrB,MAAMuB,iBAAiBJ,EAAUE,IAC1C,QATwD,GASxD,QA3DG,EAqEnBG,kBAAoB,SAACtB,EAAiBC,GAGlC,IAHoD,IAC5CiB,EAAkB,EAAKd,MAAvBc,cACAf,EAAwB,EAAKC,MAA7BD,oBACCoB,EAAI,EAAGA,EAAIpB,EAAoBM,OAAQc,IAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAoBoB,GAAGd,OAAQe,IAC/C,GAAIrB,EAAoBoB,GAAGC,GAAGX,OAASb,EAAiB,CACpD,IAAIyB,EAAmBP,EAAcH,QAAO,SAAUC,GAAe,OAAOA,EAAYH,OAASb,KAC7F0B,EAAavB,EACjBuB,EAAWzB,GAAgBE,EAAoBF,GAAcc,QAAO,SAAUC,GAAe,OAAOA,EAAYH,OAASb,KACzH,EAAKoB,SAAS,CACVF,cAAc,YAAKO,GACnBtB,oBAAqBuB,GACtB,EAAK5B,MAAMuB,iBAAX,YAAgCI,GAAmBC,IACtD,QA/EZ,EAAKtB,MAAQ,CACTuB,iBAAiB,EACjBT,cAAe,GACff,oBAAqB,GACrByB,SAAU,GAEd,EAAKP,iBAAmB,EAAKA,iBAAiBQ,KAAtB,gBATT,E,gEAcXrC,EADsBsC,KAAKhC,MAAvBI,iBAEJ4B,KAAKT,mBACLS,KAAKV,SAAS,CAAEO,iBAAiB,O,yCAKrB,IACRzB,EAAkB4B,KAAKhC,MAAvBI,cACAgB,EAAkBY,KAAKhC,MAAvBoB,cACAf,EAAwB2B,KAAKhC,MAA7BK,oBACJgB,EAAS,GACTY,EAAqB7B,EAAcI,oBAAoBG,OAC3D,GAAIN,EAAoBM,OAAS,EAAG,CAChC,IAAK,IAAIc,EAAI,EAAGA,EAAIQ,EAAoBR,IACpCJ,EAAOI,GAAK,GAEhBO,KAAKV,SAAS,CACVF,cAAeA,EACff,oBAAqBgB,GACtBW,KAAKhC,MAAMuB,iBAAiBH,EAAeC,SAE9CW,KAAKV,SAAS,CACVF,cAAeA,EACff,oBAAqBA,M,gDAkDPyB,GAAW,IAAD,OACxB1B,EAAkB4B,KAAKhC,MAAvBI,cACAgB,EAAkBY,KAAK1B,MAAvBc,cACAf,EAAwB2B,KAAK1B,MAA7BD,oBACJ6B,EAAa,GACjBC,QAAQC,IAAIhC,GACZ,IANgC,iBAO5B,IAAID,EAAeM,EACb4B,EAAsBjC,EAAcI,oBAAoBC,GAAGC,KAAK4B,KAAI,SAACpB,GACvE,IAAK,IAAIqB,EAAI,EAAGA,EAAInB,EAAcT,OAAQ4B,IACtC,IAAK,IAAIC,EAAI,EAAGA,EAAInC,EAAoBF,GAAcQ,OAAQ6B,IAC1D,GAAItB,EAAYH,OAASV,EAAoBF,GAAcqC,GAAGzB,KAC1D,OAAQ,4BAAQ0B,UAAU,2BAA2BC,QAAS,kBAAM,EAAKlB,kBAAkBN,EAAYH,KAAMZ,IAAeP,IAAKsB,EAAYH,MAAOG,EAAYH,MAI5K,OAAQ,4BAAQ0B,UAAU,6BAA6BC,QAAS,kBAAM,EAAKzC,eAAeiB,EAAYH,KAAMZ,IAAeP,IAAKsB,EAAYH,MAAOG,EAAYH,SAEnKmB,EAAWS,KAAKN,IAZX5B,EAAI,EAAGA,EAAIL,EAAcI,oBAAoBG,OAAQF,IAAM,IAcpE,OAAQyB,EAAWJ,K,4CAEDc,GAClBZ,KAAKV,SAAS,CAAEQ,SAAUc,M,gDAQ1B,IALuB,IAAD,OACdxC,EAAkB4B,KAAKhC,MAAvBI,cACA0B,EAAaE,KAAK1B,MAAlBwB,SACAzB,EAAwB2B,KAAK1B,MAA7BD,oBACJwC,EAAU,GAJQ,aAMlB,IAAID,EAAcnB,EAEdqB,OAAG,EAEHA,OADUC,IAFF1C,EAAoBuC,GAGtB,EAEAvC,EAAoBuC,GAAajC,OAEvCmB,IAAaL,EACboB,EAAQF,KAAK,4BAAQF,UAAU,yBAAyBC,QAAS,aAAgB9C,IAAKQ,EAAcW,KAAOU,GAA9F,WAA0GrB,EAAcI,oBAAoBoC,GAAahC,OAASkC,IAE/KD,EAAQF,KAAK,4BAAQF,UAAU,2BAA2BC,QAAS,kBAAM,EAAKM,sBAAsBJ,IAAchD,IAAKQ,EAAcW,KAAOU,GAA/H,WAA2IrB,EAAcI,oBAAoBoC,GAAahC,OAASkC,KAZ/MrB,EAAI,EAAGA,EAAIrB,EAAcI,oBAAoBG,OAAQc,IAAM,IAepE,OAAQ,yBAAKgB,UAAU,UAAUI,K,+BAI3B,IACEf,EAAaE,KAAK1B,MAAlBwB,SAER,OAD4BE,KAAK1B,MAAzBuB,gBACkB,yBAAKY,UAAU,gCACrC,yBAAKA,UAAU,yBACX,0DAEJ,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,8CACVT,KAAKiB,2BAEV,yBAAKR,UAAU,aACVT,KAAKkB,0BAA0BpB,MAGnC,yBAAKW,UAAU,gCAA+B,wBAAIA,UAAU,kBAAd,8D,GA1J9B3C,aC2WlBqD,E,kDA3WX,WAAYnD,GAAQ,IAAD,8BACf,cAAMA,IAeVoD,WAAa,WAAM,IACPhD,EAAkB,EAAKJ,MAAvBI,cACAiD,EAAc,EAAKrD,MAAnBqD,UACJC,EAAiB,GACrB,GAA2B,WAAvBlD,EAAcW,MAA4C,YAAvBX,EAAcW,MACjD,IAAK,IAAIwC,EAAI,EAAGA,EAAIF,EAAU1C,OAAQ4C,IAClC,GAAIF,EAAUE,GAAGC,MAAMzC,OAASX,EAAcW,KAAM,CAChDuC,EAAe,GAAK,EACpB,IAAK,IAAI7C,EAAI,EAAGA,EAAI,EAAGA,IACyC,IAAxD4C,EAAUE,GAAGE,aAAa,qBAAuBhD,KACjD6C,EAAe7C,GAAK4C,EAAUE,GAAGE,aAAa,qBAAuBhD,GACrE0B,QAAQC,IAAI,cAAekB,EAAe7C,WAM1D,IAAK,IAAI8B,EAAI,EAAGA,EAAIc,EAAU1C,OAAQ4B,IAClC,GAAIc,EAAUd,GAAGiB,MAAMzC,OAASX,EAAcW,KAAM,CAChDuC,EAAe,GAAKD,EAAUd,GAAGkB,aAAaC,eAC9C,IAAK,IAAIlB,EAAI,EAAGA,EAAI,GAAIA,IACwC,IAAxDa,EAAUd,GAAGkB,aAAa,qBAAuBjB,KACjDc,EAAed,GAAKa,EAAUd,GAAGkB,aAAa,qBAAuBjB,IAMzF,EAAKlB,SAAS,CACV8B,WAAYE,GACb,EAAKtD,MAAM2D,iBAAiBL,KA9ChB,EAiDnBM,aAAe,SAACC,GAAW,IACfC,EAAiB,EAAK9D,MAAtB8D,aACJC,EAAM,sBAAOD,GAAP,CAAqBD,IAC/B,EAAKvC,SAAS,CACVwC,aAAcC,IAElB,EAAK/D,MAAMgE,UAAUD,IAvDN,EA0DnBE,oBAAsB,WAKlB,IALwB,IAChBH,EAAiB,EAAK9D,MAAtB8D,aACJI,EAAW,EACXC,EAAiB,EACjBJ,EAAS,GACJtD,EAAI,EAAGA,EAAIqD,EAAanD,OAAQF,IACP,IAA1BqD,EAAarD,GAAG2D,MAChBF,IACiC,IAA1BJ,EAAarD,GAAG2D,OACvBD,IAKR,OAFAJ,EAAOpB,KAAKuB,GACZH,EAAOpB,KAAKwB,GACLJ,GAxEQ,EA2EnBM,YAAc,SAACR,EAAOS,GAAkB,IAMhCC,EAAQC,EALJpE,EAAkB,EAAKJ,MAAvBI,cACA0D,EAAiB,EAAK9D,MAAtB8D,aACAV,EAAe,EAAK9C,MAApB8C,WACJc,EAAW,EACXC,EAAiB,EAEjBtD,EAAU,kBAAoBgD,EAAM9C,KAAO,uBAE/C,OAAOX,EAAcW,MACjB,IAAK,YACD,MACJ,IAAK,OACD,GAA4B,IAAxB+C,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAHR,kBAKuBT,EALvB,GAKKmB,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAEJ,GAAIM,EAAiBK,GAA0B,IAAhBX,EAAMO,MAAa,CAC9C,EAAKR,aAAaC,GAClB,MAGJ,EAAK7D,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,SACD,GAA4B,IAAxBiD,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAHR,kBAKuBT,EALvB,GAKKmB,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAGAM,EAAiBK,GAA0B,IAAhBX,EAAMO,OACjC,EAAKR,aAAaC,GAGtB,EAAK7D,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,QACD,GAA4B,IAAxBiD,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAHR,kBAKuBT,EALvB,GAKKmB,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAEAM,EAAiBK,GAA0B,IAAhBX,EAAMO,OACjC,EAAKR,aAAaC,GAGtB,EAAK7D,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,UAEL,IAAK,OACD,MACJ,IAAK,UACD,GAA4B,IAAxBiD,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAHR,kBAKuBT,EALvB,GAKKmB,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAGAM,EAAiBK,GAA0B,IAAhBX,EAAMO,OACjC,EAAKR,aAAaC,GAEtB,MACJ,IAAK,SACD,GAA4B,IAAxBC,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAHR,kBAKuBT,EALvB,GAKKmB,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAEAM,EAAiBK,GAA0B,IAAhBX,EAAMO,OACjC,EAAKR,aAAaC,GAEtB,MACJ,IAAK,QACD,MACJ,IAAK,WACD,GAA4B,IAAxBC,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAHR,MAKiC,EAAKI,sBALtC,mBAMI,GADCC,EALL,KAKeC,EALf,KAMQD,EAAW,GAAqB,IAAhBL,EAAMO,MAAa,CACnC,EAAKR,aAAaC,GAClB,MAGAM,EAAiB,GAAqB,IAAhBN,EAAMO,OAC5B,EAAKR,aAAaC,GAGtB,EAAK7D,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,UACD,GAA4B,IAAxBiD,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAHR,MAKiC,EAAKI,sBALtC,mBAMI,GADCC,EALL,KAKeC,EALf,KAMQD,EAAW,GAAqB,IAAhBL,EAAMO,MAAa,CACnC,EAAKR,aAAaC,GAClB,MAGAM,EAAiB,GAAqB,IAAhBN,EAAMO,OAC5B,EAAKR,aAAaC,GAGtB,EAAK7D,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,SAED,GADAsB,QAAQC,IAAI,yBACgB,IAAxB0B,EAAanD,OAAc,CAC3B,EAAKiD,aAAaC,GAClB,MAJR,MAMiC,EAAKI,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAW,GAAqB,IAAhBL,EAAMO,MAAa,CACnC,EAAKR,aAAaC,GAClB,MAEJ,GAAIM,EAAiB,GAAqB,IAAhBN,EAAMO,MAAa,CACzC,EAAKR,aAAaC,GAClB,MAGJ,EAAK7D,MAAMc,mBAAmBD,KAnOvB,EA0OnB4D,eAAiB,SAACL,GAAW,IACjBhE,EAAkB,EAAKJ,MAAvBI,cACAsE,EAAe,EAAK1E,MAApB0E,WACJX,EAAS,GACb,OAAQK,GACJ,KAAK,EACD,IAAK,IAAI3D,EAAI,EAAGA,EAAIiE,EAAW/D,OAAQF,IACnC,IAAK,IAAI8B,EAAI,EAAGA,EAAImC,EAAWjE,GAAGkE,QAAQhE,OAAQ4B,IAC1CnC,EAAcW,OAAS2D,EAAWjE,GAAGkE,QAAQpC,GAAGxB,MAAS2D,EAAWjE,GAAG2D,OAASA,GAChFL,EAAOpB,KAAK+B,EAAWjE,IAInC,EAAKa,SAAS,CACVsD,YAAab,IAEjB5B,QAAQC,IAAI,4BAA6B2B,GACzC,MACJ,QACIc,MAAM,wDA7PC,EAiQnBC,SAAW,SAACjB,GAAW,IACXkB,EAAqB,EAAK/E,MAA1B+E,iBACR,EAAKV,YAAYR,EAAO,GACxBkB,EAAiBlB,IApQF,EAuQnBmB,YAAc,SAACnB,GAIX,IAJsB,IACdC,EAAiB,EAAK9D,MAAtB8D,aACAiB,EAAqB,EAAK/E,MAA1B+E,iBACJhB,EAAS,GACJtD,EAAI,EAAGA,EAAIqD,EAAanD,OAAQF,IACjCqD,EAAarD,GAAGM,OAAS8C,EAAM9C,MAC/BgD,EAAOpB,KAAKmB,EAAarD,IAGjC,EAAKa,SAAS,CACVwC,aAAcC,IAElB,EAAK/D,MAAMgE,UAAUD,GACrBgB,EAAiB,KApRF,EA+SnBE,cAAgB,WAMZ,IANmB,IACX7E,EAAkB,EAAKJ,MAAvBI,cACAwE,EAAgB,EAAKtE,MAArBsE,YACAxB,EAAe,EAAK9C,MAApB8C,WACAU,EAAiB,EAAK9D,MAAtB8D,aACJoB,EAAe,GALD,aAOd,IAAMC,EAAY1D,EACd2D,EAAaR,EAAY3D,QAAO,SAAC4C,GACjC,OAAQA,EAAMO,QAAUe,EAAYtB,EAAQ,QAEhDqB,EAAaC,GAAaC,EAAW9C,KAAI,SAACuB,GACtC,IAAIwB,EAAa,kCAMjB,QALqBtC,IAAjBc,EAAMyB,aAC+BvC,IAA7Bc,EAAMyB,OAAOC,cACbF,GAAcxB,EAAMyB,OAAOC,YAAYC,MAAQ,KAG/B,IAAxB1B,EAAanD,OAET,OADJ0E,GAAc,iBACF,4BAAQ5C,UAAW4C,EAAY3C,QAAS,kBAAM,EAAKoC,SAASjB,IAAQjE,IAAKiE,EAAM9C,KAAO8C,EAAMO,OAAQP,EAAM9C,MAE1H,IAAK,IAAIW,EAAI,EAAGA,EAAIoC,EAAanD,OAAQe,IAAK,CAE1C,GAAIoC,EADSpC,GACYX,OAAS8C,EAAM9C,KAEpC,OADAsE,GAAc,eACN,4BAAQ5C,UAAW4C,EAAY3C,QAAS,kBAAM,EAAKsC,YAAYnB,IAAQjE,IAAKiE,EAAM9C,KAAO8C,EAAMO,OAAQP,EAAM9C,MAI7H,OADAsE,GAAc,iBACN,4BAAQ5C,UAAW4C,EAAY3C,QAAS,kBAAM,EAAKoC,SAASjB,IAAQjE,IAAKiE,EAAM9C,KAAO8C,EAAMO,OAAQP,EAAM9C,UAxBjHU,EAAI,EAAGA,EAAI2B,EAAWzC,OAAQc,IAAM,IA4B7C,IADA,IAAIgE,EAAqB,GAChB/D,EAAI,EAAGA,EAAIwD,EAAavE,OAAQe,IACrC,GAAU,IAANA,EAC2B,YAAvBtB,EAAcW,MAA6C,WAAvBX,EAAcW,KAClD0E,EAAmB/D,GAAK,yBAAKe,UAAU,SAAS7C,IAAI,mBAAkB,6EAEtE6F,EAAmB/D,GAAK,yBAAKe,UAAU,eAAe7C,IAAI,YAAW,wCAAkBsF,EAAaxD,QAErG,CAEH+D,EAAmB/D,GAAK,yBAAKe,UAAU,eAAe7C,IADrC,aACuD8B,GAAG,2CAAiBA,GAAQwD,EAAaxD,IAGzH,OAAQ+D,GA3VR,EAAKnF,MAAQ,CACTsE,YAAa,GACbxB,WAAY,GACZU,aAAc,GACd4B,mBAAoB,EACpBC,UAAW,IAPA,E,gEAYf3D,KAAKoB,aACLpB,KAAKyC,eAAe,K,4CA0QF7B,GAClBZ,KAAKV,SAAS,CAAEoE,mBAAoB9C,M,yCASpC,IANgB,IAAD,OAEP8C,GADiB1D,KAAKhC,MAAtB8D,aACuB9B,KAAK1B,MAA5BoF,oBACAtC,EAAepB,KAAK1B,MAApB8C,WACJP,EAAU,GACV+C,EAAc5D,KAAKiC,sBALR,aAOX,IACInB,EADAF,EAAcnB,EAElBqB,EAAM8C,EAAYnE,GACdiE,IAAuBjE,EACvBoB,EAAQF,KAAK,4BAAQF,UAAU,sCAAsCC,QAAS,aAAgB9C,IAAK6B,GAAtF,YAAmG2B,EAAW3B,GAAKqB,IAEhID,EAAQF,KAAK,4BAAQF,UAAU,8BAA8BC,QAAS,kBAAM,EAAKM,sBAAsBJ,IAAchD,IAAK6B,GAA7G,WAAyH2B,EAAW3B,GAAKqB,KAPrJrB,EAAI,EAAGA,EAAI2B,EAAWzC,OAAQc,IAAM,IAU7C,OAAQ,yBAAKgB,UAAU,UAAUI,K,+BAqD3B,IACE6C,EAAuB1D,KAAK1B,MAA5BoF,mBACF3B,EAAS/B,KAAKiD,gBACdY,EAAa7D,KAAK8D,mBACxB,OAAQ,yBAAKrD,UAAU,gCACjBoD,EACA9B,EAAO2B,Q,GAvWK5F,aCwJXiG,E,kDAzGX,WAAY/F,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACT0F,OAAQ,IAGZ,EAAKC,UAAY,EAAKA,UAAUlE,KAAf,gBANF,E,gEAUfI,QAAQC,IAAI,iBACZJ,KAAKiE,UAAUjE,KAAKhC,MAAMkG,Q,gCAGpBC,GAAe,IAAD,OACdC,EAAM,0BAEZ,GAA2B,UAAvBD,EAAaX,MACdrD,QAAQC,IAAI,0BAEX,IAAK,IAAIX,EAAI,EAAGA,EAAI0E,EAAaH,OAAOrF,OAAQc,IAC5C4E,MAAMD,EAAMD,EAAaH,OAAOvE,GAAG2E,KAC9BE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKjF,UAAS,SAAChB,GAAD,MAAY,CAAE0F,OAAO,GAAD,mBAAM1F,EAAM0F,QAAZ,CAAoBO,WACvEE,OAAM,SAAAC,GAAOvE,QAAQC,IAAIsE,EAAI,sBAAwBN,Q,mCAalE,OAPmBpE,KAAK1B,MAAhB0F,OACU1D,KAAI,SAACqE,GACnB,OAAQ,yBAAK/G,IAAK,SAAS+G,EAAM5F,MAC7B,4BAAK4F,EAAM5F,MACX,2BAAI4F,EAAMC,KAAK,U,+BAMjB,IACEZ,EAAWhE,KAAK1B,MAAhB0F,OACAjF,EAASiB,KAAKhC,MAAMkG,KAApBnF,KACR,OAAQ,yBAAK0B,UAAU,oBACnB,yBAAKA,UAAU,aAAaoE,GAAI,QAAQ7E,KAAKhC,MAAMkG,KAAKV,MAAOsB,SAAS,KAAKC,KAAK,SAASC,kBAAgB,aAAaC,cAAY,QAChI,yBAAKxE,UAAU,eAAesE,KAAK,YAC/B,yBAAKtE,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAcoE,GAAG,cAAc9F,EAA7C,WACA,4BAAQmG,KAAK,SAASzE,UAAU,QAAQ0E,eAAa,QAAQC,aAAW,SACpE,0BAAMH,cAAY,QAAlB,UAGR,yBAAKxE,UAAU,cACQ,IAAlBuD,EAAOrF,OAAeqB,KAAKqF,aAAe,cAE/C,yBAAK5E,UAAU,gBACX,4BAAQyE,KAAK,SAASzE,UAAU,oBAAoB0E,eAAa,SAAjE,kB,GA1DJrH,aC9CT,SAASwH,EAAT,GAAiD,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAC3C,OACI,yBAAK/E,UAAU,gCACX,2BAAOA,UAAU,eAAegF,QAAQ,aAAxC,WAAmE,2BAAOC,MAAOH,EAAWxG,KAAK,YAAY8F,GAAG,YAAYc,SAAUH,KCFnI,SAASI,EAAT,GAAyD,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,OAAQhG,EAAY,EAAZA,SACvDK,QAAQC,IAAIyF,GACZ,IAAIE,EAAQ,GACZ,OAAQjG,GACJ,IAAK,QACDiG,EAAQF,EAAUvF,KAAI,SAAC0F,GAEnB,IADA,IAAIC,EAAU,GACLxG,EAAI,EAAGA,EAAIuG,EAAKE,gBAAgBvH,OAAQc,IAC7CwG,GAAWD,EAAKE,gBAAgBzG,GAAG0G,cAAcpH,KAAO,KAAOiH,EAAKE,gBAAgBzG,GAAG2G,MAAQ,IAInG,IAFA,IAAIpC,EAAS,GACTqC,EAAS,SAAWL,EAAKxC,MACpB9D,EAAI,EAAGA,EAAIsG,EAAKhC,OAAOrF,OAAQe,IACpCsE,EAAOrD,KAAK,0BAAM2F,cAAY,QAAQC,cAAaF,EAAQzI,IAAKoI,EAAKhC,OAAOtE,GAAGX,MAAOiH,EAAKhC,OAAOvE,GAAGV,KAAzF,MAEhB,OAAQ,yBAAK0B,UAAU,yBAAyB7C,IAAKoI,EAAKxC,OACtD,yBAAK/C,UAAU,8CACX,4BAAKuF,EAAKjH,OAEd,yBAAK0B,UAAU,aACX,uBAAGA,UAAU,aAAY,gDAAzB,IAAwDuF,EAAKQ,kBAC7D,uBAAG/F,UAAU,aAAY,wCAAzB,IAAgDuF,EAAKS,KACrD,uBAAGhG,UAAU,aAAY,8CAAzB,IAAsDuF,EAAKU,WAC3D,uBAAGjG,UAAU,aAAY,6CAAzB,IAAqDuF,EAAKW,eAC1D,uBAAGlG,UAAU,aAAY,2CAAzB,IAAmDuD,GACnD,uBAAGvD,UAAU,aAAY,oDAAzB,IAA4DwF,GAC5D,uBAAGxF,UAAU,aAAY,0CAAzB,IAAkDuF,EAAKY,OACvD,4BAAQnG,UAAU,kBAAkBC,QAAS,kBAAMoF,EAAOE,EAAKxC,SAA/D,UAA+EwC,EAAKjH,MACpF,kBAAC,EAAD,CAAWmF,KAAM8B,SAI7B,MACJ,IAAK,UACDD,EAAQF,EAAUvF,KAAI,SAACuG,GACnB,IAAIzH,EACA0H,EAAQ,EACZ1H,EAAgByH,EAAczH,cAAckB,KAAI,SAACyG,GAC7C,OAAID,IAAUD,EAAczH,cAAcT,OAAS,EACvCoI,EAAKhI,KAAO,MAExB+H,IACQC,EAAKhI,KAAO,SAExB,IAAIiI,EAMJ,OALAA,EAAeH,EAAcI,cAAc3G,KAAI,SAAC4G,GAC5C,OAAQA,EAAYnI,KAAO,OAIvB,yBAAK0B,UAAU,yBAAyB7C,IAAKiJ,EAAcrD,OAC/D,yBAAK/C,UAAU,8CACX,4BAAKoG,EAAc9H,OAEvB,yBAAK0B,UAAU,aACX,uBAAGA,UAAU,aAAY,4CAAzB,IAAoDoG,EAAcM,SAClE,uBAAG1G,UAAU,aAAY,2DAAzB,IAAmErB,EAAnE,KACA,uBAAGqB,UAAU,aAAY,kDAAzB,IAA0DuG,GAC1D,uBAAGvG,UAAU,cACb,uBAAGA,UAAU,cACb,uBAAGA,UAAU,cACb,4BAAQA,UAAU,kBAAkBC,QAAS,kBAAMoF,EAAOe,EAAcrD,SAAxE,UAAwFqD,EAAc9H,WAQ1H,OAAQgH,E,ICqESqB,E,kDACjB,WAAYpJ,GAAQ,IAAD,8BACf,cAAMA,IAiEVqJ,YAAc,SAACC,GAAU,IACbC,EAAc,EAAKjJ,MAAnBiJ,UACR,EAAKjI,SAAS,CACVgI,KAAMA,IAEV,IAAIE,EAAUD,EAAUjH,KAAI,SAAC0F,GACzB,OAAOA,KAEPyB,EAAU,GACD,KAATH,GACAG,EAAUD,EAAQvI,QAAO,SAAA+G,GAAI,OAAIA,EAAKxC,MAAMkE,SAASJ,EAAKK,kBAE1D,EAAKrI,SAAS,CAAEsI,cAAeH,MAE/BtH,QAAQC,IAAIqH,GACZ,EAAKnI,SAAS,CAAEsI,cAAeJ,MA/EnC,EAAKlJ,MAAQ,CACTuJ,MAAO,GACPN,UAAW,GACXpD,aAAc,GACdyD,cAAe,GACfN,KAAM,IAGV,EAAKQ,WAAa,EAAKA,WAAW/H,KAAhB,gBAClB,EAAKgI,SAAW,EAAKA,SAAShI,KAAd,gBAChB,EAAKiI,QAAU,EAAKA,QAAQjI,KAAb,gBAZA,E,gEAgBXrC,EAAWsC,KAAKhC,MAAMmG,eACtBnE,KAAKV,SAAS,CAAE6E,aAAcnE,KAAKhC,MAAMmG,eAEzCzG,EAAWsC,KAAKhC,MAAM6J,OACtB7H,KAAKV,SAAS,CAACuI,MAAO7H,KAAKhC,MAAM6J,MAAON,UAAWvH,KAAKhC,MAAMuJ,YAE9DvH,KAAK+H,WAET5H,QAAQC,IAAIJ,KAAKhC,S,6CAIjBgC,KAAKhC,MAAMiK,SAASjI,KAAK1B,MAAMuJ,OAC/B7H,KAAKhC,MAAMkK,aAAalI,KAAK1B,MAAMiJ,a,iCAG3B,IAAD,OACPpH,QAAQC,IAAI,iBACZ,IAAMgE,EAAM,+BACZC,MAAMD,EAAM,SACPE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKjF,SAAS,CAAEuI,MAAOtD,GAAW,EAAKyD,QAAQzD,OAChEE,OAAM,SAAAC,GAAOvE,QAAQC,IAAIsE,EAAI,qBAAuBN,Q,8BAGrD+D,GAAO,IAAD,OACVhI,QAAQC,IAAI+H,GAGZ,IAFA,IAES1J,EAAI,EAAGA,EAAI0J,EAAKC,QAAQzJ,OAAQF,IACtC4F,MAFS,0BAEG8D,EAAKC,QAAQ3J,GAAG2F,KACvBE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKjF,UAAS,SAAChB,GAAD,MAAY,CAAEiJ,UAAU,GAAD,mBAAMjJ,EAAMiJ,WAAZ,CAAuBhD,a,iCAI9Ef,GAGP,IAHe,IAAD,OACN+D,EAAcvH,KAAK1B,MAAnBiJ,UACAc,EAAYrI,KAAKhC,MAAjBqK,QAFM,WAGL5J,GACL,GAAI8I,EAAU9I,GAAG+E,QAAUA,EAAO,CAC9B,IAAMW,EAAeoD,EAAUtI,QAAO,SAAU+G,GAAQ,OAAOA,EAAKjH,OAASwI,EAAU9I,GAAGM,QAI1F,OAHA,EAAKO,SAAS,CAAE6E,aAAcA,EAAa,KAC3CkE,EAAQlE,EAAa,IACrBhE,QAAQC,IAAI+D,EAAa,IACzB,UANC1F,EAAI,EAAGA,EAAI8I,EAAU5I,OAAQF,IAAK,gBAAlCA,GAMD,S,+BAwBF,IAAD,OAEG6I,EAAStH,KAAK1B,MAAdgJ,KACAM,EAAkB5H,KAAK1B,MAAvBsJ,cACAL,EAAcvH,KAAK1B,MAAnBiJ,UACR,OAAQ,yBAAK9G,UAAU,oBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,8BAAd,oBACA,kBAAC6E,EAAD,CAAWI,MAAO4B,EAAM9B,aAAc,SAAAd,GAAC,OAAI,EAAK2C,YAAY3C,EAAE2B,OAAOX,WAEzE,kBAACE,EAAD,CAAeC,UAAoB,KAATyB,EAAcM,EAAgBL,EAAWzH,SAAS,QAAQgG,OAAQ9F,KAAK8H,kB,GAhG1EhK,aCxItBwK,E,kDACjB,WAAYtK,GAAQ,IAAD,8BACf,cAAMA,IAqEVuK,cAAgB,SAACjB,GAAU,IACfkB,EAAgB,EAAKlK,MAArBkK,YACR,EAAKlJ,SAAS,CACVgI,KAAMA,IAEV,IAAIE,EAAUgB,EAAYlI,KAAI,SAACmI,GAC3B,OAAOA,KAEPhB,EAAU,GACD,KAATH,GACAG,EAAUD,EAAQvI,QAAO,SAAAwJ,GAAc,OAAIA,EAAejF,MAAMkE,SAASJ,EAAKK,kBAC9E,EAAKrI,SAAS,CAAEsI,cAAeH,MAE/BtH,QAAQC,IAAIqH,GACZ,EAAKnI,SAAS,CAAEsI,cAAeJ,MAlFnC,EAAKlJ,MAAQ,CACTqE,QAAS,GACT6F,YAAa,GACbpK,cAAe,GACfwJ,cAAc,GACdN,KAAM,IAGV,EAAKoB,YAAc,EAAKA,YAAY3I,KAAjB,gBAVJ,E,gEAeXrC,EAAWsC,KAAKhC,MAAMI,gBACtB4B,KAAKV,SAAS,CAAElB,cAAe4B,KAAKhC,MAAMI,gBAE1CV,EAAWsC,KAAKhC,MAAM2E,SACtB3C,KAAKV,SAAS,CAAEqD,QAAS3C,KAAKhC,MAAM2E,QAAS6F,YAAaxI,KAAKhC,MAAMwK,cAErExI,KAAK2I,e,6CAKJjL,EAAWsC,KAAKhC,MAAM2E,SAKvBxC,QAAQC,IAAI,qBAJZD,QAAQC,IAAI,cACZJ,KAAKhC,MAAM4K,WAAW5I,KAAK1B,MAAMqE,SACjC3C,KAAKhC,MAAM6K,eAAe7I,KAAK1B,MAAMkK,gB,mCAM/B,IAAD,OACTrI,QAAQC,IAAI,mBACZ,IAAMgE,EAAM,+BACZC,MAAMD,EAAM,WACPE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKjF,SAAS,CAAEqD,QAAS4B,GAAW,EAAKyD,QAAQzD,OAClEE,OAAM,SAAAC,GAAOvE,QAAQC,IAAIsE,EAAI,uBAAyBN,Q,8BAIvD+D,GAAO,IAAD,OACVhI,QAAQC,IAAI+H,GAGZ,IAFA,IAES1J,EAAI,EAAGA,EAAI0J,EAAKC,QAAQzJ,OAAQF,IACrC4F,MAFQ,0BAEI8D,EAAKC,QAAQ3J,GAAG2F,KACvBE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKjF,UAAS,SAAChB,GAAD,MAAY,CAAEkK,YAAY,GAAD,mBAAMlK,EAAMkK,aAAZ,CAAyBjE,a,kCAIlFf,GAAQ,IAAD,OACPgF,EAAgBxI,KAAK1B,MAArBkK,YACAM,EAAa9I,KAAKhC,MAAlB8K,SACR3I,QAAQC,IAAI,QAASoI,GACrB,IAJe,eAIN/J,GACL,GAAI+J,EAAY/J,GAAG+E,QAAUA,EAAO,CAChC,IAAMpF,EAAgBoK,EAAYvJ,QAAO,SAAU8J,GAAU,OAAOA,EAAOhK,OAASyJ,EAAY/J,GAAGM,QAGnG,OAFA,EAAKO,SAAS,CAAElB,cAAeA,EAAc,KAC7C0K,EAAS1K,EAAc,IACvB,UALCK,EAAI,EAAGA,EAAI+J,EAAY7J,OAAQF,IAAK,gBAApCA,GAKD,S,+BAuBF,IAAD,OACG6I,EAAStH,KAAK1B,MAAdgJ,KACAM,EAAkB5H,KAAK1B,MAAvBsJ,cACAY,EAAgBxI,KAAK1B,MAArBkK,YACR,OAAQ,yBAAK/H,UAAU,oBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,eAAd,qBACA,kBAAC6E,EAAD,CAAWI,MAAO4B,EAAM9B,aAAc,SAAAd,GAAC,OAAI,EAAK6D,cAAc7D,EAAE2B,OAAOX,WAE3E,kBAACE,EAAD,CAAeC,UAAoB,KAATyB,EAAcM,EAAgBY,EAAa1I,SAAS,UAAUgG,OAAQ9F,KAAK0I,mB,GAlG7E5K,aCkH7BkL,E,kDApHX,WAAYhL,GAAQ,IAAD,8BACf,cAAMA,IA8BViL,YAAc,SAACC,GAAD,OAAWA,EAAM7C,OAAOP,UA/BnB,EAiCnBN,aAAe,SAAC0D,GAKZ,IALuB,IAAD,EACEA,EAAM7C,OAAtBtH,EADc,EACdA,KAAM2G,EADQ,EACRA,MACNyD,EAAW,EAAK7K,MAAhB6K,OACFC,EAAYC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEnC1K,EAAI,EAAGA,EAAI2K,EAAUzK,OAAQF,IAC9B2K,EAAU3K,GAAGM,OAASA,IAElBqK,EAAU3K,GAAGiH,MADH,KAAVA,EACqB,EAEA8D,SAAS9D,EAAO,KAMjD,EAAKpG,SAAS,CACV6J,OAAQC,KAlDG,EAsDnBK,WAAa,WACT,EAAKzL,MAAM0L,aAAa,EAAKpL,MAAM6K,SArDnC,EAAKQ,aAAe,CAChBR,OAAQ,CACJ,CAAEpK,KAAM,MAAO2G,MAAO,GACtB,CAAE3G,KAAM,MAAO2G,MAAO,GACtB,CAAE3G,KAAM,MAAO2G,MAAO,GACtB,CAAE3G,KAAM,MAAO2G,MAAO,GACtB,CAAE3G,KAAM,MAAO2G,MAAO,GACtB,CAAE3G,KAAM,MAAO2G,MAAO,KAI9B,EAAKpH,MAAQ,EAAKqL,aAbH,E,gEAkBfxJ,QAAQC,IAAI,qBAAsBJ,KAAKhC,OACvCgC,KAAKV,SAAS,CACV6J,OAAQ,CACJ,CAAEpK,KAAM,MAAO2G,MAAO1F,KAAKhC,MAAM4L,sBAAX,KACtB,CAAE7K,KAAM,MAAO2G,MAAO1F,KAAKhC,MAAM4L,sBAAX,KACtB,CAAE7K,KAAM,MAAO2G,MAAO1F,KAAKhC,MAAM4L,sBAAX,KACtB,CAAE7K,KAAM,MAAO2G,MAAO1F,KAAKhC,MAAM4L,sBAAX,KACtB,CAAE7K,KAAM,MAAO2G,MAAO1F,KAAKhC,MAAM4L,sBAAX,KACtB,CAAE7K,KAAM,MAAO2G,MAAO1F,KAAKhC,MAAM4L,sBAAX,U,+BAiCxB,IACET,EAAWnJ,KAAK1B,MAAhB6K,OAER,OAAQ,8BACJ,2BAAO1I,UAAW0I,EAAO,GAAGzD,MAAQ,IAAMyD,EAAO,GAAGzD,MAAQ,EAAI,sBAAwB,oBAAsBD,QAAQ,OAAtH,YACQ,2BAAOhF,UAAU,QACbyE,KAAK,SACLnG,KAAK,MACL8F,GAAG,MACHa,MAAOyD,EAAO,GAAGzD,MACjBC,SAAU3F,KAAKwF,aACfqE,QAAS7J,KAAKiJ,cAC1B,2BAAOxI,UAAW0I,EAAO,GAAGzD,MAAQ,IAAMyD,EAAO,GAAGzD,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,gBACQ,2BAAOhF,UAAU,QACbyE,KAAK,SACLnG,KAAK,MACL8F,GAAG,MACHa,MAAOyD,EAAO,GAAGzD,MACjBC,SAAU3F,KAAKwF,aACfqE,QAAS7J,KAAKiJ,cAC1B,2BAAOxI,UAAW0I,EAAO,GAAGzD,MAAQ,IAAMyD,EAAO,GAAGzD,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,aACQ,2BAAOhF,UAAU,QACbyE,KAAK,SACLnG,KAAK,MACL8F,GAAG,MACHa,MAAOyD,EAAO,GAAGzD,MACjBC,SAAU3F,KAAKwF,aACfqE,QAAS7J,KAAKiJ,cAC1B,2BAAOxI,UAAW0I,EAAO,GAAGzD,MAAQ,IAAMyD,EAAO,GAAGzD,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,gBACQ,2BAAOhF,UAAU,QACbyE,KAAK,SACLnG,KAAK,MACL8F,GAAG,MACHa,MAAOyD,EAAO,GAAGzD,MACjBC,SAAU3F,KAAKwF,aACfqE,QAAS7J,KAAKiJ,cAC1B,2BAAOxI,UAAW0I,EAAO,GAAGzD,MAAQ,IAAMyD,EAAO,GAAGzD,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,YACQ,2BAAOhF,UAAU,QACbyE,KAAK,SACLnG,KAAK,MACL8F,GAAG,MACHa,MAAOyD,EAAO,GAAGzD,MACjBC,SAAU3F,KAAKwF,aACfqE,QAAS7J,KAAKiJ,cAC1B,2BAAOxI,UAAW0I,EAAO,GAAGzD,MAAQ,IAAMyD,EAAO,GAAGzD,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,UACQ,2BAAOhF,UAAU,QACbyE,KAAK,SACLnG,KAAK,MACL8F,GAAG,MACHa,MAAOyD,EAAO,GAAGzD,MACjBC,SAAU3F,KAAKwF,aACfqE,QAAS7J,KAAKiJ,cAClB,2BAAO/D,KAAK,SAASQ,MAAM,SAAShF,QAASV,KAAKyJ,kB,GAhHtC3L,aCFjB,SAASgM,EAAeC,GAMnC,IALA,IAEIC,EAAe,EACfC,EAAgB,EAChBC,EAAqB,GAChBzL,EAAI,EAAGA,EALK,EAKeA,IAChCuL,EAAeG,KAAKC,MAAOD,KAAKE,SAAWN,EAAU,GACrDG,EAAmBvJ,KAAKqJ,GAE5BE,EAAmBI,OACnBJ,EAAmBK,OAAO,EAAGC,GAC7B,IAAK,IAAIjK,EAAI,EAAGA,EAAI2J,EAAmBvL,OAAQ4B,IAC3C0J,GAAiBC,EAAmB3J,GAExC,OAAO0J,E,ICVUQ,E,kDACjB,WAAYzM,GAAQ,IAAD,8BACf,cAAMA,IA4BV0M,mBAAqB,WACjBvK,QAAQC,IAAI,gBAAiB,EAAK9B,MAAMqM,eAKxC,IANuB,IAGf7D,EAAU,EAAKxI,MAAMqM,cAArB7D,MACAsB,EAAY,EAAK9J,MAAMqM,cAAvBvC,QACJuC,EAAgB,GACXpK,EAAI,EAAGA,EAAIuG,EAAOvG,IAAK,CAE5BoK,EADcvC,EAAQ7H,GAAGiD,OACA,EAE7B,EAAKlE,SAAS,CAAEsK,sBAAuBe,KArCvC,EAAKrM,MAAQ,CACTqM,cAAe,GACfC,kBAAmB,GACnBhB,sBAAuB,GACvBiB,qBAAqB,GAEzB,EAAKC,SAAW,EAAKA,SAAS/K,KAAd,gBARD,E,gEAYXrC,EAAWsC,KAAKhC,MAAM2M,gBACtBxK,QAAQC,IAAI,+CACZJ,KAAKV,SAAS,CAAEqL,cAAe3K,KAAKhC,MAAM2M,cAAeC,kBAAmB5K,KAAKhC,MAAM4M,oBACvF5K,KAAK0K,uBAELvK,QAAQC,IAAI,6BACZJ,KAAK+K,oBAGT5K,QAAQC,IAAIJ,KAAKhC,S,6CAIjBgC,KAAKhC,MAAMgN,iBAAiBhL,KAAK1B,MAAMqM,eACvC3K,KAAKhC,MAAMiN,qBAAqBjL,KAAK1B,MAAMsM,qB,yCAgB3B,IAAD,OACTxG,EAAM,+BACZC,MAAMD,EAAM,kBACPE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKjF,SAAS,CAAEqL,cAAepG,GAAU,EAAKyD,QAAQzD,OACvEE,OAAM,SAAAC,GAAOvE,QAAQC,IAAIsE,EAAI,6BAA+BN,Q,8BAG7D+D,GAAO,IAAD,OACVhI,QAAQC,IAAI+H,GAGZ,IAFA,IAES1J,EAAI,EAAGA,EAAI0J,EAAKC,QAAQzJ,OAAQF,IACrC4F,MAFQ,0BAEI8D,EAAKC,QAAQ3J,GAAG2F,KACvBE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKjF,UAAS,SAAChB,GAAD,MAAY,CAAEsM,kBAAkB,GAAD,mBAAMtM,EAAMsM,mBAAZ,CAA+BrG,OAAY,EAAKmG,2B,qCAK3G,IAGRzE,EAHO,OACH2E,EAAsB5K,KAAK1B,MAA3BsM,kBADG,EAE6B5K,KAAKhC,MAArCmG,EAFG,EAEHA,aAAc/F,EAFX,EAEWA,cACT8H,EAAkB,GAC3ByE,EAAgBC,EAAkBtK,KAAI,SAAC4K,GACvC/K,QAAQC,IAAI,kBAAmB8K,GAC/B,IAAIC,EAAe,eACnB,GAAIzN,EAAWU,GACX,IAAK,IAAIqB,EAAI,EAAGA,EAAIrB,EAAc6I,cAActI,OAAQc,IAChDyL,EAAQ1H,QAAUpF,EAAc6I,cAAcxH,GAAG+D,QACjD2H,GAAgB,4BAChBhL,QAAQC,IAAI,qBAAsBhC,EAAc6I,cAAcxH,GAAG+D,QAI7E,OAAQ,yBAAK/C,UAAU,4BAA4B7C,IAAKsN,EAAQ1H,OAC5D,2BAAI0H,EAAQE,WACZ,uBAAG3K,UAAW0K,GAAe,EAAK7M,MAAMsL,sBAAsBsB,EAAQ1H,YA0ClF,OAvCKrD,QAAQC,IAAI,mBAAoBJ,KAAK1B,MAAMsL,uBAExClM,EAAWyG,KACX+B,EAAkB/B,EAAa+B,gBAAgB5F,KAAI,SAAC8F,EAAO5C,GACvD,IAAK,IAAI/E,EAAI,EAAGA,EAAImM,EAAkBjM,OAAQF,IAC1C,GAAImM,EAAkBnM,GAAGM,OAASqH,EAAMD,cAAcpH,KAClD,OAAQ,wBAAI0B,UAAU,oBAAoB7C,IAAK4F,GAAQoH,EAAkBnM,GAAG2M,UAApE,MAAkFhF,EAAMA,OAGxG,OAAQ,wBAAIxI,IAAK4F,GAAT,sBAEZyC,EAAU9B,EAAa+B,gBAAgB5F,KAAI,SAAC8F,GACxC,OAAOA,KAEXuE,EAAgBC,EAAkBtK,KAAI,SAAC4K,GACnC,IAAIC,EAAe,gBACnB,GAAIzN,EAAWU,GACX,IAAK,IAAIqB,EAAI,EAAGA,EAAIrB,EAAc6I,cAActI,OAAQc,IAChDyL,EAAQ1H,QAAUpF,EAAc6I,cAAcxH,GAAG+D,QACjD2H,EAAe,6BAI3B,IAAK,IAAI1M,EAAI,EAAGA,EAAIwH,EAAQtH,OAAQF,IAChC,GAAIwH,EAAQxH,GAAG0H,cAAcpH,KAAK4I,gBAAkBuD,EAAQ1H,MAAO,CAC/D2H,GAAgB,SAChB,IAAI/E,EAAQ,EAAKpI,MAAM4L,sBAAsBsB,EAAQ1H,OAASyC,EAAQxH,GAAG2H,MACzE,OAAQ,yBAAK3F,UAAU,4BAA4B7C,IAAKsN,EAAQ1H,OAC5D,2BAAI0H,EAAQE,WACZ,uBAAG3K,UAAW0K,GAAe/E,IAIzC,OAAQ,yBAAK3F,UAAU,4BAA4B7C,IAAKsN,EAAQ1H,OAC5D,2BAAI0H,EAAQE,WACZ,uBAAG3K,UAAW0K,GAAe,EAAKnN,MAAM4L,sBAAsBsB,EAAQ1H,aAI9E,CAAC0C,EAAiByE,K,+BAGjBO,GACL/K,QAAQC,IAAI,aAAc8K,GAI1B,IALc,IAENP,EAAkB3K,KAAK1B,MAAvBqM,cAEJxB,EAD8BnJ,KAAK1B,MAA/BsL,sBAECnL,EAAI,EAAGA,EAAIkM,EAAc7D,MAAOrI,IACrC,GAAIkM,EAAcvC,QAAQ3J,GAAG+E,QAAU0H,EAAS,CAC5C/B,EAAO+B,GAAWpB,EAAe,GACjC9J,KAAKV,SAAS,CAAEsK,sBAAuBT,IACvC,S,4CAMRnJ,KAAKV,UAAS,SAAAhB,GAAK,MAAK,CACpBuM,qBAAsBvM,EAAMuM,0B,+BAI1B,IAAD,SAC8C7K,KAAK1B,MAAhDsM,EADH,EACGA,kBAAmBC,EADtB,EACsBA,oBACvB1B,EAASyB,EAAkBtK,KAAI,SAAC6K,EAAc3H,GAC9C,OAAQ,4BAAQ9C,QAAS,kBAAM,EAAKoK,SAASK,EAAa3H,QAAQ/C,UAAU,yBAAyB7C,IAAK4F,GAAQ2H,EAAaC,cAH9H,EAKoCpL,KAAKqL,eALzC,mBAKEnF,EALF,KAKmByE,EALnB,KAML,OAAQ,yBAAKlK,UAAU,oBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,8BAAd,+BAEJ,yBAAKA,UAAU,OAAOkK,GACtB,wBAAIlK,UAAU,uBAAuByF,GACrC,yBAAKzF,UAAU,sBACVoK,EAAsB,kBAAC,EAAD,CAAmBnB,aAAc1J,KAAKhC,MAAM0L,aAAcE,sBAAuB5J,KAAK1B,MAAMsL,wBAA4BT,EAC/I,4BAAQzI,QAAS,kBAAM,EAAK4K,uBAAuB7K,UAAU,2CAA2CoK,EAAsB,aAAe,gBAAwB,mC,GA/JlJ/M,aC6C5ByN,E,kDAvCX,WAAYvN,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,GAFE,E,qDAcT,IACEF,EAAkB4B,KAAKhC,MAAvBI,cAER,OADuB4B,KAAKhC,MAApB6F,YAEJ,IAAK,QACD,OAAQ,kBAAC,EAAU7D,KAAKhC,OAC5B,IAAK,UACD,OAAQ,kBAAC,EAAYgC,KAAKhC,OAC9B,IAAK,gBACD,OAAQ,kBAAC,EAAuBgC,KAAKhC,OACzC,IAAK,SACD,OAAIN,EAAWU,SAAiD2C,IAA/B3C,EAAcqD,aACnC,kBAAC,EAAgBzB,KAAKhC,OAE1B,yBAAKyC,UAAU,gCAAgCrC,EAAcW,KAA7D,2BACZ,IAAK,iBACD,OAAQ,kBAAC,EAAkBiB,KAAKhC,OACpC,QACI,OAAQ,yBAAKyC,UAAU,gCAAf,+B,GAjCA3C,aCkIT0N,E,kDAvIX,WAAYxN,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,GAFE,E,gEAUf,IAAMuF,EAAa7D,KAAKhC,MAAM6F,WACxB4H,EAAuBzL,KAAKhC,MAAMyN,qBAClCC,EAAW1L,KAAKhC,MAAM0N,SACtBtN,EAAgB4B,KAAKhC,MAAMI,cA0BjC,OAxBiBqN,EAAqBnL,KAAI,SAACR,EAAU0D,GACjD,GAAI9F,EAAWU,GACX,OAAIyF,IAAe/D,EACP,4BAAQoF,KAAK,SAASzE,UAAU,iCAAiCqE,SAAS,KAAK6G,gBAAc,OAAO/N,IAAK4F,GAAQ1D,GAEjH,4BAAQoF,KAAK,SAASxE,QAAS,WAAQgL,EAAS5L,IAAcW,UAAU,+BAA+B7C,IAAK4F,GAAQ1D,GAGhI,GAAI+D,IAAe/D,EACf,OAAQ,4BAAQoF,KAAK,SAASzE,UAAU,iCAAiCqE,SAAS,KAAK6G,gBAAc,OAAO/N,IAAK4F,GAAQ1D,GAEzH,GAAiB,YAAbA,GAA0C,kBAAf+D,GAAiD,WAAfA,EAQ7D,OAAQ,4BAAQqB,KAAK,SAASxE,QAAS,WAAQgL,EAAS5L,IAAcW,UAAU,8BAA8B7C,IAAK4F,GAAQ1D,GAP3H,OAAQ+D,GACJ,IAAK,gBAEL,QACI,OAAQ,4BAAQqB,KAAK,SAASxE,QAAS,WAAQgL,EAAS5L,IAAcW,UAAU,8BAA8B7C,IAAK4F,GAAQ1D,S,+BAYnJ,OAAQ,yBAAKW,UAAU,8CAA8CoE,GAAG,+BAC5D,4BAAQpE,UAAU,2CAA2CyE,KAAK,SAASoB,cAAY,WAAWC,cAAY,qBAAqBqF,gBAAc,oBAAoBC,gBAAc,QAAQzG,aAAW,qBAClM,0BAAM3E,UAAU,yBAEpB,yBAAKA,UAAU,kCAAkCoE,GAAG,qBAChD7E,KAAK8L,0B,GAjDJhO,aCYViO,EAdG,SAAC/N,GAGf,IAAIgO,EAAW,yBAAKvL,UAAU,MAAMoE,GAAG,UAQvC,OAPI7G,EAAMiO,aAAatN,OAAS,IAC5BqN,EAAW,yBAAKvL,UAAU,MAAMoE,GAAG,SAC/B,yBAAKpE,UAAU,mBACVzC,EAAMiO,gBAIXD,GCoMGE,E,kDAvMX,WAAYlO,GAAQ,IAAD,8BACf,cAAMA,IAyCVc,mBAAqB,SAACD,GAClB,EAAKS,SAAS,CAAE2M,aAAcpN,GAAW,EAAKsN,gBA3C/B,EA8CnBA,YAAc,WACV,IAAMC,EAAYC,SAASC,eAAe,SAI1CC,YAAW,WACP,IAAIC,EAAOC,aAAY,WACdL,EAAUM,MAAMC,UAClBP,EAAUM,MAAMC,QAAU,GAEzBP,EAAUM,MAAMC,QAAU,EAC1BP,EAAUM,MAAMC,SAAW,IAE3BC,cAAcJ,KAEnB,MACJ,MACH,EAAKlN,SAAS,CAAE2M,aAAc,KAC9BG,EAAUM,MAAMC,QAAU,GAhEX,EAmEnB5J,iBAAmB,SAAClB,GAChB,EAAKvC,SAAS,CAAEuN,cAAehL,KApEhB,EAuEnBG,UAAY,SAACD,GACT,EAAKzC,SAAS,CAAEwC,aAAcC,KAxEf,EA2EnBJ,iBAAmB,SAACmL,GAChB,EAAKxN,SAAS,CAAE8B,WAAY0L,KA5Eb,EA+EnBpB,SAAW,SAAC5L,GACR,EAAKR,SAAS,CAAEuE,WAAY/D,KAhFb,EAiGnBgK,eAAiB,SAACC,GAMd,IALA,IAEIC,EAAe,EACfC,EAAgB,EAChBC,EAAqB,GAChBzL,EAAI,EAAGA,EALK,EAKeA,IAChCuL,EAAeG,KAAKC,MAAOD,KAAKE,SAAWN,EAAU,GACrDG,EAAmBvJ,KAAKqJ,GAE5BE,EAAmBI,OACnBJ,EAAmBK,OAAO,EAAGC,GAC7B,IAAK,IAAIjK,EAAI,EAAGA,EAAI2J,EAAmBvL,OAAQ4B,IAC3C0J,GAAiBC,EAAmB3J,GAExC,OAAO0J,GAhHQ,EA4HnB8C,sBAAwB,SAAC3N,GACrB,EAAKE,SAAS,CAAEF,cAAeA,KA7HhB,EAgInBG,iBAAmB,SAACyN,EAAOzO,GACvB,EAAKe,SAAS,CACVF,cAAe4N,EACf3O,oBAAqBE,KAnIV,EAuInB0O,oBAAsB,SAAC7N,EAAeb,GAClC,EAAKe,SAAS,CACVF,cAAeA,EACf8N,qBAAsB3O,KA1IX,EA8InBmL,aAAe,SAACyD,GAIZ,IAJ0B,IAEtBhE,EAD8B,EAAK7K,MAA/BsL,sBAEJwD,EAAW,GACN3O,EAAI,EAAGA,EAAI0O,EAAUxO,OAAQF,IAC9B0O,EAAU1O,GAAGiH,MAAQ,GAAKyH,EAAU1O,GAAGiH,MAAQ,GAC/C0H,EAASzM,KAAKwM,EAAU1O,GAAGM,OAE3BoK,EAAOgE,EAAU1O,GAAGM,MAAQyK,SAAS2D,EAAU1O,GAAGiH,MAAO,IACzD,EAAKpG,SAAS,CAAEsK,sBAAuBT,KAG/C,GAAIiE,EAASzO,OAAS,EAAG,CAErB,IADA,IAAI0O,EAAc,0DACT7M,EAAI,EAAGA,EAAI4M,EAASzO,OAAQ6B,IAC7BA,EAAI4M,EAASzO,OAAS,EACtB0O,GAAeD,EAAS5M,GAAK,KAE7B6M,GAAeD,EAAS5M,GAGhC6M,GAAe,IACf,EAAKvO,mBAAmBuO,KAlK5B,EAAK/O,MAAQ,CACTgP,SAAU,WACV1D,sBAAuB,GACvB6B,qBAAsB,CAAC,QAAS,UAAW,iBAAkB,gBAAiB,UAC9E5H,WAAY,QACZzF,cAAe,GACf+F,aAAc,GACd/E,cAAe,GACf8N,qBAAsB,GACtB7O,oBAAqB,GACrByD,aAAc,GACdV,WAAY,GACZyL,cAAe,GACfZ,aAAc,GACdtK,iBAAkB,EAAKA,iBACvB7C,mBAAoB,EAAKA,mBACzBiE,iBAAkB,EAAKA,iBACvBxD,iBAAkB,EAAKA,iBACvBwN,sBAAuB,EAAKA,sBAC5BE,oBAAqB,EAAKA,oBAC1BjL,UAAW,EAAKA,WAOpB,EAAKqG,QAAU,EAAKA,QAAQtI,KAAb,gBACf,EAAK+I,SAAW,EAAKA,SAAS/I,KAAd,gBA9BD,E,+IAmHXwN,GACJpN,QAAQC,IAAI,gBACZJ,KAAKV,SAAS,CAAE6E,aAAcoJ,M,+BAGzBC,GACLxN,KAAKV,SAAS,CAAElB,cAAeoP,EAAa1L,aAAc,GAAI+K,cAAe,GAAIzN,cAAeoO,EAAYpO,cAAef,oBAAqB,O,uCA+CnIuL,GACb5J,KAAKV,SAAS,CAAEsK,sBAAuBA,M,+BAOvC,OAAQ,yBAAK/E,GAAG,WAAWpE,UAAU,mBACjC,kBAAC,EAAD,CAAWwL,aAAcjM,KAAK1B,MAAM2N,eACpC,yBAAKxL,UAAU,OACX,kBAAC,EAAD,iBAAeT,KAAK1B,MAAW0B,KAAKhC,MAApC,CAA2CqK,QAASrI,KAAKqI,QAASS,SAAU9I,KAAK8I,SAAUY,aAAc1J,KAAK0J,aAAcoB,SAAU9K,KAAK8K,aAE/I,yBAAKrK,UAAU,OACX,kBAAC,EAAD,iBAAgBT,KAAK1B,MAAW0B,KAAKhC,MAArC,CAA4C0N,SAAU1L,KAAK0L,kB,GAvL7C5N,aCiKT2P,E,kDACjB,WAAYzP,GAAQ,IAAD,8BACf,cAAMA,IAqIV0P,mBAAqB,WACjB,EAAKpO,UAAS,SAAAhB,GAAK,MAAK,CACpBqP,OAAQrP,EAAMqP,WAxIH,EA4InB1F,SAAW,SAACJ,GACR,EAAKvI,SAAS,CAAEuI,MAAOA,KA7IR,EAgJnBK,aAAe,SAACX,GACZ,EAAKjI,SAAS,CAAEiI,UAAWA,KAjJZ,EAoJnBqB,WAAa,SAACjG,GACV,EAAKrD,SAAS,CAACqD,QAASA,KArJT,EAwJnBkG,eAAiB,SAACL,GACd,EAAKlJ,SAAS,CAACkJ,YAAaA,KAzJb,EA4JnBwC,iBAAmB,SAACL,GAChB,EAAKrL,SAAS,CAAEqL,cAAeA,KA7JhB,EAgKnBM,qBAAuB,SAACL,GACpB,EAAKtL,SAAS,CAAEsL,kBAAmBA,KA/JnC,EAAKtM,MAAQ,CACTuJ,MAAO,GACPN,UAAW,IAAIqG,MAAM,GACrBjL,QAAS,GACT6F,YAAa,IAAIoF,MAAM,GACvBjD,cAAe,GACfC,kBAAmB,GACnB7I,OAAQ,GACRW,WAAY,GACZmL,SAAU,GACVC,aAAc,GACdzM,UAAW,GACXsM,OAAO,EACPI,OAAO,EACP9F,SAAU,EAAKA,SACfC,aAAc,EAAKA,aACnBU,WAAY,EAAKA,WACjBC,eAAgB,EAAKA,eACrBmC,iBAAkB,EAAKA,iBACvBC,qBAAsB,EAAKA,sBAI/B,EAAKjD,QAAU,EAAKA,QAAQjI,KAAb,gBACf,EAAKiO,aAAe,EAAKA,aAAajO,KAAlB,gBAEpB,EAAK2N,mBAAqB,EAAKA,mBAAmB3N,KAAxB,gBA5BX,E,gEAqCfC,KAAKV,SAAS,CAAEyO,OAAO,M,8CAIH3J,GACpB,OAAO6J,QAAQC,IAAI,CACnBlO,KAAK2I,WAAWvE,GAChBpE,KAAK+K,iBAAiB3G,GACtBpE,KAAKmO,UAAU/J,GACfpE,KAAKoO,YAAYhK,KAAQE,MAAK,YAAwC,IAAD,mBACjE,MAAO,CAAEqG,cADwD,KACzC5I,OADyC,KACjC8L,SADiC,W,uCAMxDlL,EAASgI,EAAe5I,EAAQ8L,GAAW,IAAD,OACvDI,QAAQC,IAAI,CACZlO,KAAKgO,aAAarL,EAAS,GAC3B3C,KAAKgI,QAAQ2C,EAAe,kBAC5B3K,KAAKgI,QAAQjG,EAAQ,UACrB/B,KAAKgI,QAAQ6F,EAAU,cACpBvJ,MAAK,WAAQ,EAAKhF,SAAS,CAAEyO,OAAO,S,uCAM1B3J,GAAM,IAAD,OAClB,OAAOC,MAAMD,EAAM,kBACdE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAwD,OAA5C,EAAKjF,SAAS,CAAEqL,cAAepG,IAAoBA,KACpEE,OAAM,SAAAC,GAAOvE,QAAQC,IAAIsE,EAAI,6BAA+BN,Q,gCAG3DA,GAAM,IAAD,OACX,OAAOC,MAAMD,EAAM,UACdE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAiD,OAArC,EAAKjF,SAAS,CAAEyC,OAAQwC,IAAoBA,KAC7DE,OAAM,SAAAC,GAAOvE,QAAQC,IAAIsE,EAAI,sBAAwBN,Q,kCAGlDA,GAAM,IAAD,OACb,OAAOC,MAAMD,EAAM,YACdE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAkD,OAAtC,EAAKjF,SAAS,CAAEuO,SAAUtJ,IAAmBA,KAC9DE,OAAM,SAAAC,GAAOvE,QAAQC,IAAIsE,EAAI,wBAA0BN,Q,mCAGnD+D,EAAM7F,GAGf,IAFA,IAAI+L,EAAS,GAEJ5P,EAAI,EAAGA,EAAI0J,EAAKC,QAAQzJ,OAAQF,IACrCwP,QAAQK,QAAQjK,MAAMD,uCAAwB+D,EAAKC,QAAQ3J,GAAG+E,MAAQ,WAAalB,IAC9EgC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY8J,EAAO1N,KAAK4D,MAEtCvE,KAAKV,SAAS,CACV+B,UAAWgN,M,8BAIXlG,EAAMrI,GAGV,IAFA,IAAIoE,EAAO,GAEFzF,EAAI,EAAGA,EAAI0J,EAAKC,QAAQzJ,OAAQF,IACrCwP,QAAQK,QAAQjK,MAFR,0BAEoB8D,EAAKC,QAAQ3J,GAAG2F,MACvCE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAYL,EAAKvD,KAAK4D,MAGpC,OAAQzE,GAIJ,IAAK,UACDE,KAAKV,SAAS,CAAEkJ,YAAatE,IAC7B,MACJ,IAAK,iBACDlE,KAAKV,SAAS,CAAEsL,kBAAmB1G,IACnC,MACJ,IAAK,SACDlE,KAAKV,SAAS,CAAEoD,WAAYwB,IAC5B,MACJ,IAAK,WACDlE,KAAKV,SAAS,CAAEwO,aAAc5J,O,+BAiDtC,OAFkBlE,KAAK1B,MAAfqP,MAYI,kBAAC,EAAoB3N,KAAK1B,OAT1B,yBAAKmC,UAAU,mBACnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBACX,uCACCT,KAAK1B,MAAMyP,MAAQ,4BAAQrN,QAASV,KAAK0N,mBAAoBjN,UAAU,0BAApD,uBAA4G,oD,GAhLvH3C,a,wBCjKjCyQ,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASC,eAAe,W","file":"static/js/main.98018dcd.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass Info extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {            \r\n            raceName: null,\r\n            className: null,\r\n            hit_die: null,\r\n            abilityScores: [],\r\n            ability_bonuses: [],\r\n            saving_throws: [],\r\n            characterProficiencies: [],\r\n            classSpells: [],\r\n        }        \r\n    }   \r\n\r\n    characterRaceInfo() {\r\n        const { raceSelected, classSelected, abilityScoresInfo } = this.props;\r\n        let bonuses, ability_bonuses = [];\r\n\r\n\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            let abilityScore = \"abilityScore\";\r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += \"abilityScore savingThrow \"\r\n                        console.log(\"saving throw set: \", classSelected.saving_throws[a].index);\r\n                    }\r\n                }\r\n            }\r\n            return (<div className='col-2 text-center ability' key={ability.index}>\r\n                <p>{ability.full_name}</p>\r\n                <p className={abilityScore}>{this.props.abilityScoresSelected[ability.index]}</p>\r\n            </div>);\r\n        }); \r\n\r\n        if (isSelected(raceSelected)) { //setting up info for when a race has been selected\r\n           \r\n            ability_bonuses = raceSelected.ability_bonuses.map((bonus, index) => {\r\n                for (var i = 0; i < abilityScoresInfo.length; i++) {\r\n                    if (abilityScoresInfo[i].name === bonus.ability_score.name) {\r\n                        return (<li className='col-6 text-center' key={index}>{abilityScoresInfo[i].full_name}: +{bonus.bonus}</li>);\r\n                    }\r\n                }\r\n                return (<li key={index}>Ability: +BONUS</li>);\r\n            });\r\n            bonuses = raceSelected.ability_bonuses.map((bonus) => {\r\n                return bonus\r\n            });\r\n            abilityScores = abilityScoresInfo.map((ability) => {\r\n                let abilityScore = \"abilityScore \";\r\n                if (isSelected(classSelected)) {\r\n                    for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                        if (ability.index === classSelected.saving_throws[a].index) {\r\n                            abilityScore = \"abilityScore savingThrow \"\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < bonuses.length; i++) {\r\n                    if (bonuses[i].ability_score.name.toLowerCase() === ability.index) {\r\n                        abilityScore += \"bonus \"\r\n                        let bonus = this.props.abilityScoresSelected[ability.index] + bonuses[i].bonus;\r\n                        return (<div className='col-2 text-center ability' key={ability.index}>\r\n                            <p>{ability.full_name}</p>\r\n                            <p className={abilityScore}>{bonus}</p>\r\n                        </div>);\r\n                    }\r\n                }\r\n                return (<div className='col-2 text-center ability' key={ability.index}>\r\n                    <p>{ability.full_name}</p>\r\n                    <p className={abilityScore}>{this.props.abilityScoresSelected[ability.index]}</p>\r\n                </div>);\r\n            });\r\n        }\r\n        return ([ability_bonuses, abilityScores, bonuses])\r\n    }\r\n\r\n    characterClassInfo() {\r\n        const { abilityScoresInfo, classSelected, spellsChosen, proficiencies, selectedSpell, setSelectedSpell } = this.props;\r\n        let characterProficiencies = [];\r\n        let classSpells = [];\r\n        let hit_die = \"\";       \r\n        let saving_throws = [];\r\n        if (isSelected(classSelected)) { //setting up info for when a class has been selected\r\n            hit_die = classSelected.hit_die\r\n            saving_throws = classSelected.saving_throws.map((saving_throw, index) => {\r\n                for (var j = 0; j < abilityScoresInfo.length; j++) {\r\n                    if (abilityScoresInfo[j].name === saving_throw.name) {\r\n                        return (<li className='col-6 text-center' key={saving_throw.name.toLowerCase()}> {abilityScoresInfo[j].full_name}</li>);\r\n                    }\r\n                }\r\n                return (<li key={index}>Ability: +BONUS</li>);\r\n            });\r\n            characterProficiencies = proficiencies.map((proficiency) => {\r\n                return (<li className='col-6 text-center' key={proficiency.name}>{proficiency.name}</li>);\r\n            });\r\n            if (spellsChosen.length > 0) {\r\n                classSpells = spellsChosen.map((spell) => {\r\n                    if (spell === selectedSpell) {\r\n                        return (<li key={spell.name}>{spell.name}</li>);\r\n                    } else {\r\n                        return (<li onClick={() => setSelectedSpell(spell)} key={spell.name}>{spell.name}</li>);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return ([characterProficiencies, classSpells, hit_die, saving_throws])\r\n    }\r\n\r\n    render() {\r\n        const { raceSelected, classSelected, navigation } = this.props;\r\n        const [ability_bonuses, abilityScores] = this.characterRaceInfo();\r\n        const [characterProficiencies, classSpells, hit_die, saving_throws] = this.characterClassInfo();\r\n        switch (navigation) {\r\n            case 'Spells':\r\n                if (isSelected(classSelected)) {\r\n                    let spellDescription;\r\n                    let selectedSpellName;\r\n                    let selectedSpellLevel;\r\n                    const { selectedSpell } = this.props.selectedSpell;\r\n                    if (isSelected(selectedSpell)) {                       \r\n                        spellDescription = <p>{selectedSpell.desc}</p>\r\n                        selectedSpellName = selectedSpell.name;\r\n                        selectedSpellLevel = selectedSpell.level;\r\n                    }\r\n                    return (<div className='col-12 info'>\r\n                        <div className='row'>\r\n                            <div className='col-12 characterTitle'>\r\n                                <h3>{raceSelected.name ? raceSelected.name : \"-\"}<span> </span>{classSelected.name ? classSelected.name : \"-\"}</h3>\r\n                                <div className='row'>{abilityScores}</div>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <p>Spells</p>\r\n                                <ul className='info-spells-selected'>{classSpells}</ul>\r\n                            </div>\r\n                            <div className='col-9'>\r\n                                <h4>{selectedSpellName} {selectedSpellLevel}</h4>\r\n                                {spellDescription}\r\n                            </div>\r\n                        </div>\r\n                    </div>);\r\n                } else {\r\n                    return (<div className='col-12 info'>\r\n                        <p className='text-center'>..Choose your class to select spells </p>\r\n                    </div>);\r\n                }\r\n            default:\r\n                return (<div className=\"col-12 info\">\r\n                    <div className='row'>\r\n                        <div className='col-12 characterTitle'>\r\n                            <h3>{raceSelected.name ? raceSelected.name : \"-\"}<span> </span>{classSelected.name ? classSelected.name : \"-\"}</h3>\r\n                            <div className='row'>{abilityScores}</div>\r\n                        </div>\r\n                        <div className='col-6 info-col-left'>\r\n                            <h6>Ability bonuses</h6>\r\n                            <ul className='info-abilityBonuses'>{ability_bonuses}</ul>\r\n                        </div>\r\n                        <div className='col-6 info-col-right'>\r\n                            <h6>Hit die: {hit_die}</h6>\r\n                            <h6>Saving throws</h6>\r\n                            <ul className='info-savingThrows'>{saving_throws}</ul>\r\n                            <h6 className='info-proficiencies-title'>Proficiencies</h6>\r\n                            <ul className='info-proficiencies-selected'>\r\n                                {characterProficiencies}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>);\r\n        }        \r\n    }\r\n}\r\n\r\nexport default Info\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //   console.log(\"constructor() \", props);\r\n        this.state = {\r\n            isClassSelected: false,\r\n            proficiencies: [],\r\n            proficienciesChosen: [],\r\n            category: 0,\r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected } = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n            this.setState({ isClassSelected: true, });\r\n\r\n        }\r\n    }\r\n\r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props;\r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = [];\r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }\r\n    }\r\n\r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean up\r\n        const { classSelected } = this.props;\r\n        // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {\r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    proficienciesToChooseFrom(category) {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = [];\r\n        console.log(classSelected);\r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency) => {\r\n                for (var j = 0; j < proficiencies.length; j++) {\r\n                    for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                        if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                            return (<button className='btn-sm col-6 btn-primary' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                        }\r\n                    }\r\n                }\r\n                return (<button className='btn-sm col-6 btn-secondary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n            });\r\n            chooseFrom.push(chooseProficiencies);\r\n        }\r\n        return (chooseFrom[category]);\r\n    }\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ category: newCategory, });\r\n    }\r\n\r\n    proficienciesNavigation() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let buttons = [];\r\n        for (var a = 0; a < classSelected.proficiency_choices.length; a++) {\r\n            let newCategory = a;\r\n            let check = proficienciesChosen[newCategory]; //I have to check because this comes through undefined the very first time this function runs, need to figure out a better solution.\r\n            let num;\r\n            if (check === undefined) {\r\n                num = 0;\r\n            } else {\r\n                num = proficienciesChosen[newCategory].length;\r\n            }\r\n            if (category === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-secondary' onClick={() => this.setNavigationCategory(newCategory)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { category } = this.state;\r\n        const { isClassSelected } = this.state; //this may need to be changed to not confuse with the object 'classSelected'\r\n        return (isClassSelected ? <div className='col-12 text-center selection'>\r\n            <div className=\"col-12 selectionTitle\">\r\n                <h3>Choose your proficiencies</h3>\r\n            </div>\r\n            <div className=\"card border-dark mb-3 \">\r\n                <div className=\"card-header text-white bg-dark text-center\">\r\n                    {this.proficienciesNavigation()}\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {this.proficienciesToChooseFrom(category)}\r\n                </div>\r\n            </div>\r\n        </div> : <div className='col-12 text-center selection'><h3 className='selectionTitle'>You must choose a class to select your proficiencies.</h3></div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React, { Component } from 'react';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],\r\n            navigationCategory: 0,\r\n            spellBook: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {        \r\n        this.spellSlots();\r\n        this.setClassSpells(1); // character level: 1\r\n    }\r\n\r\n    spellSlots = () => { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;    \r\n        let slotsAvailable = [];\r\n        if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {\r\n            for (var h = 0; h < levelData.length; h++) {\r\n                if (levelData[h].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = 0;\r\n                    for (var i = 1; i < 6; i++) {\r\n                        if (levelData[h].spellcasting['spell_slots_level_' + i] !== 0) {\r\n                            slotsAvailable[i] = levelData[h].spellcasting['spell_slots_level_' + i];\r\n                            console.log(\"SLOTS avail\", slotsAvailable[i])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var j = 0; j < levelData.length; j++) {\r\n                if (levelData[j].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = levelData[j].spellcasting.cantrips_known;\r\n                    for (var k = 1; k < 10; k++) {\r\n                        if (levelData[j].spellcasting['spell_slots_level_' + k] !== 0) {\r\n                            slotsAvailable[k] = levelData[j].spellcasting['spell_slots_level_' + k];\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        } \r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => { //this will only work for level one character creation. Works for this app as its for level one only. \r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => {\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        \r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n              \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    setClassSpells = (level) => { \r\n        const { classSelected } = this.props;\r\n        const { spellsInfo } = this.props;   \r\n        let spells = []\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                    for (var j = 0; j < spellsInfo[i].classes.length; j++) {\r\n                        if (classSelected.name === spellsInfo[i].classes[j].name && (spellsInfo[i].level <= level)) {\r\n                            spells.push(spellsInfo[i])\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default: \r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n        let spells = []\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ navigationCategory: newCategory, });\r\n    }\r\n\r\n    spellsNavigation() {\r\n        const { spellsChosen } = this.props;\r\n        const { navigationCategory } = this.state;\r\n        const { spellSlots } = this.state;\r\n        let buttons = [];\r\n        let spellsSlots = this.spellsChosenByLevel();\r\n        for (var a = 0; a < spellSlots.length; a++) {\r\n            let newCategory = a;\r\n            let num;\r\n            num = spellsSlots[a];            \r\n            if (navigationCategory === a) {\r\n                buttons.push(<button className='btn-sm btn spellsNavigationSelected' onClick={() => void (0)} key={a}> Choose: {spellSlots[a] - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn spellsNavigation' onClick={() => this.setNavigationCategory(newCategory)} key={a}>Choose: {spellSlots[a] - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = [];       \r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            spellChoices[slotLevel] = slotSpells.map((spell) => {\r\n                let classNames = \"btn btn-sm btn-block spell-btn \";\r\n                if (spell.damage !== undefined) { // Is there a better check for this?\r\n                        if (spell.damage.damage_type !== undefined) {\r\n                            classNames += spell.damage.damage_type.index + \" \";\r\n                        }\r\n                    }\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += \"btn-secondary \";\r\n                        return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                }\r\n                for (var b = 0; b < spellsChosen.length; b++) {\r\n                    let chosen = b;\r\n                    if (spellsChosen[chosen].name === spell.name) {  \r\n                        classNames += \"btn-primary \";\r\n                        return (<button className={classNames} onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                    } \r\n                }\r\n                classNames += 'btn-secondary ';\r\n                return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n            });\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='no-known-spells'><h6>You have no spells to choose from at level 1</h6></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='col-6 spells' key='cantrips'><h6>Cantrips</h6>{spellChoices[b]}</div>\r\n                }                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='col-6 spells' key={keyForThee + b}><h6>Spell Level {b}</h6>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {        \r\n        const { navigationCategory } = this.state; \r\n        const spells = this.displaySpells();\r\n        const navigation = this.spellsNavigation();\r\n        return (<div className='col-12 text-center selection'>\r\n            { navigation }\r\n            { spells[navigationCategory] }\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default ClassSpells;","import React, { Component } from 'react'\r\nimport isSelected from './helper-functions.js'\r\n\r\n//async function getTraits(raceSelected) {\r\n//    const url = 'https://www.dnd5eapi.co'\r\n//    let traitsInfo = [];    \r\n//    if (raceSelected.index === \"human\") {\r\n//        console.log(\"Got to the humans\")\r\n//    } else {\r\n//        for (var a = 0; a < raceSelected.traits.length; a++) {\r\n//            fetch(url + raceSelected.traits[a].url)\r\n//                .then(result => result.json())\r\n//                .then(result => { console.log(result); traitsInfo.push(result) })\r\n//                .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n           \r\n//        }\r\n//    }\r\n    \r\n//    console.log(traitsInfo);\r\n//    return traitsInfo;    \r\n//}\r\n\r\n\r\n//export const RaceTraits = (props) => {\r\n//    return (<div className='col-1 info-modal'>\r\n//        <div className=\"modal fade\" id={'race-' + this.props.info.index} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n//            <div className=\"modal-dialog\" role=\"document\">\r\n//                <div className=\"modal-content\">\r\n//                    <div className=\"modal-header\">\r\n//                        <h5 className=\"modal-title\" id=\"raceTraits\">{name} Traits</h5>\r\n//                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n//                            <span aria-hidden=\"true\">&times;</span>\r\n//                        </button>\r\n//                    </div>\r\n//                    <div className=\"modal-body\">\r\n//                        {traits.length !== 0 ? this.showTraits() : \"not loaded\"}\r\n//                    </div>\r\n//                    <div className=\"modal-footer\">\r\n//                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n//                    </div>\r\n//                </div>\r\n//            </div>\r\n//        </div>\r\n//    </div> )\r\n//}\r\n\r\n\r\n\r\nclass InfoModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            traits: [],\r\n        }\r\n        // this.getTraits(props.info);\r\n        this.getTraits = this.getTraits.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"did it mount?\")\r\n        this.getTraits(this.props.info);\r\n    }\r\n\r\n    getTraits(raceSelected) {\r\n        const url = 'https://www.dnd5eapi.co'\r\n        //let traitsInfo = [];\r\n        if (raceSelected.index === \"human\") {\r\n           console.log(\"Got to the humans\")\r\n        } else {\r\n            for (var a = 0; a < raceSelected.traits.length; a++) {\r\n                fetch(url + raceSelected.traits[a].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { this.setState((state) => ({ traits: [...state.traits, result],}))})\r\n                    .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n            }\r\n        }     \r\n    }\r\n\r\n    showTraits() {\r\n        const { traits } = this.state;\r\n        let info = traits.map((trait) => {\r\n            return (<div key={'trait-'+trait.name}>\r\n                <h5>{trait.name}</h5>\r\n                <p>{trait.desc[0]}</p>\r\n            </div>)\r\n        });\r\n        return info;\r\n    }\r\n\r\n    render() {\r\n        const { traits } = this.state;\r\n        const { name } = this.props.info;\r\n        return (<div className='col-1 info-modal'>\r\n            <div className=\"modal fade\" id={'race-'+this.props.info.index} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"raceTraits\">{name} Traits</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {traits.length !== 0 ? this.showTraits() : \"not loaded\"}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\n//}\r\n//<button type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">\r\n//    i\r\n//            </button> \r\n\r\n//function InfoModal(props) {\r\n//    let traits = [];\r\n\r\n//  //  console.log(props.info);\r\n\r\n    \r\n//   // traits = getTraits(props.info);\r\n   \r\n//    console.log(\"Access: \", traits);\r\n//    return (<div className='col-1 info-modal'>\r\n                  \r\n//        <div className=\"modal fade\" id=\"exampleModalLong\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\r\n//            <div className=\"modal-dialog\" role=\"document\">\r\n//                <div className=\"modal-content\">\r\n//                    <div className=\"modal-header\">\r\n//                        <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Modal title</h5>\r\n//                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n//                            <span aria-hidden=\"true\" >&times;</span>\r\n//                        </button>\r\n//                    </div>\r\n//                    <div className=\"modal-body\">\r\n//                        <p>{traits[0]}</p>\r\n//                    </div>\r\n//                    <div className=\"modal-footer\">\r\n//                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n//                        <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\r\n//                    </div>\r\n//                </div>\r\n//            </div>\r\n//        </div>\r\n//    </div>)\r\n    \r\n//}\r\n\r\nexport default InfoModal","import React from 'react'\r\n\r\nexport default function SearchBar({ userValue, handleChange }) {\r\n    return (\r\n        <div className='col-12 text-center searchBar'>\r\n            <label className='search-label' htmlFor='searchBar'>Search:</label><input value={userValue} name='searchBar' id='searchBar' onChange={handleChange} />\r\n        </div>\r\n    );\r\n};","import React from 'react'\r\nimport InfoModal from './modal'\r\n\r\nexport default function SearchResults({ champions, select, category }) {\r\n    console.log(champions)\r\n    let cards = [];\r\n    switch (category) {\r\n        case 'races':\r\n            cards = champions.map((race) => {\r\n                let bonuses = \"\";\r\n                for (var a = 0; a < race.ability_bonuses.length; a++) {\r\n                    bonuses += race.ability_bonuses[a].ability_score.name + \": \" + race.ability_bonuses[a].bonus + \" \";\r\n                }\r\n                let traits = [];\r\n                let target = '#race-' + race.index;\r\n                for (var b = 0; b < race.traits.length; b++) {\r\n                    traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[a].name} </span>);\r\n                }\r\n                return (<div className=\"card border-dark mb-3 \" key={race.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{race.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n                        <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n                        <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n                        <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n                        <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n                        <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n                        <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n                        <button className=\"btn btn-primary\" onClick={() => select(race.index)}>Choose {race.name}</button>\r\n                        <InfoModal info={race} />\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break;\r\n        case 'classes':\r\n            cards = champions.map((championClass) => {\r\n                let proficiencies = \"\";\r\n                let count = 0;\r\n                proficiencies = championClass.proficiencies.map((prof) => {\r\n                    if (count === championClass.proficiencies.length - 1) {\r\n                        return (prof.name + \". \");\r\n                    }\r\n                    count++;\r\n                    return (prof.name + \", \");\r\n                });\r\n                let savingThrows = '';\r\n                savingThrows = championClass.saving_throws.map((savingThrow) => {\r\n                    return (savingThrow.name + \" \")\r\n                });\r\n\r\n                //let bonuses = this.abilityBonuses(race);\r\n                return (<div className=\"card border-dark mb-3 \" key={championClass.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{championClass.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Hit die:</strong> {championClass.hit_die}</p>\r\n                        <p className=\"card-text\"><strong>Starting proficiencies:</strong> {proficiencies} </p>\r\n                        <p className=\"card-text\"><strong>Saving Throws:</strong> {savingThrows}</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <button className=\"btn btn-primary\" onClick={() => select(championClass.index)}>Choose {championClass.name}</button>\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break; \r\n        default:\r\n            break;\r\n    }\r\n    return (cards);\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport InfoModal from '../helper/modal'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\n//export default class CharacterRace extends Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            raceSelected: {},\r\n//            searchResults: [],\r\n//            word: \"\",\r\n          \r\n//        }\r\n//        //this.buttons = this.buttons.bind(this);\r\n//        //this.selectRace = this.selectRace.bind(this);\r\n//        //this.abilityBonuses = this.abilityBonuses.bind(this);\r\n//        //this.raceCards = this.raceCards.bind(this);\r\n//        //this.raceCarousel = this.raceCarousel.bind(this);\r\n//        this.traits = this.traits.bind(this);\r\n//    }\r\n\r\n\r\n//    componentDidMount() {\r\n//        if (isSelected(this.props.raceSelected)) {\r\n//            this.setState({ raceSelected: this.props.raceSelected, });\r\n//        }\r\n//        console.log(this.props);\r\n//    }\r\n\r\n//    getRaces() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, },); return result })\r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n//    }\r\n\r\n//    selectRace(index) {\r\n//        const { racesInfo } = this.props;\r\n//        const { setRace } = this.props;\r\n//        for (let i = 0; i < racesInfo.length; i++) {\r\n//            if (racesInfo[i].index === index) {\r\n//                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n//                this.setState({ raceSelected: raceSelected[0] });\r\n//                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n//                console.log(raceSelected[0]);\r\n//                break;\r\n//            }\r\n//        }\r\n//    }   \r\n\r\n//    buttons() {\r\n//        const { races } = this.props;\r\n//        const { raceSelected } = this.state;        \r\n//        let raceButtons = races.results.map((race) => {\r\n//            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n//                return (<button className='btn btn-sm buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n//            }\r\n//            return (<button onClick={() => this.selectRace(race.index)} className='btn btn-sm selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n//        });\r\n//        return raceButtons;\r\n//    }\r\n\r\n//    abilityBonuses(characterRace) {        \r\n//        let bonuses = \"\"; \r\n//        for (var a = 0; a < characterRace.ability_bonuses.length; a++) {\r\n//            bonuses += characterRace.ability_bonuses[a].ability_score.name + \": \" + characterRace.ability_bonuses[a].bonus + \" \";\r\n//        }\r\n//        return (bonuses);\r\n//    }\r\n\r\n//    traits(characterRace) {\r\n//        let traits = [];        \r\n//        let target = '#race-' + characterRace.index;\r\n//        for (var a = 0; a < characterRace.traits.length; a++) {\r\n//            traits.push(<span data-toggle=\"modal\" data-target={target} key={characterRace.traits[a].name}>{characterRace.traits[a].name} </span>);\r\n//        }\r\n//        return (traits);\r\n//    }\r\n\r\n//    raceCards() {       \r\n//        const { racesInfo } = this.props;  \r\n//        //console.log(racesInfo);\r\n//        let raceCards = racesInfo.map((race, index) => {            \r\n//            let bonuses = this.abilityBonuses(race);\r\n//            let traits = this.traits(race);\r\n//            return (<div className=\"card border-dark mb-3 \" key={race.index}>\r\n//                <div className=\"card-header text-white bg-dark text-center\">\r\n//                         <h4>{race.name}</h4>\r\n//                        </div>\r\n//                <div className=\"card-body\">                           \r\n//                    <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n//                    <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n//                    <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n//                    <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n//                    <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n//                    <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n//                    <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n//                    <button className=\"btn btn-primary\" onClick={() => this.selectRace(race.index)}>Choose {race.name}</button>\r\n//                    <InfoModal info={race} />\r\n//                 </div>\r\n//               </div>);\r\n//        }); \r\n//        return (raceCards);\r\n//    }\r\n//   // <button type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">i</button>\r\n   \r\n//    searchRaces = (word) => {\r\n//        const { racesInfo } = this.props;\r\n//        this.setState({\r\n//            word: word,\r\n//        });\r\n//        let oldList = racesInfo.map((race) => {\r\n//            return race;\r\n//        });\r\n//        let newList = [];\r\n//        if (word !== \"\") {\r\n//            newList = oldList.filter(race => race.index.includes(word.toLowerCase())); \r\n//        //    console.log(oldList);\r\n//            this.setState({ searchResults: newList, });\r\n//        } else {\r\n//            console.log(newList);\r\n//            this.setState({ searchResults: oldList, });           \r\n//        }\r\n//    }\r\n\r\n\r\n//    render() {\r\n//        // let cards = this.raceCards();\r\n//        const { word } = this.state;\r\n//        const { searchResults } = this.state;\r\n//        return (<div className='selection col-12'>\r\n//            <h2 className=\"selectionTitle text-center\">Choose your Champions Race</h2>\r\n//            <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />\r\n//            {word !== \"\" ? <SearchResults champions={searchResults} /> : this.raceCards()}           \r\n//            </div>);\r\n//    }\r\n//}\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            raceSelected: {},\r\n            searchResults: [],\r\n            word: \"\",\r\n\r\n        }\r\n        this.selectRace = this.selectRace.bind(this);\r\n        this.getRaces = this.getRaces.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            this.setState({ raceSelected: this.props.raceSelected, });            \r\n        }\r\n        if (isSelected(this.props.races)) {\r\n            this.setState({races: this.props.races, racesInfo: this.props.racesInfo,})\r\n        } else {\r\n            this.getRaces();\r\n        }\r\n        console.log(this.props);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setRaces(this.state.races);\r\n        this.props.setRacesInfo(this.state.racesInfo);\r\n    }\r\n\r\n    getRaces() {\r\n        console.log(\"Getting Races\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, this.getInfo(result));})\r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        console.log(data);\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n           fetch(url + data.results[i].url)\r\n               .then(result => result.json())\r\n               .then(result => { this.setState((state) => ({ racesInfo: [...state.racesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectRace(index) {\r\n        const { racesInfo } = this.state;\r\n        const { setRace } = this.props;       \r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });                \r\n                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n                console.log(raceSelected[0]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   \r\n    searchRaces = (word) => {\r\n        const { racesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = racesInfo.map((race) => {\r\n            return race;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(race => race.index.includes(word.toLowerCase()));\r\n            //    console.log(oldList);\r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }  \r\n\r\n    render() {\r\n        // let cards = this.raceCards();\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { racesInfo } = this.state;\r\n        return (<div className='selection col-12'>\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"selectionTitle text-center\">Choose your Race</h3>\r\n                        <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />\r\n                    </div>\r\n                    <SearchResults champions={word !== '' ? searchResults : racesInfo} category='races' select={this.selectRace} />\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            classesInfo: [],\r\n            classSelected: {},           \r\n            searchResults:[],\r\n            word: '',\r\n        }\r\n       \r\n        this.selectClass = this.selectClass.bind(this);\r\n      //  this.classCards = this.classCards.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        }\r\n        if (isSelected(this.props.classes)) {\r\n            this.setState({ classes: this.props.classes, classesInfo: this.props.classesInfo, })\r\n        } else {\r\n            this.getClasses();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (!isSelected(this.props.classes)) { //need a better check for all the information\r\n            console.log(\"first time\");\r\n            this.props.setClasses(this.state.classes);\r\n            this.props.setClassesInfo(this.state.classesInfo);\r\n        } else {\r\n            console.log(\"every other time\");\r\n        }        \r\n    }\r\n\r\n    getClasses() {\r\n        console.log(\"Getting Classes\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, this.getInfo(result)); })\r\n            .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n\r\n    }\r\n\r\n    getInfo(data) {\r\n        console.log(data);\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ classesInfo: [...state.classesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.state;\r\n        const { setClass } = this.props;\r\n        console.log(\"hello\", classesInfo)\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], });\r\n                setClass(classSelected[0]);\r\n                break;\r\n            }\r\n        }        \r\n    } \r\n\r\n    searchClasses = (word) => {\r\n        const { classesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = classesInfo.map((characterClass) => {\r\n            return characterClass;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(characterClass => characterClass.index.includes(word.toLowerCase()));            \r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { classesInfo } = this.state;\r\n        return (<div className=\"col-12 selection\">\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"text-center\">Choose your Class</h3>\r\n                        <SearchBar value={word} handleChange={e => this.searchClasses(e.target.value)} />\r\n                    </div>\r\n                    <SearchResults champions={word !== '' ? searchResults : classesInfo} category='classes' select={this.selectClass} />\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(\"AbilityScoresForm \", this.props);\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","export default function randomDiceRoll(maxNum) { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n    let totalDiceRolls = 5;\r\n    let totalRollsToKeep = 3;\r\n    let abilityPoint = 0;\r\n    let abilityPoints = 0;\r\n    let abilityPointsArray = [];\r\n    for (var i = 0; i < totalDiceRolls; i++) {\r\n        abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n        abilityPointsArray.push(abilityPoint);\r\n    }\r\n    abilityPointsArray.sort()\r\n    abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n    for (var j = 0; j < abilityPointsArray.length; j++) {\r\n        abilityPoints += abilityPointsArray[j];\r\n    }\r\n    return abilityPoints;\r\n}    ","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport AbilityScoresForm from '../helper/AbilityScoresForm'\r\nimport randomDiceRoll from '../helper/random-dice-roll'\r\n\r\nexport default class AbilityScores extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            abilityScoresSelected: {},\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.getScore = this.getScore.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.abilityScores)) {\r\n            console.log(\"this should happen any time after the first\")\r\n            this.setState({ abilityScores: this.props.abilityScores, abilityScoresInfo: this.props.abilityScoresInfo, })\r\n            this.abilityScoresSetup();\r\n        } else {\r\n            console.log(\"this should happen second\")\r\n            this.getAbilityScores();\r\n           \r\n        }\r\n        console.log(this.props)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setAbilityScores(this.state.abilityScores);\r\n        this.props.setAbilityScoresInfo(this.state.abilityScoresInfo);\r\n    }\r\n\r\n    abilityScoresSetup = () => {\r\n        console.log(\"scores set up\", this.state.abilityScores)\r\n        //abilityScoresData \r\n        const { count } = this.state.abilityScores;\r\n        const { results } = this.state.abilityScores;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    getAbilityScores() {\r\n        const url = \"https://www.dnd5eapi.co/api/\"\r\n        fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result }, this.getInfo(result)) })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        console.log(data);\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ abilityScoresInfo: [...state.abilityScoresInfo, result] }), this.abilityScoresSetup()) });\r\n        }   \r\n   //     this.abilityScoresSetup();\r\n    }\r\n\r\n    scoreDisplay() {\r\n        const { abilityScoresInfo } = this.state;\r\n        const { raceSelected, classSelected } = this.props;\r\n        let bonuses, ability_bonuses = [];\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            console.log(\"whats happening\", ability)\r\n            let abilityScore = \"abilityScore\";\r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += \"abilityScore savingThrow \"\r\n                        console.log(\"saving throw set: \", classSelected.saving_throws[a].index);\r\n                    }\r\n                }\r\n            }\r\n            return (<div className='col-2 text-center ability' key={ability.index}>\r\n                <p>{ability.full_name}</p>\r\n                <p className={abilityScore}>{this.state.abilityScoresSelected[ability.index]}</p>\r\n            </div>);\r\n        });\r\n         console.log(\"Are we doing it?\", this.state.abilityScoresSelected)\r\n\r\n        if (isSelected(raceSelected)) { //setting up info for when a race has been selected\r\n            ability_bonuses = raceSelected.ability_bonuses.map((bonus, index) => {\r\n                for (var i = 0; i < abilityScoresInfo.length; i++) {\r\n                    if (abilityScoresInfo[i].name === bonus.ability_score.name) {\r\n                        return (<li className='col-6 text-center' key={index}>{abilityScoresInfo[i].full_name}: +{bonus.bonus}</li>);\r\n                    }\r\n                }\r\n                return (<li key={index}>Ability: +BONUS</li>);\r\n            });\r\n            bonuses = raceSelected.ability_bonuses.map((bonus) => {\r\n                return bonus\r\n            });\r\n            abilityScores = abilityScoresInfo.map((ability) => {\r\n                let abilityScore = \"abilityScore \";\r\n                if (isSelected(classSelected)) {\r\n                    for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                        if (ability.index === classSelected.saving_throws[a].index) {\r\n                            abilityScore = \"abilityScore savingThrow \"\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < bonuses.length; i++) {\r\n                    if (bonuses[i].ability_score.name.toLowerCase() === ability.index) {\r\n                        abilityScore += \"bonus \"\r\n                        let bonus = this.props.abilityScoresSelected[ability.index] + bonuses[i].bonus;\r\n                        return (<div className='col-2 text-center ability' key={ability.index}>\r\n                            <p>{ability.full_name}</p>\r\n                            <p className={abilityScore}>{bonus}</p>\r\n                        </div>);\r\n                    }\r\n                }\r\n                return (<div className='col-2 text-center ability' key={ability.index}>\r\n                    <p>{ability.full_name}</p>\r\n                    <p className={abilityScore}>{this.props.abilityScoresSelected[ability.index]}</p>\r\n                </div>);\r\n            });\r\n        }\r\n    return ([ability_bonuses, abilityScores]);\r\n    }\r\n\r\n    getScore(ability) {\r\n        console.log(\"progress? \", ability)\r\n        const { abilityScores } = this.state;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = randomDiceRoll(6)\r\n                this.setState({ abilityScoresSelected: scores })\r\n                break;\r\n            }\r\n        }      \r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { abilityScoresInfo, abilityScoresSwitch } = this.state;\r\n        let scores = abilityScoresInfo.map((abilityScore, index) => {\r\n            return (<button onClick={() => this.getScore(abilityScore.index)} className='col-4 selectionButtons' key={index}>{abilityScore.full_name}</button>)\r\n        });\r\n        const [ability_bonuses, abilityScores] = this.scoreDisplay();\r\n        return (<div className='selection col-12'>\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"selectionTitle text-center\">Choose your Ability Scores</h3>                      \r\n                    </div>  \r\n                    <div className='row'>{abilityScores}</div>\r\n                    <ul className='info-abilityBonuses'>{ability_bonuses}</ul>\r\n                    <div className='col-12 text-center'>\r\n                        {abilityScoresSwitch ? <AbilityScoresForm handleSubmit={this.props.handleSubmit} abilityScoresSelected={this.state.abilityScoresSelected} /> : scores}\r\n                        <button onClick={() => this.abilityScoreSwitchy()} className='btn btn-primary col-6 align-text-bottom'>{abilityScoresSwitch ? \"Auto fill \" : \"Manual fill \"}</button><br />\r\n                    </div>\r\n                </div>)\r\n    }\r\n}","import React, { Component } from 'react'\r\n//import AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './champion/Proficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport AbilityScores from './champion/AbilityScores'\r\nimport isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n      //      abilityScoresSwitch: false,\r\n        }\r\n     //   this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    //abilityScoreSwitchy() {\r\n    //    this.setState(state => ({\r\n    //        abilityScoresSwitch: !state.abilityScoresSwitch,\r\n    //    }));\r\n    //}\r\n\r\n    render() {       \r\n        const { classSelected } = this.props;\r\n        const { navigation } = this.props;      \r\n        switch (navigation) {\r\n            case 'Races':\r\n                return (<Races {...this.props} />);           \r\n            case 'Classes':\r\n                return (<Classes {...this.props} />); \r\n            case 'Proficiencies':\r\n                return (<ClassProficiencies {...this.props} />);      \r\n            case 'Spells':\r\n                if (isSelected(classSelected) && classSelected.spellcasting !== undefined) { // Needs better validation? \r\n                    return (<ClassSpells {...this.props} />);\r\n                }\r\n                return (<div className='col-12 text-center selection'>{classSelected.name} is not a spell caster.</div>);            \r\n            case 'Ability-Scores':\r\n                return (<AbilityScores {...this.props} />);               \r\n            default:\r\n                return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n        }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n        }         \r\n    }\r\n\r\n   \r\n\r\n    navigationButtons() {\r\n        const navigation = this.props.navigation\r\n        const navigationCategories = this.props.navigationCategories\r\n        const navigate = this.props.navigate\r\n        const classSelected = this.props.classSelected       \r\n\r\n        let navButtons = navigationCategories.map((category, index) => {\r\n            if (isSelected(classSelected)) {\r\n                if (navigation === category) {\r\n                    return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n                } else {\r\n                    return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm  btn-dark btn-nav' key={index}>{category}</button>);\r\n                }\r\n            } else {\r\n                if (navigation === category) {\r\n                    return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n                } else {\r\n                    if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n                        switch (navigation) {\r\n                            case 'Proficiencies':\r\n                                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                            default:\r\n                                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                        }\r\n                    } else {\r\n                        return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                    }\r\n                }\r\n            }\r\n        });        \r\n        return (navButtons);\r\n    }\r\n\r\n    render() {\r\n        return (<nav className=\"navbar navbar-expand-lg navbar-light col-12\" id=\"navigation-bottom-container\">            \r\n                    <button className=\"btn btn-sm navbar-toggler bg-light col-2\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navigation-bottom\" aria-controls=\"navigation-bottom\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse col-10\" id=\"navigation-bottom\">\r\n                       {this.navigationButtons()}            \r\n                    </div>            \r\n                </nav>);\r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n    //render() {\r\n    //    const { champion } = this.props; \r\n    //    return (<div className='col-12 text-center' id='navigation' > \r\n    //        <div className='col-6' id='navigation-container' onBlur={(e) => {               \r\n    //            if (!e.currentTarget.contains(e.relatedTarget)) {\r\n    //                // Not triggered when swapping focus between children\r\n    //                this.hideButtons();                  \r\n    //            }\r\n    //        }}>\r\n    //            <div id='navigation-buttons'>\r\n    //                {this.state.toggle ? this.navigationButtons() : null}</div>\r\n    //                    <button className='btn btn-sm btn-primary' id='navigation-toggle' onClick={() => this.toggleNavigation() }>{champion}</button>\r\n    //                </div>                    \r\n    //            </div>);\r\n    //}\r\n}\r\n\r\n//setup() {\r\n\r\n//    <div className='row'>\r\n//        <div className='col-12'>\r\n//             {!this.state.toggle ? this.navigationButtons() : null}\r\n//        </div>\r\n//    </div>\r\n//        <div className='row'>\r\n//            <div className='col-12'>\r\n//                <button className='btn btn-sm btn-primary' id='navigation-toggle' onClick={() => this.toggleNavigation()}>{!this.state.toggle ? 'Hide' : 'Show'}</button>\r\n//            </div>\r\n//        </div>              \r\n\r\n//    <div className=\"btn-group dropup\">\r\n//        <button type=\"button\" className=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n//            Champion\r\n//        </button>\r\n//        <div className=\"dropdown-menu\">\r\n//            {!this.state.toggle ? this.navigationButtons() : null}\r\n//        </div>\r\n//    </div>\r\n//}\r\n\r\n\r\n\r\n\r\n//const Navigation = (props) => {\r\n// //   console.log(\"Navigation\", props)\r\n//    const navigation = props.navigation\r\n//    const navigationCategories = props.navigationCategories\r\n//    const navigate = props.navigate\r\n//    const classSelected = props.classSelected\r\n\r\n//    let navButtons = navigationCategories.map((category, index) => {\r\n//        if (isSelected(classSelected)) {\r\n//            if (navigation === category) {\r\n//                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n//            } else {\r\n//                return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//            }\r\n//        } else {\r\n//            if (navigation === category) {\r\n//                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n//            } else {\r\n//                if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n//                    switch (navigation) {\r\n//                        case 'Proficiencies':\r\n//                            return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                        default:\r\n//                            return (<button onClick={() => navigate(category)} type='button'className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                    }     \r\n//                } else {\r\n//                    return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                }\r\n//            }\r\n//        }                \r\n//    });\r\n//    return (<div className='col-12 text-center navigation'>\r\n//                {navButtons}\r\n//            </div>);\r\n//}\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\nimport Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\n//import isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            champion: 'Champion', //add support: user being able to name their Champion. \r\n            abilityScoresSelected: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},\r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setSpells: this.setSpells,\r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n     \r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n   // getScore = (ability) => {\r\n   //     const { abilityScores } = this.props;\r\n   //     const { abilityScoresSelected } = this.state;\r\n   //     let scores = abilityScoresSelected\r\n   //     for (var i = 0; i < abilityScores.count; i++) {\r\n   //         if (abilityScores.results[i].index === ability) {\r\n   //             scores[ability] = this.randomDiceRoll(6)\r\n   //             this.setState({abilityScoresSelected: scores})\r\n   //             break;\r\n   //         }\r\n   //     }\r\n   ////     console.log(\"Ability Scores Selected\", abilityScoresSelected[ability])\r\n   // }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        console.log(\"and here????\")\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [] });\r\n    }\r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n        \r\n    handleSubmit = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n\r\n    setAbilityScores(abilityScoresSelected) {\r\n        this.setState({ abilityScoresSelected: abilityScoresSelected })\r\n    }\r\n\r\n\r\n       \r\n    render() {\r\n      //hacky way of displaying alert        \r\n        return (<div id='creation' className='container-fluid'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} setRace={this.setRace} setClass={this.setClass} handleSubmit={this.handleSubmit} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>\r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <Info {...this.state} {...this.props} />\r\n//</div>\r\n\r\n\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\n//export default class App extends Component { \r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {           \r\n//            races: {},\r\n//            racesInfo: new Array(0),           \r\n//            classes: {},\r\n//            classesInfo: new Array(0),\r\n//            abilityScores: {},\r\n//            abilityScoresInfo: [],\r\n//            spells: {},\r\n//            spellsInfo: [],\r\n//            features: {},\r\n//            featuresInfo: [],\r\n//            levelData: [],\r\n//            ready: false,\r\n//            enter: false,\r\n//        }\r\n//      //  this.state = this.initialState;\r\n//      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n//        this.getInfo = this.getInfo.bind(this);\r\n//        this.getLevelData = this.getLevelData.bind(this);\r\n//        //   this.getStuff = this.getStuff.bind(this);\r\n//        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n//    }\r\n\r\n//    componentDidMount() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        const promise = this.getCharacterInformation(url);\r\n//        promise.then((data) => {\r\n//            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n//        });\r\n//    }\r\n     \r\n\r\n//    getCharacterInformation(url) {\r\n//      return Promise.all([this.getRaces(url),\r\n//            this.getClasses(url),\r\n//            this.getAbilityScores(url),\r\n//            this.getSpells(url),\r\n//            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n//                return {races, classes, abilityScores, spells, features}\r\n//            });\r\n//    }\r\n\r\n\r\n//    getCharacterData(races, classes, abilityScores, spells, features) {\r\n//        Promise.all([this.getInfo(races, 'races'),\r\n//            this.getInfo(classes, 'classes'),\r\n//            this.getLevelData(classes, 1),\r\n//            this.getInfo(abilityScores, 'ability-scores'),\r\n//            this.getInfo(spells, 'spells'),\r\n//            this.getInfo(features, 'features'),\r\n//        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n//    }\r\n\r\n//    getRaces(url) {        \r\n//       return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, }, ); return result })          \r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n//    }\r\n\r\n//    getClasses(url) {\r\n//       return fetch(url + 'classes')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n//           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n//    }\r\n\r\n//    getAbilityScores(url) {\r\n//      return fetch(url + 'ability-scores')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n//    }\r\n\r\n//    getSpells(url) {\r\n//      return fetch(url + 'spells')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ spells: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n//    }\r\n\r\n//    getFeatures(url) {      \r\n//       return fetch(url + 'features')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ features: result }, ); return result  })\r\n//           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n//    }\r\n\r\n//    getLevelData(data, currentLevel) {       \r\n//        let levels = []\r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n//                .then(result => result.json())\r\n//                .then(result => { levels.push(result) });            \r\n//        }        \r\n//        this.setState({\r\n//            levelData: levels,\r\n//        });\r\n//    }\r\n\r\n//    getInfo(data, category) {\r\n//        let info = []    \r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + data.results[i].url))\r\n//                .then(result => result.json())\r\n//                .then(result => { info.push(result) });\r\n//        }\r\n//       // console.log(info);   \r\n//        switch(category) {\r\n//            case 'races':\r\n//                this.setState({ racesInfo: info, });\r\n//                break;\r\n//            case 'classes':\r\n//                this.setState({ classesInfo: info, },);  \r\n//                break;\r\n//            case 'ability-scores':\r\n//                this.setState({ abilityScoresInfo: info, });\r\n//                break;\r\n//            case 'spells':\r\n//                this.setState({ spellsInfo: info, });\r\n//                break;\r\n//            case 'features':                \r\n//                this.setState({ featuresInfo: info, });\r\n//                break;\r\n//            default:\r\n//        }\r\n//    }\r\n\r\n//    //handleClick() {\r\n//    //    this.setState(state => ({\r\n//    //        isToggleOn: !state.isToggleOn\r\n//    //    }));\r\n//    //}\r\n\r\n\r\n//    chooseYourChampion = () => {\r\n//        this.setState(state => ({\r\n//            ready: !state.ready,\r\n//        }));\r\n//    }\r\n    \r\n//    render() {\r\n//        const { ready } = this.state;\r\n              \r\n//        if (!ready) {\r\n//            return (<div className=\"container-fluid\">\r\n//                <div className=\"row\">\r\n//                    <div className=\"col-12 text-center\">\r\n//                        <h1>Welcome</h1>\r\n//                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n//                    </div>\r\n//                </div>\r\n//            </div>);  \r\n//        } else {\r\n//            return (<CreateCharacter {...this.state} />);                   \r\n//        }\r\n//    }\r\n//}\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: new Array(0),\r\n            classes: {},\r\n            classesInfo: new Array(0),\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            spells: {},\r\n            spellsInfo: [],\r\n            features: {},\r\n            featuresInfo: [],\r\n            levelData: [],\r\n            ready: false,\r\n            enter: false,\r\n            setRaces: this.setRaces,\r\n            setRacesInfo: this.setRacesInfo,\r\n            setClasses: this.setClasses, \r\n            setClassesInfo: this.setClassesInfo,\r\n            setAbilityScores: this.setAbilityScores, \r\n            setAbilityScoresInfo: this.setAbilityScoresInfo,\r\n        }\r\n        //  this.state = this.initialState;\r\n        //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // const url = 'https://www.dnd5eapi.co/api/'\r\n        //const promise = this.getCharacterInformation(url);\r\n        //promise.then((data) => {\r\n        //    this.getCharacterData(data.classes, data.abilityScores, data.spells, data.features)\r\n        //});\r\n        this.setState({ enter: true,})\r\n    }\r\n\r\n\r\n    getCharacterInformation(url) {\r\n        return Promise.all([\r\n        this.getClasses(url),\r\n        this.getAbilityScores(url),\r\n        this.getSpells(url),\r\n        this.getFeatures(url),]).then(([abilityScores, spells, features]) => {\r\n            return { abilityScores, spells, features }\r\n        });\r\n    }\r\n\r\n\r\n    getCharacterData(classes, abilityScores, spells, features) {\r\n        Promise.all([       \r\n        this.getLevelData(classes, 1),\r\n        this.getInfo(abilityScores, 'ability-scores'),\r\n        this.getInfo(spells, 'spells'),\r\n        this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ enter: true, }) })\r\n\r\n    }\r\n\r\n   \r\n\r\n    getAbilityScores(url) {\r\n        return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n        return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {\r\n        return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result },); return result })\r\n            .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    getLevelData(data, currentLevel) {\r\n        let levels = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n                .then(result => result.json())\r\n                .then(result => { levels.push(result) });\r\n        }\r\n        this.setState({\r\n            levelData: levels,\r\n        });\r\n    }\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n        // console.log(info);   \r\n        switch (category) {\r\n            //case 'races':\r\n            //    this.setState({ racesInfo: info, });\r\n            //    break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);\r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n\r\n    setRaces = (races) => {\r\n        this.setState({ races: races, });\r\n    }\r\n\r\n    setRacesInfo = (racesInfo) => {\r\n        this.setState({ racesInfo: racesInfo,})\r\n    }\r\n\r\n    setClasses = (classes) => {\r\n        this.setState({classes: classes,})\r\n    }\r\n\r\n    setClassesInfo = (classesInfo) => {\r\n        this.setState({classesInfo: classesInfo,})\r\n    }\r\n\r\n    setAbilityScores = (abilityScores) => {\r\n        this.setState({ abilityScores: abilityScores })\r\n    }\r\n\r\n    setAbilityScoresInfo = (abilityScoresInfo) => {\r\n        this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { ready } = this.state;\r\n\r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p>}\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\nimport './assets/css/navigation-style.css'\r\nimport './assets/css/selection-style.css'\r\nimport './assets/css/info-style.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}