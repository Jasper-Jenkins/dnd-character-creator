{"version":3,"sources":["helper/helper-functions.js","Info.js","AbilityScoresForm.js","ClassProficiencies.js","ClassSpells.js","champion/Races.js","champion/Classes.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","Info","props","state","raceName","className","hit_die","abilityScores","ability_bonuses","saving_throws","characterProficiencies","classSpells","bonuses","this","raceSelected","classSelected","abilityScoresInfo","map","ability","abilityScore","a","length","index","console","log","full_name","abilityScoresSelected","bonus","i","name","ability_score","toLowerCase","spellsChosen","proficiencies","selectedSpell","setSelectedSpell","saving_throw","j","proficiency","spell","onClick","navigation","characterRaceInfo","characterClassInfo","spellDescription","selectedSpellName","selectedSpellLevel","desc","level","Component","AbilityScoresForm","handleFocus","event","target","select","handleChange","value","scores","newScores","JSON","parse","stringify","parseInt","setState","submitForm","handleSubmit","initialState","htmlFor","type","id","onChange","onFocus","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","proficienciesChosen","choices","proficiency_choices","from","choose","message","updateAlertMessage","newProficiency","filter","newProfs","chosen","setProficiencies","removeProficiency","b","newProficiencies","newChoices","category","bind","numberOfCategories","chooseFrom","chooseProficiencies","k","num","undefined","push","newCategory","buttons","setNavigatioCategory","classProficienciesToChooseFrom","nav","proficienciesNavigation","ClassSpells","spellSlots","levelData","slotsAvailable","h","class","spellcasting","cantrips_known","updateSpellSlots","updateSpells","spells","setSpells","spellsChosenByLevel","cantrips","levelOneSpells","spellSource","currentLevel","level0","level1","setClassSpells","spellsInfo","classes","alert","addSpell","removeSpell","displaySpells","spellChoices","slotLevel","slotSpells","classNames","damage","damage_type","spellChoiceDisplay","CharacterRace","selectRace","racesInfo","setRace","race","races","results","aria-disabled","CharacterClass","selectClass","classesInfo","setClass","cClass","characterClass","Selection","abilityScoresSwitch","abilityScoreSwitchy","getScore","Navigation","toggle","toggleNavigation","hideButtons","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","navigationCategories","navigate","tabIndex","champion","onBlur","e","currentTarget","contains","relatedTarget","navigationButtons","UserAlert","element","alertMessage","CreateCharacter","abilityScoresSetup","abilityScoresData","count","fadeMessage","slots","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","startingProficiencies","profs","updateProficiencies","proficienciesChoices","abilities","noZeroes","zeroesAlert","chosenRace","chosenClass","App","chooseYourChampion","ready","Array","features","featuresInfo","enter","getInfo","getLevelData","getCharacterInformation","then","data","getCharacterData","url","Promise","all","getRaces","getClasses","getAbilityScores","getSpells","getFeatures","fetch","result","json","catch","levels","resolve","info","ReactDOM","render"],"mappings":"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","file":"static/js/main.d92287cb.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass Info extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {            \r\n            raceName: null,\r\n            className: null,\r\n            hit_die: null,\r\n            abilityScores: [],\r\n            ability_bonuses: [],\r\n            saving_throws: [],\r\n            characterProficiencies: [],\r\n            classSpells: [],\r\n        }        \r\n    }   \r\n\r\n    characterRaceInfo() {\r\n        const { raceSelected, classSelected, abilityScoresInfo } = this.props;\r\n        let bonuses, ability_bonuses = [];\r\n\r\n\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            let abilityScore = \"abilityScore\";\r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += \"abilityScore savingThrow \"\r\n                        console.log(\"saving throw set: \", classSelected.saving_throws[a].index);\r\n                    }\r\n                }\r\n            }\r\n            return (<div className='col-2 text-center ability' key={ability.index}>\r\n                <p>{ability.full_name}</p>\r\n                <p className={abilityScore}>{this.props.abilityScoresSelected[ability.index]}</p>\r\n            </div>);\r\n        }); \r\n\r\n        if (isSelected(raceSelected)) { //setting up info for when a race has been selected\r\n           \r\n            ability_bonuses = raceSelected.ability_bonuses.map((bonus, index) => {\r\n                for (var i = 0; i < abilityScoresInfo.length; i++) {\r\n                    if (abilityScoresInfo[i].name === bonus.ability_score.name) {\r\n                        return (<li className='col-6 text-center' key={index}>{abilityScoresInfo[i].full_name}: +{bonus.bonus}</li>);\r\n                    }\r\n                }\r\n                return (<li key={index}>Ability: +BONUS</li>);\r\n            });\r\n            bonuses = raceSelected.ability_bonuses.map((bonus) => {\r\n                return bonus\r\n            });\r\n            abilityScores = abilityScoresInfo.map((ability) => {\r\n                let abilityScore = \"abilityScore \";\r\n                if (isSelected(classSelected)) {\r\n                    for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                        if (ability.index === classSelected.saving_throws[a].index) {\r\n                            abilityScore = \"abilityScore savingThrow \"\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < bonuses.length; i++) {\r\n                    if (bonuses[i].ability_score.name.toLowerCase() === ability.index) {\r\n                        abilityScore += \"bonus \"\r\n                        let bonus = this.props.abilityScoresSelected[ability.index] + bonuses[i].bonus;\r\n                        return (<div className='col-2 text-center ability' key={ability.index}>\r\n                            <p>{ability.full_name}</p>\r\n                            <p className={abilityScore}>{bonus}</p>\r\n                        </div>);\r\n                    }\r\n                }\r\n                return (<div className='col-2 text-center ability' key={ability.index}>\r\n                    <p>{ability.full_name}</p>\r\n                    <p className={abilityScore}>{this.props.abilityScoresSelected[ability.index]}</p>\r\n                </div>);\r\n            });\r\n        }\r\n        return ([ability_bonuses, abilityScores, bonuses])\r\n    }\r\n\r\n    characterClassInfo() {\r\n        const { abilityScoresInfo, classSelected, spellsChosen, proficiencies, selectedSpell, setSelectedSpell } = this.props;\r\n        let characterProficiencies = [];\r\n        let classSpells = [];\r\n        let hit_die = \"\";       \r\n        let saving_throws = [];\r\n        if (isSelected(classSelected)) { //setting up info for when a class has been selected\r\n            hit_die = classSelected.hit_die\r\n            saving_throws = classSelected.saving_throws.map((saving_throw, index) => {\r\n                for (var j = 0; j < abilityScoresInfo.length; j++) {\r\n                    if (abilityScoresInfo[j].name === saving_throw.name) {\r\n                        return (<li className='col-6 text-center' key={saving_throw.name.toLowerCase()}> {abilityScoresInfo[j].full_name}</li>);\r\n                    }\r\n                }\r\n                return (<li key={index}>Ability: +BONUS</li>);\r\n            });\r\n            characterProficiencies = proficiencies.map((proficiency) => {\r\n                return (<li className='col-6 text-center' key={proficiency.name}>{proficiency.name}</li>);\r\n            });\r\n            if (spellsChosen.length > 0) {\r\n                classSpells = spellsChosen.map((spell) => {\r\n                    if (spell === selectedSpell) {\r\n                        return (<li key={spell.name}>{spell.name}</li>);\r\n                    } else {\r\n                        return (<li onClick={() => setSelectedSpell(spell)} key={spell.name}>{spell.name}</li>);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return ([characterProficiencies, classSpells, hit_die, saving_throws])\r\n    }\r\n\r\n    render() {\r\n        const { raceSelected, classSelected, navigation } = this.props;\r\n        const [ability_bonuses, abilityScores] = this.characterRaceInfo();\r\n        const [characterProficiencies, classSpells, hit_die, saving_throws] = this.characterClassInfo();\r\n        switch (navigation) {\r\n            case 'Spells':\r\n                if (isSelected(classSelected)) {\r\n                    let spellDescription;\r\n                    let selectedSpellName;\r\n                    let selectedSpellLevel;\r\n                    const { selectedSpell } = this.props.selectedSpell;\r\n                    if (isSelected(selectedSpell)) {                       \r\n                        spellDescription = <p>{selectedSpell.desc}</p>\r\n                        selectedSpellName = selectedSpell.name;\r\n                        selectedSpellLevel = selectedSpell.level;\r\n                    }\r\n                    return (<div className='col-12 info'>\r\n                        <div className='row'>\r\n                            <div className='col-12 characterTitle'>\r\n                                <h3>{raceSelected.name ? raceSelected.name : \"-\"}<span> </span>{classSelected.name ? classSelected.name : \"-\"}</h3>\r\n                                <div className='row'>{abilityScores}</div>\r\n                            </div>\r\n                            <div className='col-3'>\r\n                                <p>Spells</p>\r\n                                <ul className='info-spells-selected'>{classSpells}</ul>\r\n                            </div>\r\n                            <div className='col-9'>\r\n                                <h4>{selectedSpellName} {selectedSpellLevel}</h4>\r\n                                {spellDescription}\r\n                            </div>\r\n                        </div>\r\n                    </div>);\r\n                } else {\r\n                    return (<div className='col-12 info'>\r\n                        <p className='text-center'>..Choose your class to select spells </p>\r\n                    </div>);\r\n                }\r\n            default:\r\n                return (<div className=\"col-12 info\">\r\n                    <div className='row'>\r\n                        <div className='col-12 characterTitle'>\r\n                            <h3>{raceSelected.name ? raceSelected.name : \"-\"}<span> </span>{classSelected.name ? classSelected.name : \"-\"}</h3>\r\n                            <div className='row'>{abilityScores}</div>\r\n                        </div>\r\n                        <div className='col-6 info-col-left'>\r\n                            <h6>Ability bonuses</h6>\r\n                            <ul className='info-abilityBonuses'>{ability_bonuses}</ul>\r\n                        </div>\r\n                        <div className='col-6 info-col-right'>\r\n                            <h6>Hit die: {hit_die}</h6>\r\n                            <h6>Saving throws</h6>\r\n                            <ul className='info-savingThrows'>{saving_throws}</ul>\r\n                            <h6 className='info-proficiencies-title'>Proficiencies</h6>\r\n                            <ul className='info-proficiencies-selected'>\r\n                                {characterProficiencies}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>);\r\n        }        \r\n    }\r\n}\r\n\r\nexport default Info\r\n\r\n\r\n","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(\"AbilityScoresForm \", this.props);\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '}htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n     //   console.log(\"constructor() \", props);\r\n        this.state = {\r\n            proficiencies: [],\r\n            proficienciesChosen: [], \r\n            category: 0,\r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected }  = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n        }           \r\n    }   \r\n    \r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props; \r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = []; \r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }        \r\n    }\r\n   \r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean \r\n        const { classSelected } = this.props;\r\n       // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }            \r\n        }\r\n    }\r\n    \r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {                    \r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });              \r\n                    \r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }           \r\n        }       \r\n    }\r\n\r\n    classProficienciesToChooseFrom() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = [];\r\n        \r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency) => {               \r\n                for (var j = 0; j < proficiencies.length; j++) {\r\n                    for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                        if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                            return (<button className='btn-sm col-6 btn-success' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                        }\r\n                    }\r\n                }                \r\n                return (<button className='btn-sm col-6 btn-secondary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n            });\r\n         \r\n            let check = proficienciesChosen[choicesIndex]; //I have to check because this comes through undefined the very first time this function runs, need to figure out a better solution.\r\n            let num;\r\n            if (check === undefined) {\r\n                num = 0;\r\n            } else {\r\n                num = proficienciesChosen[choicesIndex].length;\r\n            }\r\n           \r\n            chooseFrom.push(<div className='col-12 selection-choose-proficiencies' key={'catetory' + choicesIndex}><h6>Choose: {classSelected.proficiency_choices[choicesIndex].choose - num}</h6>{chooseProficiencies}</div>);\r\n        }       \r\n        return (chooseFrom);\r\n    }\r\n\r\n    setNavigatioCategory(newCategory) {\r\n        this.setState({ category: newCategory, });\r\n    }\r\n\r\n\r\n\r\n\r\n    proficienciesNavigation() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        let buttons = [];       \r\n        for (var a = 0; a < classSelected.proficiency_choices.length; a++) {            \r\n            let newCategory = a;\r\n            if (category === a) {                \r\n                buttons.push(<button className='btn-sm btn profNavSelected' onClick={() => void (0)} key={classSelected.name + a}>Category {category}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn profNav' onClick={() => this.setNavigatioCategory(newCategory)} key={classSelected.name + a}>Category {newCategory}</button>)\r\n            }           \r\n        }\r\n        \r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    render() {\r\n        const choices = this.classProficienciesToChooseFrom();\r\n        const nav = this.proficienciesNavigation();\r\n        const { category } = this.state;       \r\n        return (<div className='col-12 text-center selection'>  \r\n                    {nav}\r\n                    {choices[category]}\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React, { Component } from 'react';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],    \r\n        };\r\n    }\r\n\r\n    componentDidMount() {        \r\n        this.spellSlots();\r\n        this.setClassSpells(1); // character level: 1\r\n    }\r\n    spellSlots = () => { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;    \r\n        let slotsAvailable = [];\r\n        if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {\r\n            for (var h = 0; h < levelData.length; h++) {\r\n                if (levelData[h].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = 0;\r\n                    for (var i = 1; i < 6; i++) {\r\n                        if (levelData[h].spellcasting['spell_slots_level_' + i] !== 0) {\r\n                            slotsAvailable[i] = levelData[h].spellcasting['spell_slots_level_' + i];\r\n                            console.log(\"SLOTS avail\", slotsAvailable[i])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var j = 0; j < levelData.length; j++) {\r\n                if (levelData[j].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = levelData[j].spellcasting.cantrips_known;\r\n                    for (var k = 1; k < 10; k++) {\r\n                        if (levelData[j].spellcasting['spell_slots_level_' + k] !== 0) {\r\n                            slotsAvailable[k] = levelData[j].spellcasting['spell_slots_level_' + k];\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        } \r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => {\r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => {\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        \r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n              \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    setClassSpells = (level) => { \r\n        const { classSelected } = this.props;\r\n        const { spellsInfo } = this.props;   \r\n        let spells = []\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                    for (var j = 0; j < spellsInfo[i].classes.length; j++) {\r\n                        if (classSelected.name === spellsInfo[i].classes[j].name && (spellsInfo[i].level <= level)) {\r\n                            spells.push(spellsInfo[i])\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default: \r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n        let spells = []\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = [];       \r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            spellChoices[slotLevel] = slotSpells.map((spell) => {\r\n                let classNames = \"btn btn-sm btn-block spell-btn \";\r\n                if (spell.damage !== undefined) { // Is there a better check for this?\r\n                        if (spell.damage.damage_type !== undefined) {\r\n                            classNames += spell.damage.damage_type.index + \" \";\r\n                        }\r\n                    }\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += \"btn-secondary \";\r\n                        return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                }\r\n                for (var b = 0; b < spellsChosen.length; b++) {\r\n                    let chosen = b;\r\n                    if (spellsChosen[chosen].name === spell.name) {  \r\n                        classNames += \"btn-primary \";\r\n                        return (<button className={classNames} onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                    } \r\n                }\r\n                classNames += 'btn-secondary ';\r\n                return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n            });\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='no-known-spells'><h6>You have no spells to choose from at level 1</h6></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='col-6 spells' key='cantrips'><h6>Cantrips</h6>{spellChoices[b]}</div>\r\n                }                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='col-6 spells' key={keyForThee + b}><h6>Spell Level {b}</h6>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {\r\n        return (<div className='col-12 text-center selection'>{this.displaySpells()}</div>);\r\n    }\r\n}\r\n\r\nexport default ClassSpells;","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            raceSelected: {},            \r\n        }\r\n       // this.buttons = this.buttons.bind(this);\r\n        this.selectRace = this.selectRace.bind(this);\r\n    //    console.log(\"Race Constructor\", props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n       //     console.log('race is selcted');\r\n            this.setState({ raceSelected: this.props.raceSelected, });\r\n        }\r\n        console.log(this.props);\r\n    }\r\n\r\n    selectRace = (index) => {\r\n        const { racesInfo } = this.props;\r\n        const { setRace } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });\r\n                setRace(raceSelected[0]); \r\n                break;\r\n            }\r\n        }\r\n    }   \r\n\r\n    buttons = () => {\r\n        const { races } = this.props;\r\n        const { raceSelected } = this.state;\r\n        //console.log(\"race selected \", raceSelected);\r\n        let raceButtons = races.results.map((race) => {\r\n            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n                return (<button className='btn btn-sm buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n            }\r\n            return (<button onClick={() => this.selectRace(race.index)} className='btn btn-sm selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n        });\r\n        return raceButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className='text-center selection col-12'>\r\n                    <p className=\"selectionTitle\">Choose your Champions Race</p>\r\n                    {this.buttons()}\r\n                </div>);\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n        }\r\n        this.buttons = this.buttons.bind(this);\r\n        this.selectClass = this.selectClass.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        } \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.props;\r\n        const { setClass } = this.props;\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], });\r\n                setClass(classSelected[0]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    buttons() {\r\n        const { classes } = this.props\r\n        const { classSelected } = this.state;\r\n\r\n        let classButtons = classes.results.map((characterClass) => {\r\n            if (isSelected(classSelected) && classSelected.index === characterClass.index) {\r\n                //console.log(\"selection disabled for class\");\r\n                return (<button className='selectionButtons buttonSelected col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n            }\r\n            return (<button onClick={() => this.selectClass(characterClass.index)} className='selectionButtons col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n\r\n        });       \r\n        return classButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"col-12 text-center selection\">\r\n                 <p className=\"selectionTitle\">Choose your Champions Class</p>\r\n                        {this.buttons()}\r\n                    </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './ClassProficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const abilityScoresInfo = this.props.abilityScoresInfo;\r\n        const classSelected = this.props.classSelected;\r\n        const navigation = this.props.navigation;\r\n        const getScore = this.props.getScore;\r\n        const abilityScoresSwitch = this.state.abilityScoresSwitch\r\n        switch (navigation) {\r\n            case 'Races':\r\n                return (<Races {...this.props} />);           \r\n            case 'Classes':\r\n                return (<Classes {...this.props} />); \r\n            case 'Proficiencies':\r\n                if (isSelected(classSelected)) {\r\n                    return (<ClassProficiencies {...this.props} />);\r\n                }\r\n                return (<div className='col-12 text-center selection'>You must choose a class to select your proficiencies.</div>);            \r\n            case 'Spells':\r\n                if (isSelected(classSelected) && classSelected.spellcasting !== undefined) { // Needs better validation? \r\n                    return (<ClassSpells {...this.props} />);\r\n                }\r\n                return (<div className='col-12 text-center selection'>{classSelected.name} is not a spell caster.</div>);            \r\n            case 'Ability-Scores':\r\n                let scores = abilityScoresInfo.map((abilityScore, index) => {\r\n                    return (<button onClick={() => getScore(abilityScore.index)} className='col-4 selectionButtons' key={index}>{abilityScore.full_name}</button>)\r\n                });\r\n                return (<div className='col-12 text-center selection'>                   \r\n                                {abilityScoresSwitch ? <AbilityScoresForm handleSubmit={this.props.handleSubmit} abilityScoresSelected={this.props.abilityScoresSelected} /> : scores}                           \r\n                                <button onClick={() => this.abilityScoreSwitchy()} className='btn btn-primary col-6 align-text-bottom'>{abilityScoresSwitch ? \"Auto fill \" : \"Manual fill \"}</button><br />\r\n                            \r\n                </div>);\r\n            default:\r\n                return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n        }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toggle: false,\r\n        }\r\n        this.toggleNavigation = this.toggleNavigation.bind(this);\r\n        this.hideButtons = this.hideButtons.bind(this);\r\n    }\r\n\r\n    toggleNavigation() {       \r\n        this.setState({\r\n            toggle: !this.state.toggle,\r\n        });\r\n    }\r\n\r\n    hideButtons() { \r\n        const alertNode = document.getElementById('navigation-buttons');\r\n        setTimeout(() => {\r\n            console.log(\"is it happening?\")\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                    alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                    this.toggleNavigation();\r\n                    alertNode.style.opacity = 1;\r\n                }\r\n            }, 1);\r\n        }, 0);  \r\n    }\r\n\r\n    navigationButtons() {\r\n        const navigation = this.props.navigation\r\n        const navigationCategories = this.props.navigationCategories\r\n        const navigate = this.props.navigate\r\n        const classSelected = this.props.classSelected\r\n\r\n        let navButtons = navigationCategories.map((category, index) => {\r\n            if (isSelected(classSelected)) {\r\n                if (navigation === category) {\r\n                    return (<button onClick={() => this.hideButtons() } type='button' className='btn btn-sm btn-block btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n                } else {\r\n                    return (<button onClick={() => { navigate(category); this.hideButtons(); }} type='button' className='btn btn-sm btn-block btn-dark btn-nav' key={index}>{category}</button>);\r\n                }\r\n            } else {\r\n                if (navigation === category) {\r\n                    return (<button onClick={() => this.hideButtons()} type='button' className='btn btn-sm btn-block btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n                } else {\r\n                    if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n                        switch (navigation) {\r\n                            case 'Proficiencies':\r\n                                return (<button onClick={() => { navigate(category); this.hideButtons() }} type='button' className='btn btn-sm btn-block btn-dark btn-nav' key={index}>{category}</button>);\r\n                            default:\r\n                                return (<button onClick={() => { navigate(category); this.hideButtons() }} type='button' className='btn btn-sm btn-block btn-dark btn-nav' key={index}>{category}</button>);\r\n                        }\r\n                    } else {\r\n                        return (<button onClick={() => { navigate(category); this.hideButtons()}} type='button' className='btn btn-sm btn-block btn-dark btn-nav' key={index}>{category}</button>);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        return (navButtons);\r\n    }\r\n\r\n    \r\n    render() {\r\n        const { champion } = this.props; \r\n        return (<div className='col-12 text-center' id='navigation' > \r\n            <div className='col-6' id='navigation-container' onBlur={(e) => {               \r\n                if (!e.currentTarget.contains(e.relatedTarget)) {\r\n                    // Not triggered when swapping focus between children\r\n                    this.hideButtons();                  \r\n                }\r\n            }}>\r\n                <div id='navigation-buttons' \r\n               >{this.state.toggle ? this.navigationButtons() : null}</div>\r\n                        <button className='btn btn-sm btn-primary' id='navigation-toggle' onClick={() => this.toggleNavigation() }>{champion}</button>\r\n                    </div>                    \r\n                </div>);\r\n    }\r\n}\r\n\r\n//setup() {\r\n\r\n//    <div className='row'>\r\n//        <div className='col-12'>\r\n//             {!this.state.toggle ? this.navigationButtons() : null}\r\n//        </div>\r\n//    </div>\r\n//        <div className='row'>\r\n//            <div className='col-12'>\r\n//                <button className='btn btn-sm btn-primary' id='navigation-toggle' onClick={() => this.toggleNavigation()}>{!this.state.toggle ? 'Hide' : 'Show'}</button>\r\n//            </div>\r\n//        </div>              \r\n\r\n//    <div class=\"btn-group dropup\">\r\n//        <button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n//            Champion\r\n//        </button>\r\n//        <div class=\"dropdown-menu\">\r\n//            {!this.state.toggle ? this.navigationButtons() : null}\r\n//        </div>\r\n//    </div>\r\n//}\r\n\r\n\r\n\r\n\r\n//const Navigation = (props) => {\r\n// //   console.log(\"Navigation\", props)\r\n//    const navigation = props.navigation\r\n//    const navigationCategories = props.navigationCategories\r\n//    const navigate = props.navigate\r\n//    const classSelected = props.classSelected\r\n\r\n//    let navButtons = navigationCategories.map((category, index) => {\r\n//        if (isSelected(classSelected)) {\r\n//            if (navigation === category) {\r\n//                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n//            } else {\r\n//                return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//            }\r\n//        } else {\r\n//            if (navigation === category) {\r\n//                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n//            } else {\r\n//                if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n//                    switch (navigation) {\r\n//                        case 'Proficiencies':\r\n//                            return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                        default:\r\n//                            return (<button onClick={() => navigate(category)} type='button'className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                    }     \r\n//                } else {\r\n//                    return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n//                }\r\n//            }\r\n//        }                \r\n//    });\r\n//    return (<div className='col-12 text-center navigation'>\r\n//                {navButtons}\r\n//            </div>);\r\n//}\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n\r\nimport Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\n//import isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            champion: 'Champion', //add support: user being able to name their Champion. \r\n            abilityScoresSelected: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},\r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setSpells: this.setSpells,\r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { abilityScores } = this.props;\r\n        this.abilityScoresSetup(abilityScores);\r\n    //    console.log(\"CreateCharacter mounted\");\r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n     //   console.log(\"CreateCharacter updated\")\r\n    }\r\n\r\n\r\n    abilityScoresSetup = (abilityScoresData) => {\r\n        const { count } = abilityScoresData;\r\n        const { results } = abilityScoresData;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    getScore = (ability) => {\r\n        const { abilityScores } = this.props;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = this.randomDiceRoll(6)\r\n                this.setState({abilityScoresSelected: scores})\r\n                break;\r\n            }\r\n        }\r\n   //     console.log(\"Ability Scores Selected\", abilityScoresSelected[ability])\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [] });\r\n    }\r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n        \r\n    handleSubmit = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n       \r\n    render() {\r\n       // const { navigationCategories, navigation, } = this.state\r\n        \r\n        return (<div id='creation' className='container-fluid'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />           \r\n            <div className='row'>\r\n                <Info {...this.state} {...this.props} />\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} setRace={this.setRace} setClass={this.setClass} handleSubmit={this.handleSubmit} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>\r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\nexport default class App extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {           \r\n            races: {},\r\n            racesInfo: new Array(0),           \r\n            classes: {},\r\n            classesInfo: new Array(0),\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            spells: {},\r\n            spellsInfo: [],\r\n            features: {},\r\n            featuresInfo: [],\r\n            levelData: [],\r\n            ready: false,\r\n            enter: false,\r\n        }\r\n      //  this.state = this.initialState;\r\n      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        const promise = this.getCharacterInformation(url);\r\n        promise.then((data) => {\r\n            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n        });\r\n    }\r\n     \r\n\r\n    getCharacterInformation(url) {\r\n      return Promise.all([this.getRaces(url),\r\n            this.getClasses(url),\r\n            this.getAbilityScores(url),\r\n            this.getSpells(url),\r\n            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n                return {races, classes, abilityScores, spells, features}\r\n            });\r\n    }\r\n\r\n\r\n    getCharacterData(races, classes, abilityScores, spells, features) {\r\n        Promise.all([this.getInfo(races, 'races'),\r\n            this.getInfo(classes, 'classes'),\r\n            this.getLevelData(classes, 1),\r\n            this.getInfo(abilityScores, 'ability-scores'),\r\n            this.getInfo(spells, 'spells'),\r\n            this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n    }\r\n\r\n    getRaces(url) {        \r\n       return fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, ); return result })          \r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n    }\r\n\r\n    getClasses(url) {\r\n       return fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n    }\r\n\r\n    getAbilityScores(url) {\r\n      return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n      return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, }, ); return result })\r\n          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {      \r\n       return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result }, ); return result  })\r\n           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    getLevelData(data, currentLevel) {       \r\n        let levels = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n                .then(result => result.json())\r\n                .then(result => { levels.push(result) });            \r\n        }        \r\n        this.setState({\r\n            levelData: levels,\r\n        });\r\n    }\r\n\r\n    getInfo(data, category) {\r\n        let info = []    \r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n       // console.log(info);   \r\n        switch(category) {\r\n            case 'races':\r\n                this.setState({ racesInfo: info, });\r\n                break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);  \r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':                \r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n    \r\n    render() {\r\n        const { ready } = this.state;\r\n              \r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n                    </div>\r\n                </div>\r\n            </div>);  \r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);                   \r\n        }\r\n    }\r\n}\r\n// races.results === undefined || classes.results === undefined || abilityScores.results === undefined || spells.results === undefined || spellsInfo.length === spells.count || levelData.length === 12 || features.results === undefined","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\nimport './assets/css/navigation-style.css'\r\nimport './assets/css/selection-style.css'\r\nimport './assets/css/info-style.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}