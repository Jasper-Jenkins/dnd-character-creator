{"version":3,"sources":["helper/helper-functions.js","champion/Proficiencies.js","ClassSpells.js","helper/search-bar.js","helper/modal.js","helper/search-results.js","champion/Races.js","champion/Classes.js","helper/AbilityScoresForm.js","helper/random-dice-roll.js","champion/AbilityScores.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","ClassProficiencies","props","addProficiency","proficiencyName","choicesIndex","classSelected","proficienciesChosen","state","choices","proficiency_choices","i","from","length","choose","message","updateAlertMessage","name","newProficiency","filter","proficiency","newProfs","proficiencies","chosen","setState","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","isClassSelected","category","bind","this","numberOfCategories","chooseFrom","console","log","chooseProficiencies","map","j","k","className","onClick","push","newCategory","buttons","num","undefined","setNavigationCategory","proficienciesNavigation","proficienciesToChooseFrom","Component","ClassSpells","updateSpells","spell","spellsChosen","spells","setChosenSpells","spellsChosenByLevel","cantrips","levelOneSpells","level","spellSource","currentLevel","level0","level1","spellSlots","addSpell","setSelectedSpell","removeSpell","displaySpells","classSpells","spellChoices","slotLevel","slotSpells","classNames","damage","damage_type","index","spellChoiceDisplay","levelData","navigationCategory","selected","spellBook","spellsInfo","getSpells","getInfo","spellcasting","count","setClassSpells","setSpells","setSpellsInfo","url","fetch","then","result","json","catch","e","data","results","spellsInfoData","alert","slotsAvailable","cantrips_known","updateSpellSlots","spellsSlots","spellsNavigation","SearchBar","userValue","handleChange","htmlFor","value","id","onChange","InfoModal","traits","getTraits","info","raceSelected","trait","desc","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","showTraits","SearchResults","champions","select","cards","race","bonuses","ability_bonuses","ability_score","bonus","target","data-toggle","data-target","size_description","age","alignment","language_desc","speed","championClass","prof","savingThrows","saving_throws","savingThrow","hit_die","CharacterRace","searchRaces","word","racesInfo","oldList","newList","includes","toLowerCase","searchResults","races","selectRace","getRaces","setRaces","setRacesInfo","setRace","navigate","CharacterClass","searchClasses","classesInfo","characterClass","classes","selectClass","getClasses","setClasses","setClassesInfo","setClass","cClass","getLevelData","AbilityScoresForm","handleFocus","event","scores","newScores","JSON","parse","stringify","parseInt","submitForm","handleSubmitAbilityScores","initialState","abilityScoresSelected","onFocus","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","AbilityScores","abilityScoresSetup","abilityScores","abilities","noZeroes","zeroesAlert","abilityScoresInfo","abilityScoresSwitch","getScore","getAbilityScores","setAbilityScores","setAbilityScoresInfo","setAbilityScoresSelected","abilityScore","ability","full_name","scoreDisplay","abilityScoreSwitchy","Selection","navigation","Navigation","navigationCategories","aria-disabled","aria-controls","aria-expanded","navigationButtons","UserAlert","element","alertMessage","CreateCharacter","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","selectedSpell","slots","startingProficiencies","profs","updateProficiencies","proficienciesChoices","champion","chosenRace","chosenClass","App","chooseYourChampion","ready","features","featuresInfo","enter","Promise","all","getFeatures","resolve","ReactDOM","render"],"mappings":"0WAAe,SAASA,EAAWC,GAC/B,IAAK,IAAIC,KAAOD,EAEZ,OADAA,EAAIE,eAAeD,IACZ,EAEX,OAAO,E,IC6JIE,E,kDA9JX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0CVC,eAAiB,SAACC,EAAiBC,GAK/B,IALgD,IACxCC,EAAkB,EAAKJ,MAAvBI,cAEAC,EAAwB,EAAKC,MAA7BD,oBACFE,EAAUH,EAAcI,oBACrBC,EAAI,EAAGA,EAAIF,EAAQJ,GAAcO,KAAKC,OAAQF,IAAK,CACxD,KAAIJ,EAAoBF,GAAcQ,OAASJ,EAAQJ,GAAcS,QAY9D,CACH,IAAMC,EAAU,uBAAyBN,EAAQJ,GAAcS,OAAS,uBACxE,EAAKZ,MAAMc,mBAAmBD,GAC9B,MAdA,GAAIN,EAAQJ,GAAcO,KAAKD,GAAGM,OAASb,GAAiB,qBACxD,IAAIc,EAAiBT,EAAQJ,GAAcO,KAAKO,QAAO,SAAUC,GAAe,OAAOA,EAAYH,OAASb,KACtGiB,EAAQ,sBAAO,EAAKb,MAAMc,eAAlB,CAAiCJ,EAAe,KAC1DK,EAAShB,EAMb,OALAgB,EAAOlB,GAAP,sBAA2BkB,EAAOlB,IAAlC,CAAiDa,EAAe,KAChE,EAAKM,UAAS,SAAAhB,GAAK,MAAK,CACpBc,cAAc,GAAD,mBAAMd,EAAMc,eAAZ,CAA2BJ,EAAe,KACvDX,oBAAqBgB,KACrB,EAAKrB,MAAMuB,iBAAiBJ,EAAUE,IAC1C,QATwD,GASxD,QA3DG,EAqEnBG,kBAAoB,SAACtB,EAAiBC,GAGlC,IAHoD,IAC5CiB,EAAkB,EAAKd,MAAvBc,cACAf,EAAwB,EAAKC,MAA7BD,oBACCoB,EAAI,EAAGA,EAAIpB,EAAoBM,OAAQc,IAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAoBoB,GAAGd,OAAQe,IAC/C,GAAIrB,EAAoBoB,GAAGC,GAAGX,OAASb,EAAiB,CACpD,IAAIyB,EAAmBP,EAAcH,QAAO,SAAUC,GAAe,OAAOA,EAAYH,OAASb,KAC7F0B,EAAavB,EACjBuB,EAAWzB,GAAgBE,EAAoBF,GAAcc,QAAO,SAAUC,GAAe,OAAOA,EAAYH,OAASb,KACzH,EAAKoB,SAAS,CACVF,cAAc,YAAKO,GACnBtB,oBAAqBuB,GACtB,EAAK5B,MAAMuB,iBAAX,YAAgCI,GAAmBC,IACtD,QA/EZ,EAAKtB,MAAQ,CACTuB,iBAAiB,EACjBT,cAAe,GACff,oBAAqB,GACrByB,SAAU,GAEd,EAAKP,iBAAmB,EAAKA,iBAAiBQ,KAAtB,gBATT,E,gEAcXpC,EADsBqC,KAAKhC,MAAvBI,iBAEJ4B,KAAKT,mBACLS,KAAKV,SAAS,CAAEO,iBAAiB,O,yCAKrB,IACRzB,EAAkB4B,KAAKhC,MAAvBI,cACAgB,EAAkBY,KAAKhC,MAAvBoB,cACAf,EAAwB2B,KAAKhC,MAA7BK,oBACJgB,EAAS,GACTY,EAAqB7B,EAAcI,oBAAoBG,OAC3D,GAAIN,EAAoBM,OAAS,EAAG,CAChC,IAAK,IAAIc,EAAI,EAAGA,EAAIQ,EAAoBR,IACpCJ,EAAOI,GAAK,GAEhBO,KAAKV,SAAS,CACVF,cAAeA,EACff,oBAAqBgB,GACtBW,KAAKhC,MAAMuB,iBAAiBH,EAAeC,SAE9CW,KAAKV,SAAS,CACVF,cAAeA,EACff,oBAAqBA,M,gDAkDPyB,GAAW,IAAD,OACxB1B,EAAkB4B,KAAKhC,MAAvBI,cACAgB,EAAkBY,KAAK1B,MAAvBc,cACAf,EAAwB2B,KAAK1B,MAA7BD,oBACJ6B,EAAa,GACjBC,QAAQC,IAAIhC,GACZ,IANgC,iBAO5B,IAAID,EAAeM,EACb4B,EAAsBjC,EAAcI,oBAAoBC,GAAGC,KAAK4B,KAAI,SAACpB,GACvE,IAAK,IAAIqB,EAAI,EAAGA,EAAInB,EAAcT,OAAQ4B,IACtC,IAAK,IAAIC,EAAI,EAAGA,EAAInC,EAAoBF,GAAcQ,OAAQ6B,IAC1D,GAAItB,EAAYH,OAASV,EAAoBF,GAAcqC,GAAGzB,KAC1D,OAAQ,4BAAQ0B,UAAU,2BAA2BC,QAAS,kBAAM,EAAKlB,kBAAkBN,EAAYH,KAAMZ,IAAeN,IAAKqB,EAAYH,MAAOG,EAAYH,MAI5K,OAAQ,4BAAQ0B,UAAU,6BAA6BC,QAAS,kBAAM,EAAKzC,eAAeiB,EAAYH,KAAMZ,IAAeN,IAAKqB,EAAYH,MAAOG,EAAYH,SAEnKmB,EAAWS,KAAKN,IAZX5B,EAAI,EAAGA,EAAIL,EAAcI,oBAAoBG,OAAQF,IAAM,IAcpE,OAAQyB,EAAWJ,K,4CAEDc,GAClBZ,KAAKV,SAAS,CAAEQ,SAAUc,M,gDAQ1B,IALuB,IAAD,OACdxC,EAAkB4B,KAAKhC,MAAvBI,cACA0B,EAAaE,KAAK1B,MAAlBwB,SACAzB,EAAwB2B,KAAK1B,MAA7BD,oBACJwC,EAAU,GAJQ,aAMlB,IAAID,EAAcnB,EAEdqB,OAAG,EAEHA,OADUC,IAFF1C,EAAoBuC,GAGtB,EAEAvC,EAAoBuC,GAAajC,OAEvCmB,IAAaL,EACboB,EAAQF,KAAK,4BAAQF,UAAU,yBAAyBC,QAAS,aAAgB7C,IAAKO,EAAcW,KAAOU,GAA9F,WAA0GrB,EAAcI,oBAAoBoC,GAAahC,OAASkC,IAE/KD,EAAQF,KAAK,4BAAQF,UAAU,2BAA2BC,QAAS,kBAAM,EAAKM,sBAAsBJ,IAAc/C,IAAKO,EAAcW,KAAOU,GAA/H,WAA2IrB,EAAcI,oBAAoBoC,GAAahC,OAASkC,KAZ/MrB,EAAI,EAAGA,EAAIrB,EAAcI,oBAAoBG,OAAQc,IAAM,IAepE,OAAQ,yBAAKgB,UAAU,UAAUI,K,+BAI3B,IACEzC,EAAkB4B,KAAKhC,MAAvBI,cACA0B,EAAaE,KAAK1B,MAAlBwB,SAER,OAD4BE,KAAK1B,MAAzBuB,gBACkB,yBAAKY,UAAU,gCACrC,yBAAKA,UAAU,yBACX,4BAAKrC,EAAcW,KAAnB,mBAEJ,yBAAK0B,UAAU,0BACX,yBAAKA,UAAU,8CACVT,KAAKiB,2BAEV,yBAAKR,UAAU,aACVT,KAAKkB,0BAA0BpB,MAGnC,yBAAKW,UAAU,gCAA+B,wBAAIA,UAAU,kBAAd,8D,GA3J9BU,aCyclBC,E,kDAxcX,WAAYpD,GAAQ,IAAD,8BACf,cAAMA,IAiJVqD,aAAe,SAACC,GAAW,IACfC,EAAiB,EAAKvD,MAAtBuD,aACJC,EAAM,sBAAOD,GAAP,CAAqBD,IAC/B,EAAKhC,SAAS,CACViC,aAAcC,IAElB,EAAKxD,MAAMyD,gBAAgBD,IAxJZ,EA2JnBE,oBAAsB,WAKlB,IALwB,IAChBH,EAAiB,EAAKvD,MAAtBuD,aACJI,EAAW,EACXC,EAAiB,EACjBJ,EAAS,GACJ/C,EAAI,EAAGA,EAAI8C,EAAa5C,OAAQF,IACP,IAA1B8C,EAAa9C,GAAGoD,MAChBF,IACiC,IAA1BJ,EAAa9C,GAAGoD,OACvBD,IAKR,OAFAJ,EAAOb,KAAKgB,GACZH,EAAOb,KAAKiB,GACLJ,GAzKQ,EA4KnBM,YAAc,SAACR,EAAOS,GAAiB,IAM/BC,EAAQC,EALJ7D,EAAkB,EAAKJ,MAAvBI,cACAmD,EAAiB,EAAKvD,MAAtBuD,aACAW,EAAe,EAAK5D,MAApB4D,WACJP,EAAW,EACXC,EAAiB,EAEjB/C,EAAU,kBAAoByC,EAAMvC,KAAO,uBAE/C,OAAOX,EAAcW,MACjB,IAAK,YACD,MACJ,IAAK,OACD,GAA4B,IAAxBwC,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAHR,kBAKuBY,EALvB,GAKKF,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAEJ,GAAIM,EAAiBK,GAA0B,IAAhBX,EAAMO,MAAa,CAC9C,EAAKR,aAAaC,GAClB,MAGJ,EAAKtD,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,SACD,GAA4B,IAAxB0C,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAHR,kBAKuBY,EALvB,GAKKF,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAGJ,GAAIM,EAAiBK,GAA0B,IAAhBX,EAAMO,MAAa,CAC9C,EAAKR,aAAaC,GAClB,MAGJ,EAAKtD,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,QACD,GAA4B,IAAxB0C,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAHR,kBAKuBY,EALvB,GAKKF,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAEJ,GAAIM,EAAiBK,GAA0B,IAAhBX,EAAMO,MAAa,CAC9C,EAAKR,aAAaC,GAClB,MAEJ,EAAKtD,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,UAEL,IAAK,OACD,MACJ,IAAK,UACD,GAA4B,IAAxB0C,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAHR,kBAKuBY,EALvB,GAKKF,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAGJ,GAAIM,EAAiBK,GAA0B,IAAhBX,EAAMO,MAAa,CAC9C,EAAKR,aAAaC,GAClB,MAEJ,MACJ,IAAK,SACD,GAA4B,IAAxBC,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAHR,kBAKuBY,EALvB,GAKKF,EALL,KAKaC,EALb,WAMiC,EAAKP,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAWK,GAA0B,IAAhBV,EAAMO,MAAa,CACxC,EAAKR,aAAaC,GAClB,MAEAM,EAAiBK,GAA0B,IAAhBX,EAAMO,OACjC,EAAKR,aAAaC,GAEtB,MACJ,IAAK,QACD,MACJ,IAAK,WACD,GAA4B,IAAxBC,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAHR,MAKiC,EAAKI,sBALtC,mBAMI,GADCC,EALL,KAKeC,EALf,KAMQD,EAAW,GAAqB,IAAhBL,EAAMO,MAAa,CACnC,EAAKR,aAAaC,GAClB,MAGJ,GAAIM,EAAiB,GAAqB,IAAhBN,EAAMO,MAAa,CACzC,EAAKR,aAAaC,GAClB,MAGJ,EAAKtD,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,UACD,GAA4B,IAAxB0C,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAHR,MAKiC,EAAKI,sBALtC,mBAMI,GADCC,EALL,KAKeC,EALf,KAMQD,EAAW,GAAqB,IAAhBL,EAAMO,MAAa,CACnC,EAAKR,aAAaC,GAClB,MAGJ,GAAIM,EAAiB,GAAqB,IAAhBN,EAAMO,MAAa,CACzC,EAAKR,aAAaC,GAClB,MAGJ,EAAKtD,MAAMc,mBAAmBD,GAC9B,MACJ,IAAK,SAED,GADAsB,QAAQC,IAAI,yBACgB,IAAxBmB,EAAa5C,OAAc,CAC3B,EAAK0C,aAAaC,GAClB,MAJR,MAMiC,EAAKI,sBANtC,mBAOI,GADCC,EANL,KAMeC,EANf,KAOQD,EAAW,GAAqB,IAAhBL,EAAMO,MAAa,CACnC,EAAKR,aAAaC,GAClB,MAEJ,GAAIM,EAAiB,GAAqB,IAAhBN,EAAMO,MAAa,CACzC,EAAKR,aAAaC,GAClB,MAEJ,EAAKtD,MAAMc,mBAAmBD,KAvUvB,EAgVnBsD,SAAW,SAACb,GAAW,IACXc,EAAqB,EAAKpE,MAA1BoE,iBACR,EAAKN,YAAYR,EAAO,GACxBc,EAAiBd,IAnVF,EAsVnBe,YAAc,SAACf,GAIX,IAJsB,IACdC,EAAiB,EAAKvD,MAAtBuD,aACAa,EAAqB,EAAKpE,MAA1BoE,iBACJZ,EAAS,GACJ/C,EAAI,EAAGA,EAAI8C,EAAa5C,OAAQF,IACjC8C,EAAa9C,GAAGM,OAASuC,EAAMvC,MAC/ByC,EAAOb,KAAKY,EAAa9C,IAGjC,EAAKa,SAAS,CACViC,aAAcC,IAElB,EAAKxD,MAAMyD,gBAAgBD,GAC3BY,EAAiB,KAnWF,EA8XnBE,cAAgB,WAMZ,IANmB,IACXlE,EAAkB,EAAKJ,MAAvBI,cACAmE,EAAgB,EAAKjE,MAArBiE,YACAL,EAAe,EAAK5D,MAApB4D,WACAX,EAAiB,EAAKvD,MAAtBuD,aACJiB,EAAe,GALD,aAOd,IAAMC,EAAYhD,EACdiD,EAAaH,EAAYtD,QAAO,SAACqC,GACjC,OAAQA,EAAMO,QAAUY,EAAYnB,EAAQ,QAEhDkB,EAAaC,GAAaC,EAAWpC,KAAI,SAACgB,GACtC,IAAIqB,EAAa,wBAMjB,QALqB5B,IAAjBO,EAAMsB,aAC+B7B,IAA7BO,EAAMsB,OAAOC,cACbF,GAAcrB,EAAMsB,OAAOC,YAAYC,MAAQ,KAG/B,IAAxBvB,EAAa5C,OAET,OADJgE,GAAc,iBACF,4BAAQlC,UAAWkC,EAAYjC,QAAS,kBAAM,EAAKyB,SAASb,IAAQzD,IAAKyD,EAAMvC,KAAOuC,EAAMO,OAAQP,EAAMvC,MAE1H,IAAK,IAAIW,EAAI,EAAGA,EAAI6B,EAAa5C,OAAQe,IAAK,CAE1C,GAAI6B,EADS7B,GACYX,OAASuC,EAAMvC,KAEpC,OADA4D,GAAc,eACN,4BAAQlC,UAAWkC,EAAYjC,QAAS,kBAAM,EAAK2B,YAAYf,IAAQzD,IAAKyD,EAAMvC,KAAOuC,EAAMO,OAAQP,EAAMvC,MAI7H,OADA4D,GAAc,iBACN,4BAAQlC,UAAWkC,EAAYjC,QAAS,kBAAM,EAAKyB,SAASb,IAAQzD,IAAKyD,EAAMvC,KAAOuC,EAAMO,OAAQP,EAAMvC,UAxBjHU,EAAI,EAAGA,EAAIyC,EAAWvD,OAAQc,IAAM,IA4B7C,IADA,IAAIsD,EAAqB,GAChBrD,EAAI,EAAGA,EAAI8C,EAAa7D,OAAQe,IACrC,GAAU,IAANA,EAC2B,YAAvBtB,EAAcW,MAA6C,WAAvBX,EAAcW,KAClDgE,EAAmBrD,GAAK,yBAAKe,UAAU,SAAS5C,IAAI,mBAAkB,6EAEtEkF,EAAmBrD,GAAK,yBAAKe,UAAU,SAAS5C,IAAI,YAAW,wCAAkB2E,EAAa9C,QAE/F,CAEHqD,EAAmBrD,GAAK,yBAAKe,UAAU,SAAS5C,IAD/B,aACiD6B,GAAG,qCAAWA,EAAX,WAA0B8C,EAAa9C,IAGpH,OAAQqD,GA1aR,EAAKzE,MAAQ,CACTF,cAAe,GACfmE,YAAa,GACbL,WAAY,GACZX,aAAc,GACdyB,UAAW,GACXC,mBAAoB,EACpBC,UAAU,EACVC,UAAW,GACX3B,OAAQ,GACR4B,WAAY,IAEhB,EAAKlB,WAAa,EAAKA,WAAWnC,KAAhB,gBAClB,EAAKsD,UAAY,EAAKA,UAAUtD,KAAf,gBACjB,EAAKuD,QAAU,EAAKA,QAAQvD,KAAb,gBAhBA,E,gEAoBXpC,EAAWqC,KAAKhC,MAAMI,qBAA4D2C,IAA1Cf,KAAKhC,MAAMI,cAAcmF,cACjEvD,KAAKV,SAAS,CAAE4D,UAAU,IAGtBlD,KAAKhC,MAAMoF,WAAWzE,SAAWqB,KAAKhC,MAAMwD,OAAOgC,OACnDrD,QAAQC,IAAI,6BACZJ,KAAKV,SAAS,CAAEkC,OAAQxB,KAAKhC,MAAMwD,OAAQ4B,WAAYpD,KAAKhC,MAAMoF,aAClEpD,KAAKkC,aACLlC,KAAKyD,eAAe,EAAGzD,KAAKhC,MAAMoF,cAElCjD,QAAQC,IAAI,2BACZJ,KAAKqD,YACLrD,KAAKkC,eAIT/B,QAAQC,IAAI,kB,6CAKZJ,KAAK1B,MAAM8E,WAAWzE,SAAWqB,KAAK1B,MAAMkD,OAAOgC,QACnDxD,KAAKhC,MAAM0F,UAAU1D,KAAK1B,MAAMkD,QAChCxB,KAAKhC,MAAM2F,cAAc3D,KAAK1B,MAAM8E,YACpCjD,QAAQC,IAAI,iB,kCAMP,IAAD,OACAhC,EAAkB4B,KAAKhC,MAAvBI,cACFwF,EAAM,0BACZC,MAAMD,EAAMxF,EAAcoD,QACjBsC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,SAAS,CAAEkC,OAAQuC,GAAW,EAAKT,QAAQS,OACjEE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,sBAAwBN,Q,8BAI1DO,GAAO,IAAD,OACF/F,EAAkB4B,KAAKhC,MAAvBI,cACR+B,QAAQC,IAAIhC,EAAcW,KAAM,WAAYoF,GAG5C,IADA,IAAMP,EAAM,0BACHnF,EAAI,EAAGA,EAAI0F,EAAKC,QAAQzF,OAAQF,IACrCoF,MAAMD,EAAMO,EAAKC,QAAQ3F,GAAGmF,KACvBE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,UAAS,SAAChB,GAAD,MAAY,CAAE8E,WAAW,GAAD,mBAAM9E,EAAM8E,YAAZ,CAAwBW,QAAkB,EAAKzF,MAAM8E,WAAWzE,SAAW,EAAKL,MAAMkD,OAAOgC,OAAS,EAAKC,eAAe,EAAG,EAAKnF,MAAM8E,eAC/La,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,+BAAiCN,Q,qCAM5D/B,EAAOwC,GACQrE,KAAKhC,MAAvBI,cAD2B,IAE7BgF,EAAaiB,EAEf7C,EAAS,GAGb,OADArB,QAAQC,IAAI,kBAAmBgD,GACvBvB,GACJ,KAAK,EACD,IAAK,IAAIpD,EAAI,EAAGA,EAAI2E,EAAWzE,OAAQF,IAC5B2E,EAAW3E,GAAGoD,OAASA,GACvBL,EAAOb,KAAKyC,EAAW3E,IAGlCuB,KAAKV,SAAS,CACViD,YAAaf,IAEjBrB,QAAQC,IAAI,4BAA6BoB,GACzC,MACJ,QACI8C,MAAM,yD,mCAsBL,IACDlG,EAAkB4B,KAAKhC,MAAvBI,cACA4E,EAAchD,KAAKhC,MAAnBgF,UACJuB,EAAiB,GAErB,GADApE,QAAQC,IAAI,4BAA6B4C,QACVjC,IAA3BiC,EAAUO,aACV,GAA2B,WAAvBnF,EAAcW,MAA4C,YAAvBX,EAAcW,KACjD,IAAK,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IACsC,IAArDuE,EAAUO,aAAa,qBAAuB9E,KAC9C8F,EAAe9F,GAAKuE,EAAUO,aAAa,qBAAuB9E,GAClE0B,QAAQC,IAAIhC,EAAcW,KAAM,2BAA4BwF,EAAe9F,SAGhF,CACH8F,EAAe,GAAKvB,EAAUO,aAAaiB,eAC3C,IAAK,IAAIhE,EAAI,EAAGA,EAAI,GAAIA,IACqC,IAArDwC,EAAUO,aAAa,qBAAuB/C,KAC9C+D,EAAe/D,GAAKwC,EAAUO,aAAa,qBAAuB/C,IAKlFL,QAAQC,IAAI,mBAAoBmE,GAChCvE,KAAKV,SAAS,CACV4C,WAAYqC,GACbvE,KAAKhC,MAAMyG,iBAAiBF,M,4CAwNb3D,GAClBZ,KAAKV,SAAS,CAAE2D,mBAAoBrC,M,yCASpC,IANgB,IAAD,OAEPqC,EAAuBjD,KAAK1B,MAA5B2E,mBACAf,EAAelC,KAAK1B,MAApB4D,WACJrB,EAAU,GACV6D,EAAc1E,KAAK0B,sBALR,aAOX,IACIZ,EADAF,EAAcnB,EAElBqB,EAAM4D,EAAYjF,GACdwD,IAAuBxD,EACvBoB,EAAQF,KAAK,4BAAQF,UAAU,yBAAyBC,QAAS,aAAgB7C,IAAK4B,GAAzE,YAAsFyC,EAAWzC,GAAKqB,IAEnHD,EAAQF,KAAK,4BAAQF,UAAU,0BAA0BC,QAAS,kBAAM,EAAKM,sBAAsBJ,IAAc/C,IAAK4B,GAAzG,WAAqHyC,EAAWzC,GAAKqB,KAPjJrB,EAAI,EAAGA,EAAIyC,EAAWvD,OAAQc,IAAM,IAU7C,OAAQ,yBAAKgB,UAAU,UAAUI,K,+BAqD3B,IAAD,EACsCb,KAAK1B,MAAxC2E,EADH,EACGA,mBAAoBC,EADvB,EACuBA,SACtB1B,EAASxB,KAAKsC,gBAGpB,OAFAnC,QAAQC,IAAI,kBAAmBoB,EAAO,IAE7B0B,EACL,yBAAKzC,UAAU,gCACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,8CACVT,KAAK2E,oBAEV,yBAAKlE,UAAU,aACVe,EAAOyB,MAIpB,yBAAKxC,UAAU,gCAChB,0E,GAjceU,aCDX,SAASyD,EAAT,GAAiD,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAC3C,OACI,yBAAKrE,UAAU,+BACX,2BAAOA,UAAU,qBAAqBsE,QAAQ,aAA9C,WAAyE,2BAAOtE,UAAU,QAAQuE,MAAOH,EAAW9F,KAAK,YAAYkG,GAAG,YAAYC,SAAUJ,K,ICgE3JK,E,kDAjEX,WAAYnH,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACT8G,OAAQ,IAEZ,EAAKC,UAAY,EAAKA,UAAUtF,KAAf,gBALF,E,gEAUfC,KAAKqF,UAAUrF,KAAKhC,MAAMsH,Q,gCAGpBC,GAAe,IAAD,OACd3B,EAAM,0BAEZ,GAA2B,UAAvB2B,EAAazC,YAGb,IAAK,IAAIrD,EAAI,EAAGA,EAAI8F,EAAaH,OAAOzG,OAAQc,IAC5CoE,MAAMD,EAAM2B,EAAaH,OAAO3F,GAAGmE,KAC9BE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,UAAS,SAAChB,GAAD,MAAY,CAAE8G,OAAO,GAAD,mBAAM9G,EAAM8G,QAAZ,CAAoBrB,WACvEE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,sBAAwBN,Q,mCAalE,OAPmB5D,KAAK1B,MAAhB8G,OACU9E,KAAI,SAACkF,GACnB,OAAQ,yBAAK3H,IAAK,SAAS2H,EAAMzG,MAC7B,4BAAKyG,EAAMzG,MACX,2BAAIyG,EAAMC,KAAK,U,+BAMjB,IACEL,EAAWpF,KAAK1B,MAAhB8G,OACArG,EAASiB,KAAKhC,MAAMsH,KAApBvG,KACR,OAAQ,yBAAK0B,UAAU,oBACnB,yBAAKA,UAAU,aAAawE,GAAI,QAAQjF,KAAKhC,MAAMsH,KAAKxC,MAAO4C,SAAS,KAAKC,KAAK,SAASC,kBAAgB,aAAaC,cAAY,QAChI,yBAAKpF,UAAU,eAAekF,KAAK,YAC/B,yBAAKlF,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAcwE,GAAG,cAAclG,EAA7C,WACA,4BAAQ+G,KAAK,SAASrF,UAAU,QAAQsF,eAAa,QAAQC,aAAW,SACpE,0BAAMH,cAAY,QAAlB,UAGR,yBAAKpF,UAAU,cACQ,IAAlB2E,EAAOzG,OAAeqB,KAAKiG,aAAe,oCAE/C,yBAAKxF,UAAU,gBACX,4BAAQqF,KAAK,SAASrF,UAAU,oBAAoBsF,eAAa,SAAjE,kB,GAzDJ5E,aCAT,SAAS+E,EAAT,GAAyD,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,OAE3CC,EAAQ,GACZ,OAHmE,EAAZvG,UAInD,IAAK,QACDuG,EAAQF,EAAU7F,KAAI,SAACgG,GAEnB,IADA,IAAIC,EAAU,GACL9G,EAAI,EAAGA,EAAI6G,EAAKE,gBAAgB7H,OAAQc,IAC7C8G,GAAWD,EAAKE,gBAAgB/G,GAAGgH,cAAc1H,KAAO,KAAOuH,EAAKE,gBAAgB/G,GAAGiH,MAAQ,IAInG,IAFA,IAAItB,EAAS,GACTuB,EAAS,SAAWL,EAAKxD,MACpBpD,EAAI,EAAGA,EAAI4G,EAAKlB,OAAOzG,OAAQe,IAChCA,IAAM4G,EAAKlB,OAAOzG,OAAO,EACzByG,EAAOzE,KAAK,0BAAMiG,cAAY,QAAQC,cAAaF,EAAQ9I,IAAKyI,EAAKlB,OAAO1F,GAAGX,MAAOuH,EAAKlB,OAAO1F,GAAGX,KAAzF,OAEZqG,EAAOzE,KAAK,0BAAMiG,cAAY,QAAQC,cAAaF,EAAQ9I,IAAKyI,EAAKlB,OAAO1F,GAAGX,MAAOuH,EAAKlB,OAAO1F,GAAGX,KAAzF,OAKpB,OAFAqG,EAAOzE,KAAK,4BAAQF,UAAU,yBAAwBmG,cAAY,QAAQC,cAAaF,EAAQ9I,IAAI,wBAAvF,MAEJ,yBAAK4C,UAAU,8CAA8C5C,IAAKyI,EAAKxD,OAC3E,yBAAKrC,UAAU,8CACX,4BAAK6F,EAAKvH,OAEd,yBAAK0B,UAAU,aACX,uBAAGA,UAAU,aAAY,gDAAzB,IAAwD6F,EAAKQ,kBAC7D,uBAAGrG,UAAU,aAAY,wCAAzB,IAAgD6F,EAAKS,KACrD,uBAAGtG,UAAU,aAAY,8CAAzB,IAAsD6F,EAAKU,WAC3D,uBAAGvG,UAAU,aAAY,6CAAzB,IAAqD6F,EAAKW,eAC1D,uBAAGxG,UAAU,aAAY,2CAAzB,IAAmD2E,GACnD,uBAAG3E,UAAU,aAAY,oDAAzB,IAA4D8F,GAC5D,uBAAG9F,UAAU,aAAY,0CAAzB,IAAkD6F,EAAKY,OACvD,4BAAQzG,UAAU,4BAA4BC,QAAS,kBAAM0F,EAAOE,EAAKxD,SAAzE,UAAyFwD,EAAKvH,MAC9F,kBAAC,EAAD,CAAWuG,KAAMgB,SAI7B,MACJ,IAAK,UACDD,EAAQF,EAAU7F,KAAI,SAAC6G,GACnB,IAAI/H,EACAoE,EAAQ,EACZpE,EAAgB+H,EAAc/H,cAAckB,KAAI,SAAC8G,GAC7C,OAAI5D,IAAU2D,EAAc/H,cAAcT,OAAS,EACvCyI,EAAKrI,KAAO,MAExByE,IACQ4D,EAAKrI,KAAO,SAExB,IAAIsI,EAMJ,OALAA,EAAeF,EAAcG,cAAchH,KAAI,SAACiH,GAC5C,OAAQA,EAAYxI,KAAO,OAIvB,yBAAK0B,UAAU,8CAA8C5C,IAAKsJ,EAAcrE,OACpF,yBAAKrC,UAAU,8CACX,4BAAK0G,EAAcpI,OAEvB,yBAAK0B,UAAU,aACX,uBAAGA,UAAU,aAAY,4CAAzB,IAAoD0G,EAAcK,SAClE,uBAAG/G,UAAU,aAAY,2DAAzB,IAAmErB,EAAnE,KACA,uBAAGqB,UAAU,aAAY,kDAAzB,IAA0D4G,GAC1D,uBAAG5G,UAAU,cACb,uBAAGA,UAAU,cACb,uBAAGA,UAAU,cACb,4BAAQA,UAAU,4BAA4BC,QAAS,kBAAM0F,EAAOe,EAAcrE,SAAlF,UAAkGqE,EAAcpI,WAQpI,OAAQsH,E,IC+DSoB,E,kDACjB,WAAYzJ,GAAQ,IAAD,8BACf,cAAMA,IAoEV0J,YAAc,SAACC,GAAU,IACbC,EAAc,EAAKtJ,MAAnBsJ,UACR,EAAKtI,SAAS,CACVqI,KAAMA,IAEV,IAAIE,EAAUD,EAAUtH,KAAI,SAACgG,GACzB,OAAOA,KAEPwB,EAAU,GACD,KAATH,GACAG,EAAUD,EAAQ5I,QAAO,SAAAqH,GAAI,OAAIA,EAAKxD,MAAMiF,SAASJ,EAAKK,kBAE1D,EAAK1I,SAAS,CAAE2I,cAAeH,MAE/B3H,QAAQC,IAAI0H,GACZ,EAAKxI,SAAS,CAAE2I,cAAeJ,MAlFnC,EAAKvJ,MAAQ,CACT4J,MAAO,GACPN,UAAW,GACXrC,aAAc,GACd0C,cAAe,GACfN,KAAM,IAGV,EAAKQ,WAAa,EAAKA,WAAWpI,KAAhB,gBAClB,EAAKqI,SAAW,EAAKA,SAASrI,KAAd,gBAChB,EAAKuD,QAAU,EAAKA,QAAQvD,KAAb,gBAZA,E,gEAgBXpC,EAAWqC,KAAKhC,MAAMuH,eACtBvF,KAAKV,SAAS,CAAEiG,aAAcvF,KAAKhC,MAAMuH,eAEzC5H,EAAWqC,KAAKhC,MAAMkK,QAA0C,IAAhClI,KAAKhC,MAAM4J,UAAUjJ,OACrDqB,KAAKV,SAAS,CAAC4I,MAAOlI,KAAKhC,MAAMkK,MAAON,UAAW5H,KAAKhC,MAAM4J,YAE9D5H,KAAKoI,a,6CAOTpI,KAAKhC,MAAMqK,SAASrI,KAAK1B,MAAM4J,OAC/BlI,KAAKhC,MAAMsK,aAAatI,KAAK1B,MAAMsJ,a,iCAG3B,IAAD,OAEDhE,EAAM,+BACZC,MAAMD,EAAM,SACPE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,SAAS,CAAE4I,MAAOnE,GAAW,EAAKT,QAAQS,OAChEE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,qBAAuBN,Q,8BAGrDO,GAIJ,IAJW,IAAD,OAID1F,EAAI,EAAGA,EAAI0F,EAAKC,QAAQzF,OAAQF,IACtCoF,MAFS,0BAEGM,EAAKC,QAAQ3F,GAAGmF,KACvBE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,UAAS,SAAChB,GAAD,MAAY,CAAEsJ,UAAU,GAAD,mBAAMtJ,EAAMsJ,WAAZ,CAAuB7D,a,iCAI9EjB,GAIP,IAJe,IAAD,OACN8E,EAAc5H,KAAK1B,MAAnBsJ,UACAW,EAAYvI,KAAKhC,MAAjBuK,QACAC,EAAaxI,KAAKhC,MAAlBwK,SAHM,WAIL/J,GACL,GAAImJ,EAAUnJ,GAAGqE,QAAUA,EAAO,CAC9B,IAAMyC,EAAeqC,EAAU3I,QAAO,SAAUqH,GAAQ,OAAOA,EAAKvH,OAAS6I,EAAUnJ,GAAGM,QAK1F,OAJA,EAAKO,SAAS,CAAEiG,aAAcA,EAAa,KAC3CgD,EAAQhD,EAAa,IAErBiD,EAAS,WACT,UAPC/J,EAAI,EAAGA,EAAImJ,EAAUjJ,OAAQF,IAAK,gBAAlCA,GAOD,S,+BAwBF,IAAD,OAEGkJ,EAAS3H,KAAK1B,MAAdqJ,KACAM,EAAkBjI,KAAK1B,MAAvB2J,cACAL,EAAc5H,KAAK1B,MAAnBsJ,UACR,OAAQ,yBAAKnH,UAAU,qBACf,yBAAKA,UAAU,sBACf,wBAAIA,UAAU,4BAAd,iBACI,kBAACmE,EAAD,CAAWI,MAAO2C,EAAM7C,aAAc,SAAAZ,GAAC,OAAI,EAAKwD,YAAYxD,EAAEyC,OAAO3B,WAEzE,yBAAKvE,UAAU,OACX,kBAACyF,EAAD,CAAeC,UAAoB,KAATwB,EAAcM,EAAgBL,EAAW9H,SAAS,QAAQsG,OAAQpG,KAAKmI,mB,GApG1EhH,aCxItBsH,E,kDACjB,WAAYzK,GAAQ,IAAD,8BACf,cAAMA,IAsFV0K,cAAgB,SAACf,GAAU,IACfgB,EAAgB,EAAKrK,MAArBqK,YACR,EAAKrJ,SAAS,CACVqI,KAAMA,IAEV,IAAIE,EAAUc,EAAYrI,KAAI,SAACsI,GAC3B,OAAOA,KAEPd,EAAU,GACD,KAATH,GACAG,EAAUD,EAAQ5I,QAAO,SAAA2J,GAAc,OAAIA,EAAe9F,MAAMiF,SAASJ,EAAKK,kBAC9E,EAAK1I,SAAS,CAAE2I,cAAeH,MAE/B3H,QAAQC,IAAI0H,GACZ,EAAKxI,SAAS,CAAE2I,cAAeJ,MAnGnC,EAAKvJ,MAAQ,CACTuK,QAAS,GACTF,YAAa,GACbvK,cAAe,GACf6J,cAAc,GACdN,KAAM,IAGV,EAAKmB,YAAc,EAAKA,YAAY/I,KAAjB,gBAVJ,E,gEAeXpC,EAAWqC,KAAKhC,MAAMI,gBACtB4B,KAAKV,SAAS,CAAElB,cAAe4B,KAAKhC,MAAMI,gBAE1CT,EAAWqC,KAAKhC,MAAM6K,UAA8C,KAAlC7I,KAAKhC,MAAM2K,YAAYhK,OACzDqB,KAAKV,SAAS,CAAEuJ,QAAS7I,KAAKhC,MAAM6K,QAASF,YAAa3I,KAAKhC,MAAM2K,cAErE3I,KAAK+I,e,6CAK6B,KAAlC/I,KAAK1B,MAAMqK,YAAYhK,SACvBqB,KAAKhC,MAAMgL,WAAWhJ,KAAK1B,MAAMuK,SACjC7I,KAAKhC,MAAMiL,eAAejJ,KAAK1B,MAAMqK,gB,mCAI/B,IAAD,OAEH/E,EAAM,+BACZC,MAAMD,EAAM,WACPE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,SAAS,CAAEuJ,QAAS9E,GAAW,EAAKT,QAAQS,OAClEE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,uBAAyBN,Q,8BAIvDO,GAIJ,IAJW,IAAD,OAID1F,EAAI,EAAGA,EAAI0F,EAAKC,QAAQzF,OAAQF,IACrCoF,MAFQ,0BAEIM,EAAKC,QAAQ3F,GAAGmF,KACvBE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,UAAS,SAAChB,GAAD,MAAY,CAAEqK,YAAY,GAAD,mBAAMrK,EAAMqK,aAAZ,CAAyB5E,a,kCAIlFjB,GAAQ,IAAD,OACP6F,EAAgB3I,KAAK1B,MAArBqK,YACAO,EAAalJ,KAAKhC,MAAlBkL,SACAV,EAAaxI,KAAKhC,MAAlBwK,SACRrI,QAAQC,IAAI,QAASuI,GACrB,IALe,eAKNlK,GACL,GAAIkK,EAAYlK,GAAGqE,QAAUA,EAAO,CAChC,IAAM1E,EAAgBuK,EAAY1J,QAAO,SAAUkK,GAAU,OAAOA,EAAOpK,OAAS4J,EAAYlK,GAAGM,QAInG,OAHA,EAAKO,SAAS,CAAElB,cAAeA,EAAc,IAAO,EAAKJ,MAAMoL,aAAahL,EAAc,GAAG0E,MAAO,IACpGoG,EAAS9K,EAAc,IACvBoK,EAAS,kBACT,UANC/J,EAAI,EAAGA,EAAIkK,EAAYhK,OAAQF,IAAK,gBAApCA,GAMD,S,+BAyCF,IAAD,OACGkJ,EAAS3H,KAAK1B,MAAdqJ,KACAM,EAAkBjI,KAAK1B,MAAvB2J,cACAU,EAAgB3I,KAAK1B,MAArBqK,YACR,OAAQ,yBAAKlI,UAAU,oBACX,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,4BAAd,kBACA,kBAACmE,EAAD,CAAWI,MAAO2C,EAAM7C,aAAc,SAAAZ,GAAC,OAAI,EAAKwE,cAAcxE,EAAEyC,OAAO3B,WAE3E,yBAAKvE,UAAU,OACX,kBAACyF,EAAD,CAAeC,UAAoB,KAATwB,EAAcM,EAAgBU,EAAa7I,SAAS,UAAUsG,OAAQpG,KAAK8I,oB,GApHjF3H,aCkH7BkI,E,kDApHX,WAAYrL,GAAQ,IAAD,8BACf,cAAMA,IA8BVsL,YAAc,SAACC,GAAD,OAAWA,EAAM5C,OAAOP,UA/BnB,EAiCnBtB,aAAe,SAACyE,GAKZ,IALuB,IAAD,EACEA,EAAM5C,OAAtB5H,EADc,EACdA,KAAMiG,EADQ,EACRA,MACNwE,EAAW,EAAKlL,MAAhBkL,OACFC,EAAYC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEnC/K,EAAI,EAAGA,EAAIgL,EAAU9K,OAAQF,IAC9BgL,EAAUhL,GAAGM,OAASA,IAElB0K,EAAUhL,GAAGuG,MADH,KAAVA,EACqB,EAEA6E,SAAS7E,EAAO,KAMjD,EAAK1F,SAAS,CACVkK,OAAQC,KAlDG,EAsDnBK,WAAa,WACT,EAAK9L,MAAM+L,0BAA0B,EAAKzL,MAAMkL,SArDhD,EAAKQ,aAAe,CAChBR,OAAQ,CACJ,CAAEzK,KAAM,MAAOiG,MAAO,GACtB,CAAEjG,KAAM,MAAOiG,MAAO,GACtB,CAAEjG,KAAM,MAAOiG,MAAO,GACtB,CAAEjG,KAAM,MAAOiG,MAAO,GACtB,CAAEjG,KAAM,MAAOiG,MAAO,GACtB,CAAEjG,KAAM,MAAOiG,MAAO,KAI9B,EAAK1G,MAAQ,EAAK0L,aAbH,E,gEAkBf7J,QAAQC,IAAI,qBAAsBJ,KAAKhC,OACvCgC,KAAKV,SAAS,CACVkK,OAAQ,CACJ,CAAEzK,KAAM,MAAOiG,MAAOhF,KAAKhC,MAAMiM,sBAAX,KACtB,CAAElL,KAAM,MAAOiG,MAAOhF,KAAKhC,MAAMiM,sBAAX,KACtB,CAAElL,KAAM,MAAOiG,MAAOhF,KAAKhC,MAAMiM,sBAAX,KACtB,CAAElL,KAAM,MAAOiG,MAAOhF,KAAKhC,MAAMiM,sBAAX,KACtB,CAAElL,KAAM,MAAOiG,MAAOhF,KAAKhC,MAAMiM,sBAAX,KACtB,CAAElL,KAAM,MAAOiG,MAAOhF,KAAKhC,MAAMiM,sBAAX,U,+BAiCxB,IACET,EAAWxJ,KAAK1B,MAAhBkL,OAER,OAAQ,8BACJ,2BAAO/I,UAAW+I,EAAO,GAAGxE,MAAQ,IAAMwE,EAAO,GAAGxE,MAAQ,EAAI,sBAAwB,oBAAsBD,QAAQ,OAAtH,YACQ,2BAAOtE,UAAU,QACbqF,KAAK,SACL/G,KAAK,MACLkG,GAAG,MACHD,MAAOwE,EAAO,GAAGxE,MACjBE,SAAUlF,KAAK8E,aACfoF,QAASlK,KAAKsJ,cAC1B,2BAAO7I,UAAW+I,EAAO,GAAGxE,MAAQ,IAAMwE,EAAO,GAAGxE,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,gBACQ,2BAAOtE,UAAU,QACbqF,KAAK,SACL/G,KAAK,MACLkG,GAAG,MACHD,MAAOwE,EAAO,GAAGxE,MACjBE,SAAUlF,KAAK8E,aACfoF,QAASlK,KAAKsJ,cAC1B,2BAAO7I,UAAW+I,EAAO,GAAGxE,MAAQ,IAAMwE,EAAO,GAAGxE,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,aACQ,2BAAOtE,UAAU,QACbqF,KAAK,SACL/G,KAAK,MACLkG,GAAG,MACHD,MAAOwE,EAAO,GAAGxE,MACjBE,SAAUlF,KAAK8E,aACfoF,QAASlK,KAAKsJ,cAC1B,2BAAO7I,UAAW+I,EAAO,GAAGxE,MAAQ,IAAMwE,EAAO,GAAGxE,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,gBACQ,2BAAOtE,UAAU,QACbqF,KAAK,SACL/G,KAAK,MACLkG,GAAG,MACHD,MAAOwE,EAAO,GAAGxE,MACjBE,SAAUlF,KAAK8E,aACfoF,QAASlK,KAAKsJ,cAC1B,2BAAO7I,UAAW+I,EAAO,GAAGxE,MAAQ,IAAMwE,EAAO,GAAGxE,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,YACQ,2BAAOtE,UAAU,QACbqF,KAAK,SACL/G,KAAK,MACLkG,GAAG,MACHD,MAAOwE,EAAO,GAAGxE,MACjBE,SAAUlF,KAAK8E,aACfoF,QAASlK,KAAKsJ,cAC1B,2BAAO7I,UAAW+I,EAAO,GAAGxE,MAAQ,IAAMwE,EAAO,GAAGxE,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,UACQ,2BAAOtE,UAAU,QACbqF,KAAK,SACL/G,KAAK,MACLkG,GAAG,MACHD,MAAOwE,EAAO,GAAGxE,MACjBE,SAAUlF,KAAK8E,aACfoF,QAASlK,KAAKsJ,cAClB,2BAAOxD,KAAK,SAASd,MAAM,SAAStE,QAASV,KAAK8J,kB,GAhHtC3I,aCFjB,SAASgJ,EAAeC,GAMnC,IALA,IAEIC,EAAe,EACfC,EAAgB,EAChBC,EAAqB,GAChB9L,EAAI,EAAGA,EALK,EAKeA,IAChC4L,EAAeG,KAAKC,MAAOD,KAAKE,SAAWN,EAAU,GACrDG,EAAmB5J,KAAK0J,GAE5BE,EAAmBI,OACnBJ,EAAmBK,OAAO,EAAGC,GAC7B,IAAK,IAAItK,EAAI,EAAGA,EAAIgK,EAAmB5L,OAAQ4B,IAC3C+J,GAAiBC,EAAmBhK,GAExC,OAAO+J,E,ICVUQ,E,kDACjB,WAAY9M,GAAQ,IAAD,8BACf,cAAMA,IA6BV+M,mBAAqB,WAMjB,IANuB,IAGfvH,EAAU,EAAKlF,MAAM0M,cAArBxH,MACAY,EAAY,EAAK9F,MAAM0M,cAAvB5G,QACJ4G,EAAgB,GACXzK,EAAI,EAAGA,EAAIiD,EAAOjD,IAAK,CAE5ByK,EADc5G,EAAQ7D,GAAGuC,OACA,EAE7B,EAAKxD,SAAS,CAAE2K,sBAAuBe,KAxCxB,EAiHnBjB,0BAA4B,SAACkB,GAIzB,IAJuC,IAEnCzB,EAD8B,EAAKlL,MAA/B2L,sBAEJiB,EAAW,GACNzM,EAAI,EAAGA,EAAIwM,EAAUtM,OAAQF,IAC9BwM,EAAUxM,GAAGuG,MAAQ,GAAKiG,EAAUxM,GAAGuG,MAAQ,GAC/CkG,EAASvK,KAAKsK,EAAUxM,GAAGM,OAE3ByK,EAAOyB,EAAUxM,GAAGM,MAAQ8K,SAASoB,EAAUxM,GAAGuG,MAAO,IACzD,EAAK1F,SAAS,CAAE2K,sBAAuBT,KAG/C,GAAI0B,EAASvM,OAAS,EAAG,CAErB,IADA,IAAIwM,EAAc,0DACT3K,EAAI,EAAGA,EAAI0K,EAASvM,OAAQ6B,IAC7BA,EAAI0K,EAASvM,OAAS,EACtBwM,GAAeD,EAAS1K,GAAK,KAE7B2K,GAAeD,EAAS1K,GAGhC2K,GAAe,IACf,EAAKnN,MAAMc,mBAAmBqM,KArIlC,EAAK7M,MAAQ,CACT0M,cAAe,GACfI,kBAAmB,GACnBnB,sBAAuB,GACvBoB,qBAAqB,GAEzB,EAAKC,SAAW,EAAKA,SAASvL,KAAd,gBARD,E,gEAYXpC,EAAWqC,KAAKhC,MAAMgN,gBACtB7K,QAAQC,IAAI,+CACZJ,KAAKV,SAAS,CAAE0L,cAAehL,KAAKhC,MAAMgN,cAAeI,kBAAmBpL,KAAKhC,MAAMoN,kBAAmBnB,sBAAuBjK,KAAKhC,MAAMiM,uBAA0BjK,KAAK+K,wBAG3K5K,QAAQC,IAAI,6BACZJ,KAAKuL,oBAGTpL,QAAQC,IAAIJ,KAAKhC,S,6CAIjBgC,KAAKhC,MAAMwN,iBAAiBxL,KAAK1B,MAAM0M,eACvChL,KAAKhC,MAAMyN,qBAAqBzL,KAAK1B,MAAM8M,mBAC3CpL,KAAKhC,MAAM0N,yBAAyB1L,KAAK1B,MAAM2L,yB,yCAgB/B,IAAD,OACTrG,EAAM,+BACZC,MAAMD,EAAM,kBACPE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,SAAS,CAAE0L,cAAejH,GAAU,EAAKT,QAAQS,OACvEE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,6BAA+BN,Q,8BAG7DO,GAAO,IAAD,OACVhE,QAAQC,IAAI+D,GAGZ,IADA,IACS1F,EAAI,EAAGA,EAAI0F,EAAKC,QAAQzF,OAAQF,IACrCoF,MAFQ,0BAEIM,EAAKC,QAAQ3F,GAAGmF,KACvBE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKzE,UAAS,SAAChB,GAAD,MAAY,CAAE8M,kBAAkB,GAAD,mBAAM9M,EAAM8M,mBAAZ,CAA+BrH,OAAY,EAAKgH,2B,qCAI3G,IAAD,EAC0C/K,KAAK1B,MAAlD8M,EADG,EACHA,kBAAmBnB,EADhB,EACgBA,sBADhB,EAE6BjK,KAAKhC,MAArCuH,EAFG,EAEHA,aAAcnH,EAFX,EAEWA,cAElBsI,EAAQ,EAERiF,EAAe,GA4BnB,OA3BoBP,EAAkB9K,KAAI,SAACsL,GAGvC,GAFAD,EAAe,0BACfjF,EAAQuD,EAAsB2B,EAAQ9I,OAClCnF,EAAWS,GACX,IAAK,IAAIqB,EAAI,EAAGA,EAAIrB,EAAckJ,cAAc3I,OAAQc,IAChDmM,EAAQ9I,QAAU1E,EAAckJ,cAAc7H,GAAGqD,QACjD6I,GAAgB,gBAI5B,GAAIhO,EAAW4H,GACX,IAAK,IAAI7F,EAAI,EAAGA,EAAI6F,EAAaiB,gBAAgB7H,OAAQe,IACjD6F,EAAaiB,gBAAgB9G,GAAG+G,cAAc3D,QAAU8I,EAAQ9I,QAChE6I,GAAgB,SAChBjF,EAAQuD,EAAsB2B,EAAQ9I,OAASyC,EAAaiB,gBAAgB9G,GAAGgH,OAI3F,OAAQ,yBAAKjG,UAAU,6DAA6D5C,IAAK+N,EAAQ9I,OACzF,yBAAKrC,UAAU,uDACX,4BAAKmL,EAAQC,YAEjB,yBAAKpL,UAAU,aACX,uBAAGA,UAAWkL,EAAc9N,IAAK+N,EAAQ9I,OAAQ4D,U,+BAO5DkF,GAIL,IAJe,IACPZ,EAAkBhL,KAAK1B,MAAvB0M,cAEJxB,EAD8BxJ,KAAK1B,MAA/B2L,sBAECxL,EAAI,EAAGA,EAAIuM,EAAcxH,MAAO/E,IACrC,GAAIuM,EAAc5G,QAAQ3F,GAAGqE,QAAU8I,EAAS,CAC5CpC,EAAOoC,GAAWzB,EAAe,GACjCnK,KAAKV,SAAS,CAAE2K,sBAAuBT,IACvC,S,4CAiCRxJ,KAAKV,UAAS,SAAAhB,GAAK,MAAK,CACpB+M,qBAAsB/M,EAAM+M,0B,gCAIzB,IAAD,OAEFxK,EAD0Bb,KAAK1B,MAA3B8M,kBACwB9K,KAAI,SAACqL,EAAc7I,GAC/C,OAAQ,4BAAQpC,QAAS,kBAAM,EAAK4K,SAASK,EAAa7I,QAAQrC,UAAU,6CAA6CqF,KAAK,SAASjI,IAAKiF,GAAQ6I,EAAaE,cAGrK,OAAQ,yBAAKpL,UAAU,2BAA2BI,K,+BAI5C,IAAD,OACEwK,EAAwBrL,KAAK1B,MAA7B+M,oBAEP,OAAQ,yBAAK5K,UAAU,oBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,eAAd,uBAER,yBAAKA,UAAU,OAAOT,KAAK8L,gBAC3B,yBAAKrL,UAAU,OACX,yBAAKA,UAAU,qCACV4K,EAAsB,kBAAC,EAAD,CAAmBtB,0BAA2B/J,KAAK+J,0BAA2BE,sBAAuBjK,KAAK1B,MAAM2L,wBAA4BjK,KAAKa,UACxK,4BAAQH,QAAS,kBAAM,EAAKqL,uBAAuBtL,UAAU,6CAA6C4K,EAAsB,aAAe,gBAAwB,oC,GAvKpJlK,aC0C5B6K,E,kDApCX,WAAYhO,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,GAFE,E,qDAiBf,OADuB0B,KAAKhC,MAApBiO,YAEJ,IAAK,QACD,OAAQ,kBAAC,EAAUjM,KAAKhC,OAC5B,IAAK,UACD,OAAQ,kBAAC,EAAYgC,KAAKhC,OAC9B,IAAK,gBACD,OAAQ,kBAAC,EAAuBgC,KAAKhC,OACzC,IAAK,SACD,OAAQ,kBAAC,EAAgBgC,KAAKhC,OAClC,IAAK,iBACD,OAAQ,kBAAC,EAAkBgC,KAAKhC,OACpC,QACI,OAAQ,yBAAKyC,UAAU,gCAAf,+B,GA9BAU,aCiCT+K,E,kDAtCX,WAAYlO,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,GAFE,E,gEAWf,IAAM2N,EAAajM,KAAKhC,MAAMiO,WACxBE,EAAuBnM,KAAKhC,MAAMmO,qBAClC3D,EAAWxI,KAAKhC,MAAMwK,SAS5B,OAPiB2D,EAAqB7L,KAAI,SAACR,EAAUgD,GACjD,OAAImJ,IAAenM,EACP,4BAAQgG,KAAK,SAASrF,UAAU,iCAAiCiF,SAAS,KAAK0G,gBAAc,OAAOvO,IAAKiF,GAAQhD,GAEjH,4BAAQgG,KAAK,SAASpF,QAAS,WAAQ8H,EAAS1I,IAAcW,UAAU,+BAA+B5C,IAAKiF,GAAQhD,Q,+BAQpI,OAAQ,yBAAKW,UAAU,uCAAuCwE,GAAG,+BAC7D,4BAAQxE,UAAU,qCAAqCqF,KAAK,SAASc,cAAY,WAAWC,cAAY,qBAAqBwF,gBAAc,oBAAoBC,gBAAc,QAAQtG,aAAW,qBAC5L,0BAAMvF,UAAU,+BAEpB,yBAAKA,UAAU,kCAAkCwE,GAAG,qBAC/CjF,KAAKuM,0B,GAjCGpL,aCYVqL,EAdG,SAACxO,GAGf,IAAIyO,EAAW,yBAAKhM,UAAU,MAAMwE,GAAG,UAQvC,OAPIjH,EAAM0O,aAAa/N,OAAS,IAC5B8N,EAAW,yBAAKhM,UAAU,MAAMwE,GAAG,SAC/B,yBAAKxE,UAAU,mBACVzC,EAAM0O,gBAIXD,GCoOGE,E,kDAvOX,WAAY3O,GAAQ,IAAD,8BACf,cAAMA,IAqDVc,mBAAqB,SAACD,GAClB,EAAKS,SAAS,CAAEoN,aAAc7N,GAAW,EAAK+N,gBAvD/B,EA0DnBA,YAAc,WACV,IAAMC,EAAYC,SAASC,eAAe,SAI1CC,YAAW,WACP,IAAIC,EAAOC,aAAY,WACdL,EAAUM,MAAMC,UAClBP,EAAUM,MAAMC,QAAU,GAEzBP,EAAUM,MAAMC,QAAU,EAC1BP,EAAUM,MAAMC,SAAW,IAE3BC,cAAcJ,KAEnB,MACJ,MACH,EAAK3N,SAAS,CAAEoN,aAAc,KAC9BG,EAAUM,MAAMC,QAAU,GA5EX,EAgFnB1J,UAAY,SAAClC,GACT,EAAKlC,SAAS,CAAEkC,OAAQA,KAjFT,EAoFnBmC,cAAgB,SAACP,GACb,EAAK9D,SAAS,CAAE8D,WAAYA,KArFb,EAwFnBhB,iBAAmB,SAACd,GAChB,EAAKhC,SAAS,CAAEgO,cAAehM,KAzFhB,EA4FnBG,gBAAkB,SAACD,GACf,EAAKlC,SAAS,CAAEiC,aAAcC,KA7Ff,EAgGnBiD,iBAAmB,SAAC8I,GAChB,EAAKjO,SAAS,CAAE4C,WAAYqL,KAjGb,EAoGnB/E,SAAW,SAAC1I,GACR,EAAKR,SAAS,CAAE2M,WAAYnM,KArGb,EAwGnBqK,eAAiB,SAACC,GAMd,IALA,IAEIC,EAAe,EACfC,EAAgB,EAChBC,EAAqB,GAChB9L,EAAI,EAAGA,EALK,EAKeA,IAChC4L,EAAeG,KAAKC,MAAOD,KAAKE,SAAWN,EAAU,GACrDG,EAAmB5J,KAAK0J,GAE5BE,EAAmBI,OACnBJ,EAAmBK,OAAO,EAAGC,GAC7B,IAAK,IAAItK,EAAI,EAAGA,EAAIgK,EAAmB5L,OAAQ4B,IAC3C+J,GAAiBC,EAAmBhK,GAExC,OAAO+J,GAvHQ,EAyInBkD,sBAAwB,SAACpO,GACrB,EAAKE,SAAS,CAAEF,cAAeA,KA1IhB,EA6InBG,iBAAmB,SAACkO,EAAOlP,GACvB,EAAKe,SAAS,CACVF,cAAeqO,EACfpP,oBAAqBE,KAhJV,EAoJnBmP,oBAAsB,SAACtO,EAAeb,GAClC,EAAKe,SAAS,CACVF,cAAeA,EACfuO,qBAAsBpP,KAvJX,EA2JnBmN,yBAA2B,SAACzB,GACxB,EAAK3K,SAAS,CAAE2K,sBAAuBA,KA5JxB,EAgKnBuB,iBAAmB,SAACR,GAChB,EAAK1L,SAAS,CAAE0L,cAAeA,KAjKhB,EAoKnBS,qBAAuB,SAACL,GACpB,EAAK9L,SAAS,CAAE8L,kBAAmBA,KAnKnC,EAAK9M,MAAQ,CACTsP,SAAU,WACV3D,sBAAuB,GACvBe,cAAe,GACfI,kBAAmB,GACnBpI,UAAW,GACXmJ,qBAAsB,CAAC,QAAS,UAAW,iBAAkB,gBAAiB,UAC9EF,WAAY,QACZ7N,cAAe,GACfmH,aAAc,GACdnG,cAAe,GACfuO,qBAAsB,GACtBtP,oBAAqB,GACrBkD,aAAc,GACdW,WAAY,GACZoL,cAAe,GACfZ,aAAc,GACdlL,OAAQ,GACR4B,WAAY,GACZqB,iBAAkB,EAAKA,iBACvB3F,mBAAoB,EAAKA,mBACzBsD,iBAAkB,EAAKA,iBACvB7C,iBAAkB,EAAKA,iBACvBmM,yBAA0B,EAAKA,yBAC/B8B,sBAAuB,EAAKA,sBAC5BE,oBAAqB,EAAKA,oBAC1BjM,gBAAiB,EAAKA,gBACtBiC,UAAW,EAAKA,UAChBC,cAAe,EAAKA,cACpB6H,iBAAkB,EAAKA,iBACvBC,qBAAsB,EAAKA,sBAQ/B,EAAKlD,QAAU,EAAKA,QAAQxI,KAAb,gBACf,EAAKmJ,SAAW,EAAKA,SAASnJ,KAAd,gBAChB,EAAKqJ,aAAe,EAAKA,aAAarJ,KAAlB,gBA1CL,E,+IA0HX8N,GACJ1N,QAAQC,IAAI,gBACZJ,KAAKV,SAAS,CAAEiG,aAAcsI,M,+BAGzBC,GACL9N,KAAKV,SAAS,CAAElB,cAAe0P,EAAavM,aAAc,GAAI+L,cAAe,GAAIlO,cAAe0O,EAAY1O,cAAef,oBAAqB,GAAImD,OAAQ,GAAI4B,WAAY,O,mCAiDnKN,EAAOf,GAAe,IAAD,OAE7B5B,QAAQC,IAAI,iBAGbyD,MAAMD,uCAAwBd,EAAQ,WAAaf,GAC9C+B,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACF,EAAKzE,SAAS,CACV0D,UAAWe,S,+BAQlB,MAGmC/D,KAAK1B,MAArCiH,EAHH,EAGGA,aAAcnH,EAHjB,EAGiBA,cAEtB,OAAQ,yBAAK6G,GAAG,WAAWxE,UAAU,mBACjC,kBAAC,EAAD,CAAWiM,aAAc1M,KAAK1B,MAAMoO,eACpC,yBAAKjM,UAAU,OACX,yBAAKA,UAAU,qBAAqBwE,GAAG,iBACnC,wBAAIxE,UAAU,OACT9C,EAAW4H,GAAgBA,EAAaxG,KAAO,KAChD,mCACCpB,EAAWS,GAAiBA,EAAcW,KAAO,QAI9D,yBAAK0B,UAAU,OACX,kBAAC,EAAD,iBAAeT,KAAK1B,MAAW0B,KAAKhC,MAApC,CAA2CoL,aAAcpJ,KAAKoJ,aAAcb,QAASvI,KAAKuI,QAASC,SAAUxI,KAAKwI,SAAUU,SAAUlJ,KAAKkJ,SAAUa,0BAA2B/J,KAAK+J,0BAA2BuB,SAAUtL,KAAKsL,aAEnO,yBAAK7K,UAAU,OACX,kBAAC,EAAD,iBAAgBT,KAAK1B,MAAW0B,KAAKhC,MAArC,CAA4CwK,SAAUxI,KAAKwI,kB,GAvN7CrH,aCiKT4M,E,kDACjB,WAAY/P,GAAQ,IAAD,8BACf,cAAMA,IAiIVgQ,mBAAqB,WACjB,EAAK1O,UAAS,SAAAhB,GAAK,MAAK,CACpB2P,OAAQ3P,EAAM2P,WApIH,EAwInB5F,SAAW,SAACH,GACR,EAAK5I,SAAS,CAAE4I,MAAOA,KAzIR,EA4InBI,aAAe,SAACV,GACZ,EAAKtI,SAAS,CAAEsI,UAAWA,KA7IZ,EAgJnBoB,WAAa,SAACH,GACV,EAAKvJ,SAAS,CAACuJ,QAASA,KAjJT,EAoJnBI,eAAiB,SAACN,GACd,EAAKrJ,SAAS,CAACqJ,YAAaA,KAnJ5B,EAAKrK,MAAQ,CACT4J,MAAO,GACPN,UAAW,GACXiB,QAAS,GACTF,YAAa,GAEbuF,SAAU,GACVC,aAAc,GAEdF,OAAO,EACPG,OAAO,EACP/F,SAAU,EAAKA,SACfC,aAAc,EAAKA,aACnBU,WAAY,EAAKA,WACjBC,eAAgB,EAAKA,gBAKzB,EAAK3F,QAAU,EAAKA,QAAQvD,KAAb,gBAGf,EAAKiO,mBAAqB,EAAKA,mBAAmBjO,KAAxB,gBAxBX,E,gEAiCfC,KAAKV,SAAS,CAAE8O,OAAO,M,8CAIHxK,GACpB,OAAOyK,QAAQC,IAAI,CACnBtO,KAAK+I,WAAWnF,GAChB5D,KAAKuL,iBAAiB3H,GACtB5D,KAAKqD,UAAUO,GACf5D,KAAKuO,YAAY3K,KAAQE,MAAK,YAAwC,IAAD,mBACjE,MAAO,CAAEkH,cADwD,KACzCxJ,OADyC,KACjC0M,SADiC,W,uCAMxDrF,EAASmC,EAAexJ,EAAQ0M,GAAW,IAAD,OACvDG,QAAQC,IAAI,CACZtO,KAAKoJ,aAAaP,EAAS,GAC3B7I,KAAKsD,QAAQ0H,EAAe,kBAC5BhL,KAAKsD,QAAQ9B,EAAQ,UACrBxB,KAAKsD,QAAQ4K,EAAU,cACpBpK,MAAK,WAAQ,EAAKxE,SAAS,CAAE8O,OAAO,S,uCAM1BxK,GAAM,IAAD,OAClB,OAAOC,MAAMD,EAAM,kBACdE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAwD,OAA5C,EAAKzE,SAAS,CAAE0L,cAAejH,IAAoBA,KACpEE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,6BAA+BN,Q,gCAG3DA,GAAM,IAAD,OACX,OAAOC,MAAMD,EAAM,UACdE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAiD,OAArC,EAAKzE,SAAS,CAAEkC,OAAQuC,IAAoBA,KAC7DE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,sBAAwBN,Q,kCAGlDA,GAAM,IAAD,OACb,OAAOC,MAAMD,EAAM,YACdE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAkD,OAAtC,EAAKzE,SAAS,CAAE4O,SAAUnK,IAAmBA,KAC9DE,OAAM,SAAAC,GAAO/D,QAAQC,IAAI8D,EAAI,wBAA0BN,Q,8BAgBxDO,EAAMrE,GAGV,IAFA,IAAIwF,EAAO,GAEF7G,EAAI,EAAGA,EAAI0F,EAAKC,QAAQzF,OAAQF,IACrC4P,QAAQG,QAAQ3K,MAFR,0BAEoBM,EAAKC,QAAQ3F,GAAGmF,MACvCE,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAYuB,EAAK3E,KAAKoD,MAGpC,OAAQjE,GAIJ,IAAK,UACDE,KAAKV,SAAS,CAAEqJ,YAAarD,IAC7B,MACJ,IAAK,iBACDtF,KAAKV,SAAS,CAAE8L,kBAAmB9F,IACnC,MACJ,IAAK,SACDtF,KAAKV,SAAS,CAAE8D,WAAYkC,IAC5B,MACJ,IAAK,WACDtF,KAAKV,SAAS,CAAE6O,aAAc7I,O,+BAiDtC,OAFkBtF,KAAK1B,MAAf2P,MAYI,kBAAC,EAAoBjO,KAAK1B,OAT1B,yBAAKmC,UAAU,mBACnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBACX,uCACCT,KAAK1B,MAAM8P,MAAQ,4BAAQ1N,QAASV,KAAKgO,mBAAoBvN,UAAU,0BAApD,uBAA4G,oD,GA5KvHU,a,8BCjKjCsN,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,W","file":"static/js/main.29d87a5d.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //   console.log(\"constructor() \", props);\r\n        this.state = {\r\n            isClassSelected: false,\r\n            proficiencies: [],\r\n            proficienciesChosen: [],\r\n            category: 0,\r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected } = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n            this.setState({ isClassSelected: true, });\r\n\r\n        }\r\n    }\r\n\r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props;\r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = [];\r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }\r\n    }\r\n\r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean up\r\n        const { classSelected } = this.props;\r\n        // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {\r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    proficienciesToChooseFrom(category) {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = [];\r\n        console.log(classSelected);\r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency) => {\r\n                for (var j = 0; j < proficiencies.length; j++) {\r\n                    for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                        if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                            return (<button className='btn-sm col-6 btn-primary' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                        }\r\n                    }\r\n                }\r\n                return (<button className='btn-sm col-6 btn-secondary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n            });\r\n            chooseFrom.push(chooseProficiencies);\r\n        }\r\n        return (chooseFrom[category]);\r\n    }\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ category: newCategory, });\r\n    }\r\n\r\n    proficienciesNavigation() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let buttons = [];\r\n        for (var a = 0; a < classSelected.proficiency_choices.length; a++) {\r\n            let newCategory = a;\r\n            let check = proficienciesChosen[newCategory]; //I have to check because this comes through undefined the very first time this function runs, need to figure out a better solution.\r\n            let num;\r\n            if (check === undefined) {\r\n                num = 0;\r\n            } else {\r\n                num = proficienciesChosen[newCategory].length;\r\n            }\r\n            if (category === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-secondary' onClick={() => this.setNavigationCategory(newCategory)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        const { isClassSelected } = this.state; //this may need to be changed to not confuse with the object 'classSelected'\r\n        return (isClassSelected ? <div className='col-12 text-center selection'>\r\n            <div className=\"col-12 selectionTitle\">\r\n                <h3>{classSelected.name} proficiencies</h3>\r\n            </div>\r\n            <div className=\"card border-dark mb-3 \">\r\n                <div className=\"card-header text-white bg-dark text-center\">\r\n                    {this.proficienciesNavigation()}\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {this.proficienciesToChooseFrom(category)}\r\n                </div>\r\n            </div>\r\n        </div> : <div className='col-12 text-center selection'><h3 className='selectionTitle'>You must choose a class to select your proficiencies.</h3></div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React, { Component } from 'react';\r\nimport isSelected from './helper/helper-functions';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],\r\n            levelData: {},\r\n            navigationCategory: 0,\r\n            selected: false, \r\n            spellBook: {},\r\n            spells: {},\r\n            spellsInfo: [],            \r\n        };\r\n        this.spellSlots = this.spellSlots.bind(this);\r\n        this.getSpells = this.getSpells.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);      \r\n    }\r\n\r\n    componentDidMount() {   \r\n        if (isSelected(this.props.classSelected) && this.props.classSelected.spellcasting !== undefined) {\r\n            this.setState({ selected: true, });\r\n            \r\n            // character level: 1\r\n            if (this.props.spellsInfo.length === this.props.spells.count) {\r\n                console.log(\"setting spells from props\")\r\n                this.setState({ spells: this.props.spells, spellsInfo: this.props.spellsInfo, })\r\n                this.spellSlots();\r\n                this.setClassSpells(1, this.props.spellsInfo);\r\n            } else {\r\n                console.log(\"setting spells from api\")\r\n                this.getSpells();\r\n                this.spellSlots();\r\n             //   this.setClassSpells(1);\r\n            }\r\n        } else {\r\n            console.log(\"not a caster\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.spellsInfo.length === this.state.spells.count) {\r\n            this.props.setSpells(this.state.spells)\r\n            this.props.setSpellsInfo(this.state.spellsInfo)\r\n            console.log(\"checked it\");\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    getSpells() {\r\n        const { classSelected } = this.props;\r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + classSelected.spells)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState({ spells: result, }, this.getInfo(result)) })\r\n                .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n\r\n    getInfo(data) {\r\n        const { classSelected } = this.props;\r\n        console.log(classSelected.name, ' spells ', data);\r\n        // let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ spellsInfo: [...state.spellsInfo, result], })); if (this.state.spellsInfo.length === this.state.spells.count) { this.setClassSpells(1, this.state.spellsInfo) } /* console.log('getInfo() for spells request: ', result)*/ })\r\n                .catch(e => { console.log(e + \" -- getInfo() for spells -- \" + url); });\r\n        }\r\n       \r\n       // this.setClassSpells(1);\r\n    }\r\n\r\n    setClassSpells(level, spellsInfoData) {\r\n        const { classSelected } = this.props;\r\n        const spellsInfo = spellsInfoData;\r\n     //   const { spellsInfo } = this.state;\r\n        let spells = [];\r\n\r\n        console.log('setClassSpells ', spellsInfo)\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                       if (spellsInfo[i].level <= level) {\r\n                           spells.push(spellsInfo[i])\r\n                       }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default:\r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //getLevelData(currentLevel) { //\r\n    //    const { classSelected } = this.props; \r\n    //   // console.log(\"getLeveData()\");\r\n    //    //let level = {}; \r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    Promise.resolve(fetch(url + \"/api/classes/\" + classSelected.index + \"/levels/\" + currentLevel))\r\n    //        .then(result => result.json())\r\n    //        .then(result => {\r\n    //            this.setState({\r\n    //                levelData: result,\r\n    //            }, this.props.setLevelData(result));\r\n    //        });\r\n        \r\n        \r\n    //}\r\n\r\n    spellSlots() { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;\r\n        let slotsAvailable = [];\r\n        console.log(\"spellSlots(), levelData: \", levelData)\r\n        if (levelData.spellcasting !== undefined) {\r\n            if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {        \r\n                for (var i = 1; i < 6; i++) {\r\n                    if (levelData.spellcasting['spell_slots_level_' + i] !== 0) {\r\n                        slotsAvailable[i] = levelData.spellcasting['spell_slots_level_' + i];\r\n                        console.log(classSelected.name, \" spell slots available: \", slotsAvailable[i])\r\n                    }\r\n                }\r\n            } else {\r\n                slotsAvailable[0] = levelData.spellcasting.cantrips_known;\r\n                for (var k = 1; k < 10; k++) {\r\n                    if (levelData.spellcasting['spell_slots_level_' + k] !== 0) {\r\n                        slotsAvailable[k] = levelData.spellcasting['spell_slots_level_' + k];\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n        console.log(\"Slots available \", slotsAvailable);\r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n      \r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => { //this will only work for level one character creation. Works for this app as its for level one only. \r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => { // DUDE! this needs some loving. refactor this.\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        \r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    \r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n        let spells = []\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ navigationCategory: newCategory, });\r\n    }\r\n\r\n    spellsNavigation() {\r\n      //  const { spellsChosen } = this.props;\r\n        const { navigationCategory } = this.state;\r\n        const { spellSlots } = this.state;\r\n        let buttons = [];\r\n        let spellsSlots = this.spellsChosenByLevel();\r\n        for (var a = 0; a < spellSlots.length; a++) {\r\n            let newCategory = a;\r\n            let num;\r\n            num = spellsSlots[a];            \r\n            if (navigationCategory === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={a}> Choose: {spellSlots[a] - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-seconday' onClick={() => this.setNavigationCategory(newCategory)} key={a}>Choose: {spellSlots[a] - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = [];       \r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            spellChoices[slotLevel] = slotSpells.map((spell) => {\r\n                let classNames = \"btn btn-sm btn-block \";\r\n                if (spell.damage !== undefined) { // Is there a better check for this?\r\n                        if (spell.damage.damage_type !== undefined) {\r\n                            classNames += spell.damage.damage_type.index + \" \";\r\n                        }\r\n                    }\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += \"btn-secondary \";\r\n                        return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                }\r\n                for (var b = 0; b < spellsChosen.length; b++) {\r\n                    let chosen = b;\r\n                    if (spellsChosen[chosen].name === spell.name) {  \r\n                        classNames += \"btn-primary \";\r\n                        return (<button className={classNames} onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                    } \r\n                }\r\n                classNames += 'btn-secondary ';\r\n                return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n            });\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='no-known-spells'><h6>You have no spells to choose from at level 1</h6></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='cantrips'><h6>Cantrips</h6>{spellChoices[b]}</div>\r\n                }                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='col-12' key={keyForThee + b}><h6>Level {b} spells</h6>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {        \r\n        const { navigationCategory, selected,  } = this.state; \r\n        const spells = this.displaySpells();\r\n        console.log(\"Render spells, \", spells[0]);\r\n       // const navigation = this.spellsNavigation();\r\n        return ( selected ?\r\n            <div className='col-12 text-center selection'>\r\n                <div className=\"card border-dark mb-3 \">\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        {this.spellsNavigation()}\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        {spells[navigationCategory]}\r\n                    </div>\r\n                </div>\r\n            </div> :\r\n            <div className='col-12 text-center selection'>\r\n           <h3>Choose a class to select your spells.</h3>\r\n                </div>);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default ClassSpells;","import React from 'react'\r\n\r\nexport default function SearchBar({ userValue, handleChange }) {\r\n    return (\r\n        <div className='col-7 text-center searchBar'>           \r\n            <label className='search-label col-4' htmlFor='searchBar'>Search:</label><input className='col-8' value={userValue} name='searchBar' id='searchBar' onChange={handleChange} />\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react'\r\n//import isSelected from './helper-functions.js'\r\n\r\nclass InfoModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            traits: [],\r\n        }       \r\n        this.getTraits = this.getTraits.bind(this);\r\n    }\r\n\r\n    componentDidMount() { // this is causing problems. need to be worked so it loads when user clicks. \r\n    //    console.log(\"did it mount?\");\r\n        this.getTraits(this.props.info);\r\n    }\r\n\r\n    getTraits(raceSelected) {\r\n        const url = 'https://www.dnd5eapi.co'\r\n        //let traitsInfo = [];\r\n        if (raceSelected.index === \"human\") {\r\n         //  console.log(\"Got to the humans\")\r\n        } else {\r\n            for (var a = 0; a < raceSelected.traits.length; a++) {\r\n                fetch(url + raceSelected.traits[a].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { this.setState((state) => ({ traits: [...state.traits, result]}))})\r\n                    .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n            }\r\n        }     \r\n    }\r\n\r\n    showTraits() {\r\n        const { traits } = this.state;    \r\n        let info = traits.map((trait) => {\r\n            return (<div key={'trait-'+trait.name}>\r\n                <h5>{trait.name}</h5>\r\n                <p>{trait.desc[0]}</p>\r\n            </div>)\r\n        });\r\n        return info;\r\n    }\r\n\r\n    render() {\r\n        const { traits } = this.state;\r\n        const { name } = this.props.info;\r\n        return (<div className='col-1 info-modal'>\r\n            <div className=\"modal fade\" id={'race-'+this.props.info.index} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"raceTraits\">{name} Traits</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {traits.length !== 0 ? this.showTraits() : \"Humans do not have racial traits\"}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default InfoModal","import React from 'react'\r\nimport InfoModal from './modal'\r\n\r\nexport default function SearchResults({ champions, select, category }) {\r\n   // console.log(champions)\r\n    let cards = [];\r\n    switch (category) {\r\n        case 'races':\r\n            cards = champions.map((race) => {\r\n                let bonuses = \"\";\r\n                for (var a = 0; a < race.ability_bonuses.length; a++) {\r\n                    bonuses += race.ability_bonuses[a].ability_score.name + \": \" + race.ability_bonuses[a].bonus + \" \";\r\n                }\r\n                let traits = [];\r\n                let target = '#race-' + race.index;\r\n                for (var b = 0; b < race.traits.length; b++) { //UI formatting commas and period. \r\n                    if (b !== race.traits.length-1) {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}, </span>);\r\n                    } else {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}. </span>);\r\n                    }\r\n                }\r\n                traits.push(<button className='btn btn-sm btn-primary'data-toggle=\"modal\" data-target={target} key='raceTraitsInfoButton'>?</button>)\r\n\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={race.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{race.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n                        <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n                        <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n                        <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n                        <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n                        <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n                        <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(race.index)}>Choose {race.name}</button>\r\n                        <InfoModal info={race} />\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break;\r\n        case 'classes':\r\n            cards = champions.map((championClass) => {\r\n                let proficiencies = \"\";\r\n                let count = 0;\r\n                proficiencies = championClass.proficiencies.map((prof) => {\r\n                    if (count === championClass.proficiencies.length - 1) {\r\n                        return (prof.name + \". \");\r\n                    }\r\n                    count++;\r\n                    return (prof.name + \", \");\r\n                });\r\n                let savingThrows = '';\r\n                savingThrows = championClass.saving_throws.map((savingThrow) => {\r\n                    return (savingThrow.name + \" \")\r\n                });\r\n\r\n                //let bonuses = this.abilityBonuses(race);\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={championClass.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{championClass.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Hit die:</strong> {championClass.hit_die}</p>\r\n                        <p className=\"card-text\"><strong>Starting proficiencies:</strong> {proficiencies} </p>\r\n                        <p className=\"card-text\"><strong>Saving Throws:</strong> {savingThrows}</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(championClass.index)}>Choose {championClass.name}</button>\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break; \r\n        default:\r\n            break;\r\n    }\r\n    return (cards);\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\n//import InfoModal from '../helper/modal'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\n//export default class CharacterRace extends Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            raceSelected: {},\r\n//            searchResults: [],\r\n//            word: \"\",\r\n          \r\n//        }\r\n//        //this.buttons = this.buttons.bind(this);\r\n//        //this.selectRace = this.selectRace.bind(this);\r\n//        //this.abilityBonuses = this.abilityBonuses.bind(this);\r\n//        //this.raceCards = this.raceCards.bind(this);\r\n//        //this.raceCarousel = this.raceCarousel.bind(this);\r\n//        this.traits = this.traits.bind(this);\r\n//    }\r\n\r\n\r\n//    componentDidMount() {\r\n//        if (isSelected(this.props.raceSelected)) {\r\n//            this.setState({ raceSelected: this.props.raceSelected, });\r\n//        }\r\n//        console.log(this.props);\r\n//    }\r\n\r\n//    getRaces() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, },); return result })\r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n//    }\r\n\r\n//    selectRace(index) {\r\n//        const { racesInfo } = this.props;\r\n//        const { setRace } = this.props;\r\n//        for (let i = 0; i < racesInfo.length; i++) {\r\n//            if (racesInfo[i].index === index) {\r\n//                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n//                this.setState({ raceSelected: raceSelected[0] });\r\n//                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n//                console.log(raceSelected[0]);\r\n//                break;\r\n//            }\r\n//        }\r\n//    }   \r\n\r\n//    buttons() {\r\n//        const { races } = this.props;\r\n//        const { raceSelected } = this.state;        \r\n//        let raceButtons = races.results.map((race) => {\r\n//            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n//                return (<button className='btn btn-sm buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n//            }\r\n//            return (<button onClick={() => this.selectRace(race.index)} className='btn btn-sm selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n//        });\r\n//        return raceButtons;\r\n//    }\r\n\r\n//    abilityBonuses(characterRace) {        \r\n//        let bonuses = \"\"; \r\n//        for (var a = 0; a < characterRace.ability_bonuses.length; a++) {\r\n//            bonuses += characterRace.ability_bonuses[a].ability_score.name + \": \" + characterRace.ability_bonuses[a].bonus + \" \";\r\n//        }\r\n//        return (bonuses);\r\n//    }\r\n\r\n//    traits(characterRace) {\r\n//        let traits = [];        \r\n//        let target = '#race-' + characterRace.index;\r\n//        for (var a = 0; a < characterRace.traits.length; a++) {\r\n//            traits.push(<span data-toggle=\"modal\" data-target={target} key={characterRace.traits[a].name}>{characterRace.traits[a].name} </span>);\r\n//        }\r\n//        return (traits);\r\n//    }\r\n\r\n//    raceCards() {       \r\n//        const { racesInfo } = this.props;  \r\n//        //console.log(racesInfo);\r\n//        let raceCards = racesInfo.map((race, index) => {            \r\n//            let bonuses = this.abilityBonuses(race);\r\n//            let traits = this.traits(race);\r\n//            return (<div className=\"card border-dark mb-3 \" key={race.index}>\r\n//                <div className=\"card-header text-white bg-dark text-center\">\r\n//                         <h4>{race.name}</h4>\r\n//                        </div>\r\n//                <div className=\"card-body\">                           \r\n//                    <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n//                    <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n//                    <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n//                    <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n//                    <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n//                    <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n//                    <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n//                    <button className=\"btn btn-primary\" onClick={() => this.selectRace(race.index)}>Choose {race.name}</button>\r\n//                    <InfoModal info={race} />\r\n//                 </div>\r\n//               </div>);\r\n//        }); \r\n//        return (raceCards);\r\n//    }\r\n//   // <button type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">i</button>\r\n   \r\n//    searchRaces = (word) => {\r\n//        const { racesInfo } = this.props;\r\n//        this.setState({\r\n//            word: word,\r\n//        });\r\n//        let oldList = racesInfo.map((race) => {\r\n//            return race;\r\n//        });\r\n//        let newList = [];\r\n//        if (word !== \"\") {\r\n//            newList = oldList.filter(race => race.index.includes(word.toLowerCase())); \r\n//        //    console.log(oldList);\r\n//            this.setState({ searchResults: newList, });\r\n//        } else {\r\n//            console.log(newList);\r\n//            this.setState({ searchResults: oldList, });           \r\n//        }\r\n//    }\r\n\r\n\r\n//    render() {\r\n//        // let cards = this.raceCards();\r\n//        const { word } = this.state;\r\n//        const { searchResults } = this.state;\r\n//        return (<div className='selection col-12'>\r\n//            <h2 className=\"selectionTitle text-center\">Choose your Champions Race</h2>\r\n//            <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />\r\n//            {word !== \"\" ? <SearchResults champions={searchResults} /> : this.raceCards()}           \r\n//            </div>);\r\n//    }\r\n//}\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            raceSelected: {},\r\n            searchResults: [], \r\n            word: \"\",\r\n\r\n        }\r\n        this.selectRace = this.selectRace.bind(this);\r\n        this.getRaces = this.getRaces.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            this.setState({ raceSelected: this.props.raceSelected, });            \r\n        }\r\n        if (isSelected(this.props.races) && this.props.racesInfo.length === 9) {\r\n            this.setState({races: this.props.races, racesInfo: this.props.racesInfo,})\r\n        } else {\r\n            this.getRaces();\r\n        }\r\n      //  console.log(this.props);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n   //     console.log(\"Unmounting <Races />, races: \", this.state.races, \" racesInfo: \", this.state.racesInfo)\r\n        this.props.setRaces(this.state.races);\r\n        this.props.setRacesInfo(this.state.racesInfo);\r\n    }\r\n\r\n    getRaces() {\r\n     //   console.log(\"Getting Races\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, this.getInfo(result));})\r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n       // console.log(data);\r\n       // let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n           fetch(url + data.results[i].url)\r\n               .then(result => result.json())\r\n               .then(result => { this.setState((state) => ({ racesInfo: [...state.racesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectRace(index) {\r\n        const { racesInfo } = this.state;\r\n        const { setRace } = this.props; \r\n        const { navigate } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });                \r\n                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n                //console.log(raceSelected[0]);\r\n                navigate('Classes');\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   \r\n    searchRaces = (word) => {\r\n        const { racesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = racesInfo.map((race) => {\r\n            return race;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(race => race.index.includes(word.toLowerCase()));\r\n            //    console.log(oldList);\r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }  \r\n\r\n    render() {\r\n        // let cards = this.raceCards();\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { racesInfo } = this.state;\r\n        return (<div className='col-12 selection '>\r\n                <div className='row selectionTitle'>                   \r\n                <h5 className='col-5 text-center choose'>Choose a Race</h5>                \r\n                    <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />                   \r\n                </div>\r\n                <div className='row'>\r\n                    <SearchResults champions={word !== '' ? searchResults : racesInfo} category='races' select={this.selectRace} />\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            classesInfo: [],\r\n            classSelected: {},           \r\n            searchResults:[],\r\n            word: \"\",            \r\n        }\r\n        \r\n        this.selectClass = this.selectClass.bind(this);\r\n      //  this.classCards = this.classCards.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        }\r\n        if (isSelected(this.props.classes) && this.props.classesInfo.length === 12) {//needs better validation\r\n            this.setState({ classes: this.props.classes, classesInfo: this.props.classesInfo, })\r\n        } else {\r\n            this.getClasses();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.classesInfo.length === 12) {\r\n            this.props.setClasses(this.state.classes);\r\n            this.props.setClassesInfo(this.state.classesInfo);\r\n        }\r\n    }\r\n\r\n    getClasses() {\r\n       // console.log(\"Getting Classes\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, this.getInfo(result)); })\r\n            .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n\r\n    }\r\n\r\n    getInfo(data) {\r\n      //  console.log(data);\r\n       // let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ classesInfo: [...state.classesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.state;\r\n        const { setClass } = this.props;\r\n        const { navigate } = this.props;\r\n        console.log(\"hello\", classesInfo)\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], }, this.props.getLevelData(classSelected[0].index, 1));\r\n                setClass(classSelected[0]);\r\n                navigate('Ability-Scores');\r\n                break;\r\n            }\r\n        }        \r\n    } \r\n\r\n\r\n    //getLevelData(currentLevel, index) { //\r\n    //    //const { classSelected } = this.props;\r\n    //    // console.log(\"getLeveData()\");\r\n    //    //let level = {}; \r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    Promise.resolve(fetch(url + \"/api/classes/\" + index + \"/levels/\" + currentLevel))\r\n    //        .then(result => result.json())\r\n    //        .then(result => {\r\n    //            this.setState({\r\n    //                levelData: result,\r\n    //            }, this.props.setLevelData(result));\r\n    //        });\r\n\r\n\r\n    //}\r\n\r\n\r\n    searchClasses = (word) => {\r\n        const { classesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = classesInfo.map((characterClass) => {\r\n            return characterClass;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(characterClass => characterClass.index.includes(word.toLowerCase()));            \r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { classesInfo } = this.state;\r\n        return (<div className='col-12 selection'>\r\n                    <div className='row selectionTitle'>\r\n                        <h5 className='col-5 text-center choose'>Choose a Class</h5>\r\n                        <SearchBar value={word} handleChange={e => this.searchClasses(e.target.value)} />\r\n                    </div>\r\n                    <div className='row'>\r\n                        <SearchResults champions={word !== '' ? searchResults : classesInfo} category='classes' select={this.selectClass} />\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(\"AbilityScoresForm \", this.props);\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmitAbilityScores(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","export default function randomDiceRoll(maxNum) { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n    let totalDiceRolls = 5;\r\n    let totalRollsToKeep = 3;\r\n    let abilityPoint = 0;\r\n    let abilityPoints = 0;\r\n    let abilityPointsArray = [];\r\n    for (var i = 0; i < totalDiceRolls; i++) {\r\n        abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n        abilityPointsArray.push(abilityPoint);\r\n    }\r\n    abilityPointsArray.sort()\r\n    abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n    for (var j = 0; j < abilityPointsArray.length; j++) {\r\n        abilityPoints += abilityPointsArray[j];\r\n    }\r\n    return abilityPoints;\r\n}    ","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport AbilityScoresForm from '../helper/AbilityScoresForm'\r\nimport randomDiceRoll from '../helper/random-dice-roll'\r\n\r\nexport default class AbilityScores extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            abilityScoresSelected: {},\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.getScore = this.getScore.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.abilityScores)) {\r\n            console.log(\"this should happen any time after the first\")\r\n            this.setState({ abilityScores: this.props.abilityScores, abilityScoresInfo: this.props.abilityScoresInfo, abilityScoresSelected: this.props.abilityScoresSelected, }, this.abilityScoresSetup())\r\n            \r\n        } else {\r\n            console.log(\"this should happen second\")\r\n            this.getAbilityScores();\r\n           \r\n        }\r\n        console.log(this.props)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setAbilityScores(this.state.abilityScores);\r\n        this.props.setAbilityScoresInfo(this.state.abilityScoresInfo);\r\n        this.props.setAbilityScoresSelected(this.state.abilityScoresSelected);\r\n    }\r\n\r\n    abilityScoresSetup = () => {\r\n       // console.log(\"scores set up\", this.state.abilityScores)\r\n        //abilityScoresData \r\n        const { count } = this.state.abilityScores;\r\n        const { results } = this.state.abilityScores;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    getAbilityScores() {\r\n        const url = \"https://www.dnd5eapi.co/api/\"\r\n        fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result }, this.getInfo(result)) })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        console.log(data);\r\n        //let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ abilityScoresInfo: [...state.abilityScoresInfo, result] }), this.abilityScoresSetup()) });\r\n        }     \r\n    }\r\n\r\n    scoreDisplay() {\r\n        const { abilityScoresInfo, abilityScoresSelected } = this.state;\r\n        const { raceSelected, classSelected } = this.props;\r\n       // let bonuses, ability_bonuses = [];\r\n        let bonus = 0;\r\n\r\n        let abilityScore = ''\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            abilityScore = 'card-text abilityScore '\r\n            bonus = abilityScoresSelected[ability.index]          \r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += 'savingThrow '                      \r\n                    }\r\n                }\r\n            }\r\n            if (isSelected(raceSelected)) { \r\n                for (var b = 0; b < raceSelected.ability_bonuses.length; b++) {\r\n                    if (raceSelected.ability_bonuses[b].ability_score.index === ability.index) {                     \r\n                        abilityScore += 'bonus '\r\n                        bonus = abilityScoresSelected[ability.index] + raceSelected.ability_bonuses[b].bonus;\r\n                    } \r\n                }\r\n            }  \r\n            return (<div className=\"card border-dark mb-3 col-4 card-ability-score text-center\" key={ability.index}>\r\n                    <div className=\"card-header text-white bg-dark ability-score-header\">\r\n                        <h6>{ability.full_name}</h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className={abilityScore} key={ability.index}>{bonus}</p>\r\n                    </div>\r\n                </div>);\r\n        });\r\n        return (abilityScores);\r\n    }\r\n\r\n    getScore(ability) {        \r\n        const { abilityScores } = this.state;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = randomDiceRoll(6)\r\n                this.setState({ abilityScoresSelected: scores })\r\n                break;\r\n            }\r\n        }      \r\n    }\r\n\r\n\r\n    handleSubmitAbilityScores = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.props.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    buttons() {\r\n        const { abilityScoresInfo } = this.state;\r\n        let buttons = abilityScoresInfo.map((abilityScore, index) => {\r\n            return (<button onClick={() => this.getScore(abilityScore.index)} className='btn btn-primary ability-score-button col-5' type='button' key={index}>{abilityScore.full_name}</button>)\r\n        });\r\n\r\n        return (<div className='d-grid gap-2 d-md-block'>{buttons}</div>);\r\n\r\n    }\r\n\r\n    render() {\r\n        const {abilityScoresSwitch } = this.state;\r\n       \r\n        return (<div className='selection col-12'>\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"text-center\">Set ability scores</h3>                      \r\n                    </div>  \r\n                <div className='row'>{this.scoreDisplay()}</div>\r\n                <div className='row'>\r\n                    <div className='col-12 scoreSelection text-center'>\r\n                        {abilityScoresSwitch ? <AbilityScoresForm handleSubmitAbilityScores={this.handleSubmitAbilityScores} abilityScoresSelected={this.state.abilityScoresSelected} /> : this.buttons()}\r\n                        <button onClick={() => this.abilityScoreSwitchy()} className='btn btn-primary ability-score-switchy-btn'>{abilityScoresSwitch ? \"Auto fill \" : \"Manual fill \"}</button><br />\r\n                    </div>\r\n                </div>\r\n                </div>)\r\n    }\r\n}","import React, { Component } from 'react'\r\n//import AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './champion/Proficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport AbilityScores from './champion/AbilityScores'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component { //convert this to a function\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n      //      abilityScoresSwitch: false,\r\n        }\r\n     //   this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    //abilityScoreSwitchy() {\r\n    //    this.setState(state => ({\r\n    //        abilityScoresSwitch: !state.abilityScoresSwitch,\r\n    //    }));\r\n    //}\r\n\r\n    render() {       \r\n       // const { classSelected } = this.props;\r\n        const { navigation } = this.props;      \r\n        switch (navigation) {\r\n            case 'Races':\r\n                return (<Races {...this.props} />);           \r\n            case 'Classes':\r\n                return (<Classes {...this.props} />); \r\n            case 'Proficiencies':\r\n                return (<ClassProficiencies {...this.props} />);      \r\n            case 'Spells':\r\n                return (<ClassSpells {...this.props} />);\r\n            case 'Ability-Scores':\r\n                return (<AbilityScores {...this.props} />);               \r\n            default:\r\n                return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n        }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React, { Component } from 'react'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    navigationButtons() {\r\n        const navigation = this.props.navigation\r\n        const navigationCategories = this.props.navigationCategories\r\n        const navigate = this.props.navigate\r\n        // const classSelected = this.props.classSelected       \r\n        let navButtons = navigationCategories.map((category, index) => {\r\n            if (navigation === category) {\r\n                return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm  btn-dark btn-nav' key={index}>{category}</button>);\r\n            }\r\n        });\r\n        return (navButtons);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<nav className=\"navbar navbar-expand-lg navbar-light\" id=\"navigation-bottom-container\">\r\n            <button className=\"btn btn-sm navbar-toggler bg-light\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navigation-bottom\" aria-controls=\"navigation-bottom\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon col-2\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse col-10\" id=\"navigation-bottom\">\r\n                {this.navigationButtons()}\r\n            </div>\r\n        </nav>);\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n//import Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\nimport isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            champion: 'Champion', //add support: user being able to name their Champion. \r\n            abilityScoresSelected: {},\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            levelData: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},           \r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            spells: {},\r\n            spellsInfo: [],\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            setAbilityScoresSelected: this.setAbilityScoresSelected,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setChosenSpells: this.setChosenSpells,\r\n            setSpells: this.setSpells,\r\n            setSpellsInfo: this.setSpellsInfo,\r\n            setAbilityScores: this.setAbilityScores,\r\n            setAbilityScoresInfo: this.setAbilityScoresInfo,\r\n          \r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n     \r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spells: spells, });\r\n    }\r\n\r\n    setSpellsInfo = (spellsInfo) => {\r\n        this.setState({ spellsInfo: spellsInfo, });\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setChosenSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        console.log(\"and here????\")\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [], spells: {}, spellsInfo: [], });\r\n    }\r\n\r\n    //setLevelData = (dataObj) => {\r\n    //    console.log(dataObj)\r\n    //    //let levelDataObj = dataObj\r\n    //    this.setState({ levelData: dataObj, })\r\n    //} \r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n    \r\n    setAbilityScoresSelected = (abilityScoresSelected) => {\r\n        this.setState({ abilityScoresSelected: abilityScoresSelected, })\r\n    }\r\n\r\n\r\n    setAbilityScores = (abilityScores) => {\r\n        this.setState({ abilityScores: abilityScores })\r\n    }\r\n\r\n    setAbilityScoresInfo = (abilityScoresInfo) => {\r\n        this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    }\r\n\r\n    //setClasses = (classes) => {\r\n    //    this.setState({ classes: classes, })\r\n    //}\r\n\r\n    //setClassesInfo = (classesInfo) => {\r\n    //    this.setState({ classesInfo: classesInfo, })\r\n    //}\r\n\r\n   \r\n    getLevelData(index, currentLevel) { //\r\n        //const { classSelected } = this.props;\r\n         console.log(\"getLeveData()\");\r\n        //let level = {}; \r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + \"/api/classes/\" + index + \"/levels/\" + currentLevel)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    levelData: result,\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n\r\n       \r\n    render() {\r\n      //hacky way of displaying alert\r\n        //hacky way to put a space between race and class name, fix this. this messes with the total view height need to fix. \r\n        const { raceSelected, classSelected } = this.state;\r\n\r\n        return (<div id='creation' className='container-fluid'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <div className='col-12 text-center' id='characterType'>\r\n                    <h5 className='col'>\r\n                        {isSelected(raceSelected) ? raceSelected.name : null}\r\n                        <span> </span> \r\n                        {isSelected(classSelected) ? classSelected.name : null}\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} getLevelData={this.getLevelData} setRace={this.setRace} navigate={this.navigate} setClass={this.setClass} handleSubmitAbilityScores={this.handleSubmitAbilityScores} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>               \r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <Info {...this.state} {...this.props} />\r\n//</div>\r\n\r\n\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\n//export default class App extends Component { \r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {           \r\n//            races: {},\r\n//            racesInfo: new Array(0),           \r\n//            classes: {},\r\n//            classesInfo: new Array(0),\r\n//            abilityScores: {},\r\n//            abilityScoresInfo: [],\r\n//            spells: {},\r\n//            spellsInfo: [],\r\n//            features: {},\r\n//            featuresInfo: [],\r\n//            levelData: [],\r\n//            ready: false,\r\n//            enter: false,\r\n//        }\r\n//      //  this.state = this.initialState;\r\n//      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n//        this.getInfo = this.getInfo.bind(this);\r\n//        this.getLevelData = this.getLevelData.bind(this);\r\n//        //   this.getStuff = this.getStuff.bind(this);\r\n//        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n//    }\r\n\r\n//    componentDidMount() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        const promise = this.getCharacterInformation(url);\r\n//        promise.then((data) => {\r\n//            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n//        });\r\n//    }\r\n     \r\n\r\n//    getCharacterInformation(url) {\r\n//      return Promise.all([this.getRaces(url),\r\n//            this.getClasses(url),\r\n//            this.getAbilityScores(url),\r\n//            this.getSpells(url),\r\n//            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n//                return {races, classes, abilityScores, spells, features}\r\n//            });\r\n//    }\r\n\r\n\r\n//    getCharacterData(races, classes, abilityScores, spells, features) {\r\n//        Promise.all([this.getInfo(races, 'races'),\r\n//            this.getInfo(classes, 'classes'),\r\n//            this.getLevelData(classes, 1),\r\n//            this.getInfo(abilityScores, 'ability-scores'),\r\n//            this.getInfo(spells, 'spells'),\r\n//            this.getInfo(features, 'features'),\r\n//        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n//    }\r\n\r\n//    getRaces(url) {        \r\n//       return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, }, ); return result })          \r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n//    }\r\n\r\n//    getClasses(url) {\r\n//       return fetch(url + 'classes')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n//           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n//    }\r\n\r\n//    getAbilityScores(url) {\r\n//      return fetch(url + 'ability-scores')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n//    }\r\n\r\n//    getSpells(url) {\r\n//      return fetch(url + 'spells')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ spells: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n//    }\r\n\r\n//    getFeatures(url) {      \r\n//       return fetch(url + 'features')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ features: result }, ); return result  })\r\n//           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n//    }\r\n\r\n//    getLevelData(data, currentLevel) {       \r\n//        let levels = []\r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n//                .then(result => result.json())\r\n//                .then(result => { levels.push(result) });            \r\n//        }        \r\n//        this.setState({\r\n//            levelData: levels,\r\n//        });\r\n//    }\r\n\r\n//    getInfo(data, category) {\r\n//        let info = []    \r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + data.results[i].url))\r\n//                .then(result => result.json())\r\n//                .then(result => { info.push(result) });\r\n//        }\r\n//       // console.log(info);   \r\n//        switch(category) {\r\n//            case 'races':\r\n//                this.setState({ racesInfo: info, });\r\n//                break;\r\n//            case 'classes':\r\n//                this.setState({ classesInfo: info, },);  \r\n//                break;\r\n//            case 'ability-scores':\r\n//                this.setState({ abilityScoresInfo: info, });\r\n//                break;\r\n//            case 'spells':\r\n//                this.setState({ spellsInfo: info, });\r\n//                break;\r\n//            case 'features':                \r\n//                this.setState({ featuresInfo: info, });\r\n//                break;\r\n//            default:\r\n//        }\r\n//    }\r\n\r\n//    //handleClick() {\r\n//    //    this.setState(state => ({\r\n//    //        isToggleOn: !state.isToggleOn\r\n//    //    }));\r\n//    //}\r\n\r\n\r\n//    chooseYourChampion = () => {\r\n//        this.setState(state => ({\r\n//            ready: !state.ready,\r\n//        }));\r\n//    }\r\n    \r\n//    render() {\r\n//        const { ready } = this.state;\r\n              \r\n//        if (!ready) {\r\n//            return (<div className=\"container-fluid\">\r\n//                <div className=\"row\">\r\n//                    <div className=\"col-12 text-center\">\r\n//                        <h1>Welcome</h1>\r\n//                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n//                    </div>\r\n//                </div>\r\n//            </div>);  \r\n//        } else {\r\n//            return (<CreateCharacter {...this.state} />);                   \r\n//        }\r\n//    }\r\n//}\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            classes: {},\r\n            classesInfo: [],\r\n           \r\n            features: {},\r\n            featuresInfo: [],\r\n           \r\n            ready: false,\r\n            enter: false,\r\n            setRaces: this.setRaces,\r\n            setRacesInfo: this.setRacesInfo,\r\n            setClasses: this.setClasses, \r\n            setClassesInfo: this.setClassesInfo,\r\n          \r\n        }\r\n        //  this.state = this.initialState;\r\n        //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n       // this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // const url = 'https://www.dnd5eapi.co/api/'\r\n        //const promise = this.getCharacterInformation(url);\r\n        //promise.then((data) => {\r\n        //    this.getCharacterData(data.classes, data.abilityScores, data.spells, data.features)\r\n        //});\r\n        this.setState({ enter: true,})\r\n    }\r\n\r\n\r\n    getCharacterInformation(url) {\r\n        return Promise.all([\r\n        this.getClasses(url),\r\n        this.getAbilityScores(url),\r\n        this.getSpells(url),\r\n        this.getFeatures(url),]).then(([abilityScores, spells, features]) => {\r\n            return { abilityScores, spells, features }\r\n        });\r\n    }\r\n\r\n\r\n    getCharacterData(classes, abilityScores, spells, features) {\r\n        Promise.all([       \r\n        this.getLevelData(classes, 1),\r\n        this.getInfo(abilityScores, 'ability-scores'),\r\n        this.getInfo(spells, 'spells'),\r\n        this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ enter: true, }) })\r\n\r\n    }\r\n\r\n   \r\n\r\n    getAbilityScores(url) {\r\n        return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n        return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {\r\n        return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result },); return result })\r\n            .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    //getLevelData(data, currentLevel) {\r\n    //    let levels = []\r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    for (var i = 0; i < data.results.length; i++) {\r\n    //        Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n    //            .then(result => result.json())\r\n    //            .then(result => { levels.push(result) });\r\n    //    }\r\n    //    this.setState({\r\n    //        levelData: levels,\r\n    //    });\r\n    //}\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n        // console.log(info);   \r\n        switch (category) {\r\n            //case 'races':\r\n            //    this.setState({ racesInfo: info, });\r\n            //    break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);\r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n\r\n    setRaces = (races) => {\r\n        this.setState({ races: races, });\r\n    }\r\n\r\n    setRacesInfo = (racesInfo) => {\r\n        this.setState({ racesInfo: racesInfo,})\r\n    }\r\n\r\n    setClasses = (classes) => {\r\n        this.setState({classes: classes,})\r\n    }\r\n\r\n    setClassesInfo = (classesInfo) => {\r\n        this.setState({classesInfo: classesInfo,})\r\n    }\r\n\r\n    //setAbilityScores = (abilityScores) => {\r\n    //    this.setState({ abilityScores: abilityScores })\r\n    //}\r\n\r\n    //setAbilityScoresInfo = (abilityScoresInfo) => {\r\n    //    this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    //}\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { ready } = this.state; //this has been set up top and not by the user. will need to change once characters can be saved and retrieved. \r\n\r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p>}\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\nimport './assets/css/navigation-style.css'\r\nimport './assets/css/selection-style.css'\r\nimport './assets/css/info-style.css'\r\nimport './assets/css/abilityScores-style.css'\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}