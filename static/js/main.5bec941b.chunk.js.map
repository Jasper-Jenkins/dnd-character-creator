{"version":3,"sources":["helper/helper-functions.js","helper/modal/proficiency-modal.js","champion/Proficiencies.js","helper/spell-modal.js","ClassSpells.js","helper/search-bar.js","helper/modal.js","helper/search-results.js","champion/Races.js","champion/Classes.js","helper/AbilityScoresForm.js","helper/random-dice-roll.js","champion/AbilityScores.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","ProficiencyModal","props","proficiencySelectedInfo","className","id","tabIndex","role","aria-labelledby","aria-hidden","name","type","data-dismiss","aria-label","desc","map","index","showProficiency","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","classSelected","proficienciesChosen","state","choices","proficiency_choices","i","from","length","choose","message","updateAlertMessage","newProficiency","filter","proficiency","newProfs","proficiencies","chosen","setState","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","category","proficienciesInfo","proficienciesChoices","startingProficiencies","proficiencyNavigationButtons","proficiencyIndex","bind","this","getProficienciesChoices","url","check","c","fetch","then","result","json","push","catch","e","console","log","numberOfCategories","references","count","str","getProficiencyInfo","chooseFrom","chooseProficiencies","classNames","k","onClick","data-toggle","data-target","indec","newCategory","buttons","num","undefined","setNavigationCategory","proficienciesNavigation","proficienciesToChooseFrom","Component","SpellModal","spell","showSpell","ClassSpells","updateSpells","spellsChosen","spells","setChosenSpells","spellsChosenByLevel","cantrips","levelOneSpells","level","spellSource","currentLevel","level0","level1","spellSlots","addSpell","setSelectedSpell","removeSpell","displaySpells","classSpells","spellChoices","slotLevel","slotSpells","setSpellInfo","spellChoiceDisplay","levelData","navigationCategory","selected","spellBook","spellsInfo","selectedSpell","getSpells","getInfo","spellcasting","setClassSpells","setSpells","setSpellsInfo","data","info","results","spellsInfoData","alert","slotsAvailable","cantrips_known","updateSpellSlots","spellsSlots","spellsNavigation","SearchBar","userValue","handleChange","htmlFor","value","onChange","InfoModal","traits","getTraits","raceSelected","trait","showTraits","SearchResults","champions","select","cards","race","bonuses","ability_bonuses","ability_score","bonus","target","size_description","age","alignment","language_desc","speed","championClass","prof","savingThrows","saving_throws","savingThrow","hit_die","CharacterRace","searchRaces","word","racesInfo","oldList","newList","includes","toLowerCase","searchResults","races","selectRace","getRaces","setRaces","setRacesInfo","setRace","navigate","CharacterClass","searchClasses","classesInfo","characterClass","classes","selectClass","getClasses","setClasses","setClassesInfo","setClass","cClass","getLevelData","AbilityScoresForm","handleFocus","event","scores","newScores","JSON","parse","stringify","parseInt","submitForm","handleSubmitAbilityScores","initialState","abilityScoresSelected","onFocus","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","j","AbilityScores","abilityScoresSetup","abilityScores","abilities","noZeroes","zeroesAlert","abilityScoresInfo","abilityScoresSwitch","getScore","getAbilityScores","setAbilityScores","setAbilityScoresInfo","setAbilityScoresSelected","abilityScore","ability","full_name","scoreDisplay","abilityScoreSwitchy","Selection","navigation","Navigation","navigationCategories","aria-disabled","aria-controls","aria-expanded","navigationButtons","UserAlert","element","alertMessage","CreateCharacter","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","slots","profs","champion","chosenRace","chosenClass","App","chooseYourChampion","ready","features","featuresInfo","enter","Promise","all","getFeatures","resolve","ReactDOM","render"],"mappings":"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","file":"static/js/main.5bec941b.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React from 'react'\r\nimport isSelected from '../helper-functions'\r\n\r\nexport default function ProficiencyModal(props){\r\n    function showProficiency() {\r\n        const { proficiencySelectedInfo } = props;         \r\n        if (isSelected(proficiencySelectedInfo)) {\r\n             let description = proficiencySelectedInfo.desc.map((desc, index) => {\r\n                return (<p className='' key={index}>{desc}</p>);\r\n             });\r\n            return description;\r\n        }\r\n       \r\n        return null;      \r\n    }\r\n    const { proficiencySelectedInfo } = props;\r\n    const noProficiencyTitle = \"Choose a proficiency.\"        \r\n\r\n    return (<div className=' info-modal'>\r\n            <div className=\"modal fade\" id='proficiency-info' tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"proficiencyInfo\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"proficiencyInfo\">{isSelected(proficiencySelectedInfo) ? proficiencySelectedInfo.name : noProficiencyTitle}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {showProficiency()}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>);\r\n}","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport ProficiencyModal from '../helper/modal/proficiency-modal'\r\n\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: 0,\r\n            proficiencies: [],\r\n            proficienciesChosen: [],           \r\n            proficienciesInfo: [], //objects\r\n            proficienciesChoices: [],  //objects          \r\n            startingProficiencies: [], //objects\r\n            proficiencyNavigationButtons: [], //jsx\r\n            proficiencyIndex: '',\r\n            proficiencySelectedInfo: {},\r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);        \r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected } = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n            this.getProficienciesChoices();          \r\n        }\r\n    }   \r\n\r\n    getProficienciesChoices() {\r\n        const { classSelected } = this.props;\r\n        const url = 'https://www.dnd5eapi.co';\r\n        let choices = [];\r\n        for (var b = 0; b < classSelected.proficiency_choices.length; b++) {\r\n            const index = b;\r\n            for (var c = 0; c < classSelected.proficiency_choices[b].from.length; c++) {\r\n                const check = c;\r\n                fetch(url + classSelected.proficiency_choices[b].from[c].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { choices.push(result); if (check === classSelected.proficiency_choices[index].from.length - 1 && index === classSelected.proficiency_choices.length - 1) { this.setState({ proficienciesInfo: choices }); } })\r\n                    .catch(e => { console.log(e + \" -- getProficiencyChoices()  -- \" + url); });\r\n            }           \r\n        }\r\n    }\r\n\r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props;\r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = [];\r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    getProficiencyInfo(proficiency) { \r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + proficiency.references[0].url)\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ proficiencySelectedInfo: result, proficiencyIndex: proficiency.index, }); })\r\n            .catch(e => { console.log(e + \" -- getProficiencyInfo()  -- \" + url); });\r\n    }\r\n       \r\n    startingProficiencies() {\r\n       const { classSelected } = this.props;\r\n        const count = classSelected.proficiencies.length;\r\n        let startingProficiences = classSelected.proficiencies.map((proficiency, index) => {\r\n            let proficiencyFormatting = '';\r\n            if (index === count - 1) {\r\n                proficiencyFormatting = proficiency.name + '.'\r\n                return (proficiencyFormatting)\r\n            }            \r\n            proficiencyFormatting = proficiency.name + ', '\r\n            return (proficiencyFormatting)\r\n        });\r\n        return (startingProficiences);\r\n    }\r\n    \r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean up\r\n        const { classSelected } = this.props;\r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }\r\n        }        \r\n    }\r\n\r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {\r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    proficiencySelectedInfo(str) {\r\n        const { proficienciesInfo } = this.state;\r\n        for (var a = 0; a < proficienciesInfo.length; a++) {\r\n            if (str === proficienciesInfo[a].index) {\r\n                this.getProficiencyInfo(proficienciesInfo[a])\r\n            }\r\n        }        \r\n    }\r\n     \r\n    proficienciesToChooseFrom() {\r\n        const { classSelected } = this.props;        \r\n        const { proficienciesChosen, category } = this.state;       \r\n        let chooseFrom = [];       \r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency, index) => {\r\n                let classNames = 'btn btn-md '\r\n                if (proficienciesChosen.length !== 0) {\r\n                    for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                        if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                            classNames += 'btn-success col-11';\r\n                            let prof = []\r\n                            prof[0] = proficiency;                           \r\n                            return (<div className=\"btn-group col-12 proficiency-selection\" role=\"group\" aria-label=\"proficiency-buttons\" key={index}>\r\n                                <button className={classNames} type='button' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.index}>{proficiency.name}</button>\r\n                                <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#proficiency-info' onClick={() => { this.proficiencySelectedInfo(proficiency.index) }} key={'info-btn-proficiency-' + proficiency.indec}>?</button>\r\n                            </div>);\r\n                        }\r\n                    }\r\n                }                 \r\n                classNames += 'btn-secondary col-11';\r\n                let prof = []\r\n                prof[0] = proficiency; //putting this into array so getProficiencyInfo(prof) can handle multiple incoming object.\r\n                return (<div className=\"btn-group col-12 proficiency-selection\" role=\"group\" aria-label=\"proficiency-buttons\" key={index}>\r\n                    <button className={classNames} type='button' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.index}>{proficiency.name}</button>\r\n                    <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#proficiency-info' onClick={() => { this.proficiencySelectedInfo(proficiency.index) }} key={'info-btn-proficiency-' + proficiency.index}>?</button>\r\n                </div>)\r\n            });\r\n            chooseFrom.push(chooseProficiencies);\r\n        }       \r\n        return (chooseFrom[category]);\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ category: newCategory, });\r\n    }\r\n\r\n    proficienciesNavigation() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let buttons = [];\r\n        for (var a = 0; a < classSelected.proficiency_choices.length; a++) {\r\n            let newCategory = a;\r\n            let check = proficienciesChosen[newCategory]; //I have to check because this comes through undefined the very first time this function runs, need to figure out a better solution.\r\n            let num;\r\n            if (check === undefined) {\r\n                num = 0;\r\n            } else {\r\n                num = proficienciesChosen[newCategory].length;\r\n            }\r\n            if (category === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-secondary' onClick={() => this.setNavigationCategory(newCategory)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='card-header text-white bg-dark text-center'>{buttons}</div>);\r\n    }\r\n\r\n    render() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencySelectedInfo } = this.state;\r\n         return (isSelected(classSelected) ? <div className='col-12 selection'>\r\n            <div className=\"col-12 text-center selectionTitle\">\r\n                <h3>{classSelected.name} Proficiencies</h3>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"card col-12 border-dark mb-3 character-card \">                   \r\n                        {this.proficienciesNavigation()}                   \r\n                    <div className=\"card-body\">\r\n                        <h5 className='card-title text-center'>Starting Proficiencies</h5>\r\n                        <p className='card-text'>{this.startingProficiencies()}</p>\r\n                        <h5 className='card-title text-center'>Choose Proficiencies</h5>\r\n                        {this.proficienciesToChooseFrom()}\r\n                        <ProficiencyModal proficiencySelectedInfo={proficiencySelectedInfo} classSelected={classSelected} /> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> : <div className='col-12 text-center selection'><h3 className='selectionTitle'>You must choose a class to select your proficiencies.</h3></div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React from 'react'\r\nimport { Component } from 'react';\r\nimport isSelected from './helper-functions'\r\nexport default class SpellModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            spell: {}\r\n        }       \r\n    }  \r\n\r\n    showSpell() {\r\n        const { spell } = this.props\r\n        if (isSelected(this.props.spell)) {\r\n            let spellDescriptions = spell.desc.map((desc, index) => {\r\n                return (<p className='' key={index}>{desc}</p>);\r\n            });\r\n            return spellDescriptions;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=' info-modal'>\r\n            <div className=\"modal fade\" id='spell-info' tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"spellInfo\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"spellInfo\">{this.props.spell.name}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            { this.showSpell() }\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n   }    \r\n}","import React, { Component } from 'react';\r\nimport isSelected from './helper/helper-functions';\r\nimport SpellModal from './helper/spell-modal';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],\r\n            levelData: {},\r\n            navigationCategory: 0,\r\n            selected: false, \r\n            spellBook: {},\r\n            spells: {},\r\n            spellsInfo: [],\r\n            selectedSpell: {},\r\n        };\r\n        this.spellSlots = this.spellSlots.bind(this);\r\n        this.getSpells = this.getSpells.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);   \r\n        this.setSpellInfo = this.setSpellInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {   \r\n        if (isSelected(this.props.classSelected) && this.props.classSelected.spellcasting !== undefined) {        \r\n            if (this.props.spellsInfo.length === this.props.spells.count) {\r\n                this.setState({ spells: this.props.spells, spellsInfo: this.props.spellsInfo, })\r\n                this.spellSlots();\r\n                this.setClassSpells(1, this.props.spellsInfo);\r\n            } else {\r\n                this.getSpells();\r\n                this.spellSlots();            \r\n            }\r\n        } else {\r\n            console.log(\"not a caster\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.spellsInfo.length === this.state.spells.count) {\r\n            this.props.setSpells(this.state.spells)\r\n            this.props.setSpellsInfo(this.state.spellsInfo)     \r\n        }\r\n    }   \r\n    \r\n    getSpells() {\r\n        const { classSelected } = this.props;\r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + classSelected.spells)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState({ spells: result, }, this.getInfo(result)); })\r\n                .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {             \r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result); if (this.state.spellsInfo.length === this.state.spells.count) { this.setClassSpells(1, info) }})\r\n                .catch(e => { console.log(e + \" -- getInfo() for spells -- \" + url); });\r\n        }\r\n        this.setState({ spellsInfo: info });      \r\n    }\r\n\r\n    setClassSpells(level, spellsInfoData) {       \r\n        const spellsInfo = spellsInfoData;    \r\n        let spells = [];\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                       if (spellsInfo[i].level <= level) {\r\n                           spells.push(spellsInfo[i])\r\n                       }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n               break;\r\n            default:\r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n\r\n    spellSlots() { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;\r\n        let slotsAvailable = [];\r\n        if (levelData.spellcasting !== undefined) {\r\n            if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {        \r\n                for (var i = 1; i < 6; i++) {\r\n                    if (levelData.spellcasting['spell_slots_level_' + i] !== 0) {\r\n                        slotsAvailable[i] = levelData.spellcasting['spell_slots_level_' + i]; \r\n                    }\r\n                }\r\n            } else {\r\n                slotsAvailable[0] = levelData.spellcasting.cantrips_known;\r\n                for (var k = 1; k < 10; k++) {\r\n                    if (levelData.spellcasting['spell_slots_level_' + k] !== 0) {\r\n                        slotsAvailable[k] = levelData.spellcasting['spell_slots_level_' + k];\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n      \r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => { //this will only work for level one character creation. Works for this app as its for level one only. \r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => { // DUDE! this needs some loving. refactor this.\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        \r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) { //breaks UI, they can choose 6, but can only equip 2, so the UI shows up at -4.\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    \r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n        let spells = []\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ navigationCategory: newCategory, });\r\n    }\r\n\r\n    spellsNavigation() {     \r\n        const { navigationCategory } = this.state;\r\n        const { spellSlots } = this.state;\r\n        let buttons = [];\r\n        let spellsSlots = this.spellsChosenByLevel();\r\n        for (var a = 0; a < spellSlots.length; a++) {\r\n            let newCategory = a;\r\n            let num;\r\n            num = spellsSlots[a];            \r\n            if (navigationCategory === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={a}> Choose: {spellSlots[a] - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-seconday color-white' onClick={() => this.setNavigationCategory(newCategory)} key={a}>Choose: {spellSlots[a] - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n    setSpellInfo(spell) {\r\n        this.setState({ selectedSpell: spell });\r\n    }\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = []; \r\n       //let target = ''\r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            spellChoices[slotLevel] = slotSpells.map((spell, index) => {\r\n                let classNames = 'btn btn-md ';\r\n                //let target = '#spell-' + spell.index;\r\n                \r\n                //if (spell.damage !== undefined) { // Is there a better way to style by damage type?\r\n                //    if (spell.damage.damage_type !== undefined) {\r\n                //        classNames += spell.damage.damage_type.index + \" \";\r\n                //    }\r\n                //}\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += 'btn-secondary col-11';\r\n                  \r\n                    return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                        <button className={classNames} type='button' onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                        <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n                                          </div>);\r\n                }\r\n                for (var b = 0; b < spellsChosen.length; b++) {\r\n                    let chosen = b;\r\n                    if (spellsChosen[chosen].name === spell.name) {  \r\n                        classNames += 'btn-success col-11';\r\n                        return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                            <button className={classNames} type='button' onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                            <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n                           \r\n                        </div>);\r\n                    } \r\n                }\r\n                classNames += 'btn-secondary col-11';\r\n                return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                    <button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                    <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n                   \r\n                </div>);\r\n            });\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='card-body ' key='no-known-spells'><h3 className='card-text text-center'>You have no spells to choose from at level 1</h3></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='card-body ' key='cantrips'><h3 className='card-text text-center'>Cantrips</h3>{spellChoices[b]}</div>\r\n                }                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='card-body ' key={keyForThee + b}><h3 className='card-text text-center'>Level {b} spells</h3>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {        \r\n        const { navigationCategory } = this.state; \r\n        const { selectedSpell } = this.state;\r\n        const { classSelected } = this.props;\r\n        const spells = this.displaySpells();\r\n        return ( isSelected(this.props.classSelected) ?\r\n            <div className='col-12 selection'>\r\n                <div className=\"col-12 text-center selectionTitle\">\r\n                    <h3>{classSelected.name} Spells</h3>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className=\"card col-12 border-dark mb-3 character-card \">\r\n                        <div className=\"card-header text-white text-center bg-dark\">\r\n                            {this.spellsNavigation()}\r\n                        </div>                        \r\n                        {spells[navigationCategory]}\r\n                        <SpellModal spell={selectedSpell} />\r\n                    </div>\r\n                </div>\r\n            </div> :\r\n            <div className='col-12 text-center selection'>\r\n           <h3>Choose a class to select your spells.</h3>\r\n                </div>);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default ClassSpells;","import React from 'react'\r\n\r\nexport default function SearchBar({ userValue, handleChange }) {\r\n    return (\r\n        <div className='col-7 text-center searchBar'>           \r\n            <label className='search-label col-4' htmlFor='searchBar'>Search:</label><input className='col-8' value={userValue} name='searchBar' id='searchBar' onChange={handleChange} />\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react'\r\n//import isSelected from './helper-functions.js'\r\n\r\nclass InfoModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            traits: [],\r\n        }       \r\n        this.getTraits = this.getTraits.bind(this);\r\n    }\r\n\r\n    componentDidMount() { // this is causing problems. need to be worked so it loads when user clicks. \r\n    //    console.log(\"did it mount?\");\r\n        this.getTraits(this.props.info);\r\n    }\r\n\r\n    getTraits(raceSelected) {\r\n        const url = 'https://www.dnd5eapi.co'\r\n        //let traitsInfo = [];\r\n        if (raceSelected.index === \"human\") {\r\n         //  console.log(\"Got to the humans\")\r\n        } else {\r\n            for (var a = 0; a < raceSelected.traits.length; a++) {\r\n                fetch(url + raceSelected.traits[a].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { this.setState((state) => ({ traits: [...state.traits, result]}))})\r\n                    .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n            }\r\n        }     \r\n    }\r\n\r\n    showTraits() {\r\n        const { traits } = this.state;    \r\n        let info = traits.map((trait) => {\r\n            return (<div key={'trait-'+trait.name}>\r\n                <h5>{trait.name}</h5>\r\n                <p>{trait.desc[0]}</p>\r\n            </div>)\r\n        });\r\n        return info;\r\n    }\r\n\r\n    render() {\r\n        const { traits } = this.state;\r\n        const { name } = this.props.info;\r\n       // console.log(this.props);\r\n        return (<div className='col-1 info-modal'>\r\n            <div className=\"modal fade\" id={'race-'+this.props.info.index} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"raceTraits\">{name} Traits</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {traits.length !== 0 ? this.showTraits() : \"Humans do not have racial traits\"}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default InfoModal","import React from 'react'\r\nimport InfoModal from './modal'\r\n\r\nexport default function SearchResults({ champions, select, category }) {\r\n   // console.log(champions)\r\n    let cards = [];\r\n    switch (category) {\r\n        case 'races':\r\n            cards = champions.map((race) => {\r\n                let bonuses = \"\";\r\n                for (var a = 0; a < race.ability_bonuses.length; a++) {\r\n                    bonuses += race.ability_bonuses[a].ability_score.name + \": \" + race.ability_bonuses[a].bonus + \" \";\r\n                }\r\n                let traits = [];\r\n                let target = '#race-' + race.index;\r\n                for (var b = 0; b < race.traits.length; b++) { //UI formatting commas and period. \r\n                    if (b !== race.traits.length-1) {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}, </span>);\r\n                    } else {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}. </span>);\r\n                    }\r\n                }\r\n                traits.push(<button className='btn btn-sm btn-primary'data-toggle=\"modal\" data-target={target} key='raceTraitsInfoButton'>?</button>)\r\n\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={race.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{race.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n                        <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n                        <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n                        <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n                        <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n                        <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n                        <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(race.index)}>Choose {race.name}</button>\r\n                        <InfoModal info={race} />\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break;\r\n        case 'classes':\r\n            cards = champions.map((championClass) => {\r\n                let proficiencies = \"\";\r\n                let count = 0;\r\n                proficiencies = championClass.proficiencies.map((prof) => {\r\n                    if (count === championClass.proficiencies.length - 1) {\r\n                        return (prof.name + \". \");\r\n                    }\r\n                    count++;\r\n                    return (prof.name + \", \");\r\n                });\r\n                let savingThrows = '';\r\n                savingThrows = championClass.saving_throws.map((savingThrow) => {\r\n                    return (savingThrow.name + \" \")\r\n                });\r\n\r\n                //let bonuses = this.abilityBonuses(race);\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={championClass.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{championClass.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Hit die:</strong> {championClass.hit_die}</p>\r\n                        <p className=\"card-text\"><strong>Starting proficiencies:</strong> {proficiencies} </p>\r\n                        <p className=\"card-text\"><strong>Saving Throws:</strong> {savingThrows}</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(championClass.index)}>Choose {championClass.name}</button>\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break; \r\n        default:\r\n            break;\r\n    }\r\n    return (cards);\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\n//import InfoModal from '../helper/modal'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\n//export default class CharacterRace extends Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            raceSelected: {},\r\n//            searchResults: [],\r\n//            word: \"\",\r\n          \r\n//        }\r\n//        //this.buttons = this.buttons.bind(this);\r\n//        //this.selectRace = this.selectRace.bind(this);\r\n//        //this.abilityBonuses = this.abilityBonuses.bind(this);\r\n//        //this.raceCards = this.raceCards.bind(this);\r\n//        //this.raceCarousel = this.raceCarousel.bind(this);\r\n//        this.traits = this.traits.bind(this);\r\n//    }\r\n\r\n\r\n//    componentDidMount() {\r\n//        if (isSelected(this.props.raceSelected)) {\r\n//            this.setState({ raceSelected: this.props.raceSelected, });\r\n//        }\r\n//        console.log(this.props);\r\n//    }\r\n\r\n//    getRaces() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, },); return result })\r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n//    }\r\n\r\n//    selectRace(index) {\r\n//        const { racesInfo } = this.props;\r\n//        const { setRace } = this.props;\r\n//        for (let i = 0; i < racesInfo.length; i++) {\r\n//            if (racesInfo[i].index === index) {\r\n//                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n//                this.setState({ raceSelected: raceSelected[0] });\r\n//                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n//                console.log(raceSelected[0]);\r\n//                break;\r\n//            }\r\n//        }\r\n//    }   \r\n\r\n//    buttons() {\r\n//        const { races } = this.props;\r\n//        const { raceSelected } = this.state;        \r\n//        let raceButtons = races.results.map((race) => {\r\n//            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n//                return (<button className='btn btn-sm buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n//            }\r\n//            return (<button onClick={() => this.selectRace(race.index)} className='btn btn-sm selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n//        });\r\n//        return raceButtons;\r\n//    }\r\n\r\n//    abilityBonuses(characterRace) {        \r\n//        let bonuses = \"\"; \r\n//        for (var a = 0; a < characterRace.ability_bonuses.length; a++) {\r\n//            bonuses += characterRace.ability_bonuses[a].ability_score.name + \": \" + characterRace.ability_bonuses[a].bonus + \" \";\r\n//        }\r\n//        return (bonuses);\r\n//    }\r\n\r\n//    traits(characterRace) {\r\n//        let traits = [];        \r\n//        let target = '#race-' + characterRace.index;\r\n//        for (var a = 0; a < characterRace.traits.length; a++) {\r\n//            traits.push(<span data-toggle=\"modal\" data-target={target} key={characterRace.traits[a].name}>{characterRace.traits[a].name} </span>);\r\n//        }\r\n//        return (traits);\r\n//    }\r\n\r\n//    raceCards() {       \r\n//        const { racesInfo } = this.props;  \r\n//        //console.log(racesInfo);\r\n//        let raceCards = racesInfo.map((race, index) => {            \r\n//            let bonuses = this.abilityBonuses(race);\r\n//            let traits = this.traits(race);\r\n//            return (<div className=\"card border-dark mb-3 \" key={race.index}>\r\n//                <div className=\"card-header text-white bg-dark text-center\">\r\n//                         <h4>{race.name}</h4>\r\n//                        </div>\r\n//                <div className=\"card-body\">                           \r\n//                    <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n//                    <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n//                    <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n//                    <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n//                    <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n//                    <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n//                    <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n//                    <button className=\"btn btn-primary\" onClick={() => this.selectRace(race.index)}>Choose {race.name}</button>\r\n//                    <InfoModal info={race} />\r\n//                 </div>\r\n//               </div>);\r\n//        }); \r\n//        return (raceCards);\r\n//    }\r\n//   // <button type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">i</button>\r\n   \r\n//    searchRaces = (word) => {\r\n//        const { racesInfo } = this.props;\r\n//        this.setState({\r\n//            word: word,\r\n//        });\r\n//        let oldList = racesInfo.map((race) => {\r\n//            return race;\r\n//        });\r\n//        let newList = [];\r\n//        if (word !== \"\") {\r\n//            newList = oldList.filter(race => race.index.includes(word.toLowerCase())); \r\n//        //    console.log(oldList);\r\n//            this.setState({ searchResults: newList, });\r\n//        } else {\r\n//            console.log(newList);\r\n//            this.setState({ searchResults: oldList, });           \r\n//        }\r\n//    }\r\n\r\n\r\n//    render() {\r\n//        // let cards = this.raceCards();\r\n//        const { word } = this.state;\r\n//        const { searchResults } = this.state;\r\n//        return (<div className='selection col-12'>\r\n//            <h2 className=\"selectionTitle text-center\">Choose your Champions Race</h2>\r\n//            <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />\r\n//            {word !== \"\" ? <SearchResults champions={searchResults} /> : this.raceCards()}           \r\n//            </div>);\r\n//    }\r\n//}\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            raceSelected: {},\r\n            searchResults: [], \r\n            word: \"\",\r\n\r\n        }\r\n        this.selectRace = this.selectRace.bind(this);\r\n        this.getRaces = this.getRaces.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            this.setState({ raceSelected: this.props.raceSelected, });            \r\n        }\r\n        if (isSelected(this.props.races) && this.props.racesInfo.length === 9) {\r\n            this.setState({races: this.props.races, racesInfo: this.props.racesInfo,})\r\n        } else {\r\n            this.getRaces();\r\n        }\r\n      //  console.log(this.props);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n   //     console.log(\"Unmounting <Races />, races: \", this.state.races, \" racesInfo: \", this.state.racesInfo)\r\n        this.props.setRaces(this.state.races);\r\n        this.props.setRacesInfo(this.state.racesInfo);\r\n    }\r\n\r\n    getRaces() {\r\n     //   console.log(\"Getting Races\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, this.getInfo(result));})\r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n       // console.log(data);\r\n       // let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n           fetch(url + data.results[i].url)\r\n               .then(result => result.json())\r\n               .then(result => { this.setState((state) => ({ racesInfo: [...state.racesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectRace(index) {\r\n        const { racesInfo } = this.state;\r\n        const { setRace } = this.props; \r\n        const { navigate } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });                \r\n                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n                //console.log(raceSelected[0]);\r\n                navigate('Classes');\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   \r\n    searchRaces = (word) => {\r\n        const { racesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = racesInfo.map((race) => {\r\n            return race;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(race => race.index.includes(word.toLowerCase()));\r\n            //    console.log(oldList);\r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }  \r\n\r\n    render() {\r\n        // let cards = this.raceCards();\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { racesInfo } = this.state;\r\n        return (<div className='col-12 selection '>\r\n                <div className='row selectionTitle'>                   \r\n                <h5 className='col-5 text-center choose'>Choose a Race</h5>                \r\n                    <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />                   \r\n                </div>\r\n                <div className='row'>\r\n                    <SearchResults champions={word !== '' ? searchResults : racesInfo} category='races' select={this.selectRace} />\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            classesInfo: [],\r\n            classSelected: {},           \r\n            searchResults:[],\r\n            word: \"\",            \r\n        }\r\n        \r\n        this.selectClass = this.selectClass.bind(this);\r\n      //  this.classCards = this.classCards.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        }\r\n        if (isSelected(this.props.classes) && this.props.classesInfo.length === 12) {//needs better validation\r\n            this.setState({ classes: this.props.classes, classesInfo: this.props.classesInfo, })\r\n        } else {\r\n            this.getClasses();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.classesInfo.length === 12) {\r\n            this.props.setClasses(this.state.classes);\r\n            this.props.setClassesInfo(this.state.classesInfo);\r\n        }\r\n    }\r\n\r\n    getClasses() {\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, this.getInfo(result)); })\r\n            .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n\r\n    }\r\n\r\n    getInfo(data) {\r\n         const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ classesInfo: [...state.classesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.state;\r\n        const { setClass } = this.props;\r\n        const { navigate } = this.props;\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], }, this.props.getLevelData(classSelected[0].index, 1));\r\n                setClass(classSelected[0]);\r\n                navigate('Ability-Scores');\r\n                break;\r\n            }\r\n        }        \r\n    } \r\n\r\n    searchClasses = (word) => {\r\n        const { classesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = classesInfo.map((characterClass) => {\r\n            return characterClass;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(characterClass => characterClass.index.includes(word.toLowerCase()));            \r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n             this.setState({ searchResults: oldList, });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { classesInfo } = this.state;\r\n        return (<div className='col-12 selection'>\r\n                    <div className='row selectionTitle'>\r\n                        <h5 className='col-5 text-center choose'>Choose a Class</h5>\r\n                        <SearchBar value={word} handleChange={e => this.searchClasses(e.target.value)} />\r\n                    </div>\r\n                    <div className='row'>\r\n                        <SearchResults champions={word !== '' ? searchResults : classesInfo} category='classes' select={this.selectClass} />\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmitAbilityScores(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />      \r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} /> \r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","export default function randomDiceRoll(maxNum) { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n    let totalDiceRolls = 5;\r\n    let totalRollsToKeep = 3;\r\n    let abilityPoint = 0;\r\n    let abilityPoints = 0;\r\n    let abilityPointsArray = [];\r\n    for (var i = 0; i < totalDiceRolls; i++) {\r\n        abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n        abilityPointsArray.push(abilityPoint);\r\n    }\r\n    abilityPointsArray.sort()\r\n    abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n    for (var j = 0; j < abilityPointsArray.length; j++) {\r\n        abilityPoints += abilityPointsArray[j];\r\n    }\r\n    return abilityPoints;\r\n}    ","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport AbilityScoresForm from '../helper/AbilityScoresForm'\r\nimport randomDiceRoll from '../helper/random-dice-roll'\r\n\r\nexport default class AbilityScores extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            abilityScoresSelected: {},\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.getScore = this.getScore.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.abilityScores)) {\r\n             this.setState({ abilityScores: this.props.abilityScores, abilityScoresInfo: this.props.abilityScoresInfo, abilityScoresSelected: this.props.abilityScoresSelected, }, this.abilityScoresSetup())\r\n         } else {\r\n            this.getAbilityScores();\r\n        }\r\n     }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setAbilityScores(this.state.abilityScores);\r\n        this.props.setAbilityScoresInfo(this.state.abilityScoresInfo);\r\n        this.props.setAbilityScoresSelected(this.state.abilityScoresSelected);\r\n    }\r\n\r\n    abilityScoresSetup = () => {\r\n       const { count } = this.state.abilityScores;\r\n        const { results } = this.state.abilityScores;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    getAbilityScores() {\r\n        const url = \"https://www.dnd5eapi.co/api/\"\r\n        fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result }, this.getInfo(result)) })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ abilityScoresInfo: [...state.abilityScoresInfo, result] }), this.abilityScoresSetup()) });\r\n        }     \r\n    }\r\n\r\n    scoreDisplay() {\r\n        const { abilityScoresInfo, abilityScoresSelected } = this.state;\r\n        const { raceSelected, classSelected } = this.props;\r\n        let bonus = 0;\r\n        let abilityScore = ''\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            abilityScore = 'card-text abilityScore '\r\n            bonus = abilityScoresSelected[ability.index]          \r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += 'savingThrow '                      \r\n                    }\r\n                }\r\n            }\r\n            if (isSelected(raceSelected)) { \r\n                for (var b = 0; b < raceSelected.ability_bonuses.length; b++) {\r\n                    if (raceSelected.ability_bonuses[b].ability_score.index === ability.index) {                     \r\n                        abilityScore += 'bonus '\r\n                        bonus = abilityScoresSelected[ability.index] + raceSelected.ability_bonuses[b].bonus;\r\n                    } \r\n                }\r\n            }  \r\n            return (<div className=\"card border-dark mb-3 col-4 card-ability-score text-center\" key={ability.index}>\r\n                    <div className=\"card-header text-white bg-dark ability-score-header\">\r\n                        <h6>{ability.full_name}</h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className={abilityScore} key={ability.index}>{bonus}</p>\r\n                    </div>\r\n                </div>);\r\n        });\r\n        return (abilityScores);\r\n    }\r\n\r\n    getScore(ability) {        \r\n        const { abilityScores } = this.state;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = randomDiceRoll(6)\r\n                this.setState({ abilityScoresSelected: scores })\r\n                break;\r\n            }\r\n        }      \r\n    }\r\n\r\n\r\n    handleSubmitAbilityScores = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.props.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    buttons() {\r\n        const { abilityScoresInfo } = this.state;\r\n        let buttons = abilityScoresInfo.map((abilityScore, index) => {\r\n            return (<button onClick={() => this.getScore(abilityScore.index)} className='btn btn-primary ability-score-button col-5' type='button' key={index}>{abilityScore.full_name}</button>)\r\n        });\r\n        return (<div className='d-grid gap-2 d-md-block'>{buttons}</div>);\r\n    }\r\n\r\n    render() {\r\n        const {abilityScoresSwitch } = this.state;       \r\n        return (<div className='selection col-12'>\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"text-center\">Set ability scores</h3>                      \r\n                    </div>  \r\n                <div className='row'>{this.scoreDisplay()}</div>\r\n                <div className='row'>\r\n                    <div className='col-12 scoreSelection text-center'>\r\n                        {abilityScoresSwitch ? <AbilityScoresForm handleSubmitAbilityScores={this.handleSubmitAbilityScores} abilityScoresSelected={this.state.abilityScoresSelected} /> : this.buttons()}\r\n                        <button onClick={() => this.abilityScoreSwitchy()} className='btn btn-primary ability-score-switchy-btn'>{abilityScoresSwitch ? \"Auto fill \" : \"Manual fill \"}</button><br />\r\n                    </div>\r\n                </div>\r\n                </div>)\r\n    }\r\n}","import React, { Component } from 'react'\r\n//import AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './champion/Proficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport AbilityScores from './champion/AbilityScores'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component { //convert this to a function\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n      //      abilityScoresSwitch: false,\r\n        }\r\n     //   this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    //abilityScoreSwitchy() {\r\n    //    this.setState(state => ({\r\n    //        abilityScoresSwitch: !state.abilityScoresSwitch,\r\n    //    }));\r\n    //}\r\n\r\n    render() {       \r\n       // const { classSelected } = this.props;\r\n        const { navigation } = this.props;      \r\n        switch (navigation) {\r\n            case 'Races':\r\n                return (<Races {...this.props} />);           \r\n            case 'Classes':\r\n                return (<Classes {...this.props} />); \r\n            case 'Proficiencies':\r\n                return (<ClassProficiencies {...this.props} />);      \r\n            case 'Spells':\r\n                return (<ClassSpells {...this.props} />);\r\n            case 'Ability-Scores':\r\n                return (<AbilityScores {...this.props} />);               \r\n            default:\r\n                return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n        }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React, { Component } from 'react'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    navigationButtons() {\r\n        const navigation = this.props.navigation\r\n        const navigationCategories = this.props.navigationCategories\r\n        const navigate = this.props.navigate\r\n        // const classSelected = this.props.classSelected       \r\n        let navButtons = navigationCategories.map((category, index) => {\r\n            if (navigation === category) {\r\n                return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm  btn-dark btn-nav' key={index}>{category}</button>);\r\n            }\r\n        });\r\n        return (navButtons);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<nav className=\"navbar navbar-expand-lg navbar-light\" id=\"navigation-bottom-container\">\r\n            <button className=\"btn btn-sm navbar-toggler bg-light\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navigation-bottom\" aria-controls=\"navigation-bottom\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon col-2\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse col-10\" id=\"navigation-bottom\">\r\n                {this.navigationButtons()}\r\n            </div>\r\n        </nav>);\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n//import Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\nimport isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            champion: 'Champion', //add support: user being able to name their Champion. \r\n            abilityScoresSelected: {},\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            levelData: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},           \r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            spells: {},\r\n            spellsInfo: [],\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            setAbilityScoresSelected: this.setAbilityScoresSelected,\r\n            startingProficiencies: this.startingProficiencies,\r\n            setChosenSpells: this.setChosenSpells,\r\n            setSpells: this.setSpells,\r\n            setSpellsInfo: this.setSpellsInfo,\r\n            setAbilityScores: this.setAbilityScores,\r\n            setAbilityScoresInfo: this.setAbilityScoresInfo,\r\n          \r\n        }\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n     \r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spells: spells, });\r\n    }\r\n\r\n    setSpellsInfo = (spellsInfo) => {\r\n        this.setState({ spellsInfo: spellsInfo, });\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setChosenSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: [], proficienciesChosen: [], spells: {}, spellsInfo: [], });\r\n    }\r\n   \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n      \r\n    setAbilityScoresSelected = (abilityScoresSelected) => {\r\n        this.setState({ abilityScoresSelected: abilityScoresSelected, })\r\n    }\r\n\r\n\r\n    setAbilityScores = (abilityScores) => {\r\n        this.setState({ abilityScores: abilityScores })\r\n    }\r\n\r\n    setAbilityScoresInfo = (abilityScoresInfo) => {\r\n        this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    }\r\n        \r\n    getLevelData(index, currentLevel) { //\r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + \"/api/classes/\" + index + \"/levels/\" + currentLevel)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    levelData: result,\r\n                });\r\n            });\r\n    }\r\n    \r\n    render() {\r\n      //hacky way of displaying alert\r\n        //hacky way to put a space between race and class name, fix this. this messes with the total view height need to fix. \r\n        const { raceSelected, classSelected } = this.state;\r\n\r\n        return (<div id='creation' className='container-fluid'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <div className='col-12 text-center' id='characterType'>\r\n                    <h5 className='col'>\r\n                        {isSelected(raceSelected) ? raceSelected.name : null}\r\n                        <span> </span> \r\n                        {isSelected(classSelected) ? classSelected.name : null}\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} getLevelData={this.getLevelData} setRace={this.setRace} navigate={this.navigate} setClass={this.setClass} handleSubmitAbilityScores={this.handleSubmitAbilityScores} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>               \r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\n//export default class App extends Component { \r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {           \r\n//            races: {},\r\n//            racesInfo: new Array(0),           \r\n//            classes: {},\r\n//            classesInfo: new Array(0),\r\n//            abilityScores: {},\r\n//            abilityScoresInfo: [],\r\n//            spells: {},\r\n//            spellsInfo: [],\r\n//            features: {},\r\n//            featuresInfo: [],\r\n//            levelData: [],\r\n//            ready: false,\r\n//            enter: false,\r\n//        }\r\n//      //  this.state = this.initialState;\r\n//      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n//        this.getInfo = this.getInfo.bind(this);\r\n//        this.getLevelData = this.getLevelData.bind(this);\r\n//        //   this.getStuff = this.getStuff.bind(this);\r\n//        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n//    }\r\n\r\n//    componentDidMount() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        const promise = this.getCharacterInformation(url);\r\n//        promise.then((data) => {\r\n//            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n//        });\r\n//    }\r\n     \r\n\r\n//    getCharacterInformation(url) {\r\n//      return Promise.all([this.getRaces(url),\r\n//            this.getClasses(url),\r\n//            this.getAbilityScores(url),\r\n//            this.getSpells(url),\r\n//            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n//                return {races, classes, abilityScores, spells, features}\r\n//            });\r\n//    }\r\n\r\n\r\n//    getCharacterData(races, classes, abilityScores, spells, features) {\r\n//        Promise.all([this.getInfo(races, 'races'),\r\n//            this.getInfo(classes, 'classes'),\r\n//            this.getLevelData(classes, 1),\r\n//            this.getInfo(abilityScores, 'ability-scores'),\r\n//            this.getInfo(spells, 'spells'),\r\n//            this.getInfo(features, 'features'),\r\n//        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n//    }\r\n\r\n//    getRaces(url) {        \r\n//       return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, }, ); return result })          \r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n//    }\r\n\r\n//    getClasses(url) {\r\n//       return fetch(url + 'classes')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n//           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n//    }\r\n\r\n//    getAbilityScores(url) {\r\n//      return fetch(url + 'ability-scores')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n//    }\r\n\r\n//    getSpells(url) {\r\n//      return fetch(url + 'spells')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ spells: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n//    }\r\n\r\n//    getFeatures(url) {      \r\n//       return fetch(url + 'features')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ features: result }, ); return result  })\r\n//           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n//    }\r\n\r\n//    getLevelData(data, currentLevel) {       \r\n//        let levels = []\r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n//                .then(result => result.json())\r\n//                .then(result => { levels.push(result) });            \r\n//        }        \r\n//        this.setState({\r\n//            levelData: levels,\r\n//        });\r\n//    }\r\n\r\n//    getInfo(data, category) {\r\n//        let info = []    \r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + data.results[i].url))\r\n//                .then(result => result.json())\r\n//                .then(result => { info.push(result) });\r\n//        }\r\n//       // console.log(info);   \r\n//        switch(category) {\r\n//            case 'races':\r\n//                this.setState({ racesInfo: info, });\r\n//                break;\r\n//            case 'classes':\r\n//                this.setState({ classesInfo: info, },);  \r\n//                break;\r\n//            case 'ability-scores':\r\n//                this.setState({ abilityScoresInfo: info, });\r\n//                break;\r\n//            case 'spells':\r\n//                this.setState({ spellsInfo: info, });\r\n//                break;\r\n//            case 'features':                \r\n//                this.setState({ featuresInfo: info, });\r\n//                break;\r\n//            default:\r\n//        }\r\n//    }\r\n\r\n//    //handleClick() {\r\n//    //    this.setState(state => ({\r\n//    //        isToggleOn: !state.isToggleOn\r\n//    //    }));\r\n//    //}\r\n\r\n\r\n//    chooseYourChampion = () => {\r\n//        this.setState(state => ({\r\n//            ready: !state.ready,\r\n//        }));\r\n//    }\r\n    \r\n//    render() {\r\n//        const { ready } = this.state;\r\n              \r\n//        if (!ready) {\r\n//            return (<div className=\"container-fluid\">\r\n//                <div className=\"row\">\r\n//                    <div className=\"col-12 text-center\">\r\n//                        <h1>Welcome</h1>\r\n//                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n//                    </div>\r\n//                </div>\r\n//            </div>);  \r\n//        } else {\r\n//            return (<CreateCharacter {...this.state} />);                   \r\n//        }\r\n//    }\r\n//}\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            classes: {},\r\n            classesInfo: [],\r\n           \r\n            features: {},\r\n            featuresInfo: [],\r\n           \r\n            ready: false,\r\n            enter: false,\r\n            setRaces: this.setRaces,\r\n            setRacesInfo: this.setRacesInfo,\r\n            setClasses: this.setClasses, \r\n            setClassesInfo: this.setClassesInfo,\r\n          \r\n        }\r\n        //  this.state = this.initialState;\r\n        //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n       // this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // const url = 'https://www.dnd5eapi.co/api/'\r\n        //const promise = this.getCharacterInformation(url);\r\n        //promise.then((data) => {\r\n        //    this.getCharacterData(data.classes, data.abilityScores, data.spells, data.features)\r\n        //});\r\n        this.setState({ enter: true,})\r\n    }\r\n\r\n\r\n    getCharacterInformation(url) {\r\n        return Promise.all([\r\n        this.getClasses(url),\r\n        this.getAbilityScores(url),\r\n        this.getSpells(url),\r\n        this.getFeatures(url),]).then(([abilityScores, spells, features]) => {\r\n            return { abilityScores, spells, features }\r\n        });\r\n    }\r\n\r\n\r\n    getCharacterData(classes, abilityScores, spells, features) {\r\n        Promise.all([       \r\n        this.getLevelData(classes, 1),\r\n        this.getInfo(abilityScores, 'ability-scores'),\r\n        this.getInfo(spells, 'spells'),\r\n        this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ enter: true, }) })\r\n\r\n    }\r\n\r\n   \r\n\r\n    getAbilityScores(url) {\r\n        return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n        return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {\r\n        return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result },); return result })\r\n            .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    //getLevelData(data, currentLevel) {\r\n    //    let levels = []\r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    for (var i = 0; i < data.results.length; i++) {\r\n    //        Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n    //            .then(result => result.json())\r\n    //            .then(result => { levels.push(result) });\r\n    //    }\r\n    //    this.setState({\r\n    //        levelData: levels,\r\n    //    });\r\n    //}\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n        // console.log(info);   \r\n        switch (category) {\r\n            //case 'races':\r\n            //    this.setState({ racesInfo: info, });\r\n            //    break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);\r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n\r\n    setRaces = (races) => {\r\n        this.setState({ races: races, });\r\n    }\r\n\r\n    setRacesInfo = (racesInfo) => {\r\n        this.setState({ racesInfo: racesInfo,})\r\n    }\r\n\r\n    setClasses = (classes) => {\r\n        this.setState({classes: classes,})\r\n    }\r\n\r\n    setClassesInfo = (classesInfo) => {\r\n        this.setState({classesInfo: classesInfo,})\r\n    }\r\n\r\n    //setAbilityScores = (abilityScores) => {\r\n    //    this.setState({ abilityScores: abilityScores })\r\n    //}\r\n\r\n    //setAbilityScoresInfo = (abilityScoresInfo) => {\r\n    //    this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    //}\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { ready } = this.state; //this has been set up top and not by the user. will need to change once characters can be saved and retrieved. \r\n\r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p>}\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\nimport './assets/css/navigation-style.css'\r\nimport './assets/css/selection-style.css'\r\nimport './assets/css/info-style.css'\r\nimport './assets/css/abilityScores-style.css'\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}