{"version":3,"sources":["helper/helper-functions.js","Info.js","AbilityScoresForm.js","ClassProficiencies.js","ClassSpells.js","champion/Races.js","champion/Classes.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","InfoDisplay","raceName","className","hit_die","ability_bonuses","abilityScores","saving_throws","characterProficiencies","Info","props","raceSelected","classSelected","abilityScoresInfo","proficiencies","spellsChosen","selectedSpell","setSelectedSpell","classSpells","bonuses","abilities","Object","keys","abilityScoresSelected","map","ability","name","bonus","index","i","length","ability_score","full_name","console","log","toLowerCase","saving_throw","j","proficiency","spell","onClick","navigation","spellDescription","undefined","desc","level","AbilityScoresForm","handleFocus","event","target","select","handleChange","value","scores","state","newScores","JSON","parse","stringify","parseInt","setState","submitForm","handleSubmit","initialState","this","htmlFor","type","id","onChange","onFocus","Component","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","proficienciesChosen","choices","proficiency_choices","from","choose","message","updateAlertMessage","newProficiency","filter","newProfs","chosen","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","bind","numberOfCategories","chooseFrom","chooseProficiencies","k","push","classProficienciesToChooseFrom","ClassSpells","spellSlots","levelData","slotsAvailable","h","class","spellcasting","cantrips_known","updateSpellSlots","updateSpells","spells","setSpells","spellsChosenByLevel","cantrips","levelOneSpells","spellSource","currentLevel","level0","level1","setClassSpells","spellsInfo","classes","alert","addSpell","removeSpell","displaySpells","spellChoices","slotLevel","slotSpells","classNames","damage","damage_type","spellChoiceDisplay","CharacterRace","selectRace","racesInfo","setRace","race","buttons","races","results","aria-disabled","CharacterClass","selectClass","classesInfo","setClass","cClass","characterClass","Selection","getScore","abilityScore","Navigation","navigationCategories","navigate","navButtons","category","tabIndex","UserAlert","element","alertMessage","CreateCharacter","abilityScoresSetup","abilityScoresData","count","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","slots","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","startingProficiencies","profs","updateProficiencies","proficienciesChoices","noZeroes","zeroesAlert","chosenRace","chosenClass","App","Array","features","featuresInfo","ready","getInfo","getLevelData","getCharacterInformation","then","data","getCharacterData","url","Promise","all","getRaces","getClasses","getAbilityScores","getSpells","getFeatures","fetch","result","json","catch","e","levels","resolve","info","check","characterInfo","getPrototypeOf","constructor","ReactDOM","render"],"mappings":"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","file":"static/js/main.3b15446b.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n//import CharacterImages from'./CharacterImages'\r\n//import ClassProficiencies from './ClassProficiencies'\r\n\r\nfunction InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies){ //choose 1, either underscores or camelCase. You can't have both!!! Or can you...no\r\n    return (<div className=\"col-12 info\">\r\n        <div className='row'>\r\n            <div className='col-12 characterTitle'>\r\n                <h3>{raceName} {className}</h3>\r\n            </div>\r\n            <div className='col-6'>            \r\n                <strong>Ability bonuses</strong><br />\r\n                <ul>{ability_bonuses}</ul>\r\n                <strong>Ability Scores: </strong>\r\n                <div className='row'>\r\n                    {abilityScores}\r\n                </div>  \r\n            </div>\r\n            <div className='col-6'>\r\n                <strong>Hit die: </strong>{hit_die}<br />\r\n                <strong>Saving throws</strong><br />\r\n                <ul>{saving_throws}</ul>\r\n                <strong>Proficiencies</strong>\r\n                <ul>\r\n                    {characterProficiencies}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\n//Work on refactoring this mess\r\nconst Info = (props) => {\r\n  //  console.log(\"Info props\", props)\r\n    const { raceSelected } = props\r\n    const { classSelected } = props\r\n    const { abilityScoresInfo } = props\r\n    const { proficiencies } = props\r\n    const { spellsChosen } = props\r\n    const { selectedSpell } = props\r\n    const { setSelectedSpell } = props \r\n  //  const { proficienciesChosen } = props\r\n\r\n    let raceName = \"\";\r\n    let className = \"\"; \r\n    let hit_die = \"\";\r\n    let ability_bonuses = [];\r\n    let saving_throws = [];\r\n    let characterProficiencies = [];\r\n    let classSpells = [];\r\n  //  let classFeatures = [];\r\n\r\n    let bonuses = []\r\n\r\n    let abilities = Object.keys(props.abilityScoresSelected);\r\n    let abilityScores = abilities.map((ability) => {\r\n       // console.log(\"HERE\")\r\n        return (<div className='col text-center abilityScores' key={ability}>\r\n            <h6>{ability}</h6>\r\n            <p>{props.abilityScoresSelected[ability]}</p>\r\n        </div>);\r\n    });\r\n\r\n    \r\n    if (isSelected(raceSelected)) { //setting up info for when a race has been selected\r\n        raceName = raceSelected.name\r\n        ability_bonuses = raceSelected.ability_bonuses.map((bonus, index) => {\r\n            for (var i = 0; i < abilityScoresInfo.length; i++) {\r\n                if (abilityScoresInfo[i].name === bonus.ability_score.name) {\r\n                    return (<li key={index}>{abilityScoresInfo[i].full_name}: +{bonus.bonus}</li>);\r\n                }\r\n            }\r\n            return (<li key={index}>Ability: +BONUS</li>);\r\n        });        \r\n        bonuses = raceSelected.ability_bonuses.map((bonus) => {\r\n           // console.log(bonus)\r\n            return bonus\r\n        });\r\n\r\n        console.log(bonuses);\r\n        abilityScores = abilities.map((ability) => {\r\n            for (var i = 0; i < bonuses.length; i++) {\r\n                if (bonuses[i].ability_score.name.toLowerCase() === ability) {\r\n                    return (<div className='col text-center abilityScores' key={ability}>\r\n                        <h6>{ability}</h6>\r\n                        <p>{props.abilityScoresSelected[ability]}+{bonuses[i].bonus}</p>\r\n                    </div>);\r\n                }\r\n            }\r\n            return (<div className='col text-center abilityScores' key={ability}>\r\n                <h6>{ability}</h6>\r\n                <p>{props.abilityScoresSelected[ability]}</p>\r\n            </div>);\r\n        });\r\n    }\r\n\r\n    if (isSelected(classSelected)) { //setting up info for when a class has been selected\r\n        className = classSelected.name\r\n        hit_die = props.classSelected.hit_die\r\n        saving_throws = props.classSelected.saving_throws.map((saving_throw, index) => {\r\n            for (var j = 0; j < abilityScoresInfo.length; j++) {\r\n                if (abilityScoresInfo[j].name === saving_throw.name) {\r\n                    return (<li key={saving_throw.name.toLowerCase()}>{abilityScoresInfo[j].full_name}</li>);\r\n                }\r\n            }\r\n            return (<li key={index}>Ability: +BONUS</li>);\r\n        });\r\n\r\n       // console.log(\"Chosen profs \", proficienciesChosen);\r\n      \r\n        characterProficiencies = proficiencies.map((proficiency) => {\r\n            return (<li key={proficiency.name}>{proficiency.name}</li>);\r\n        });\r\n\r\n\r\n\r\n\r\n        if (spellsChosen.length > 0) {\r\n            classSpells = spellsChosen.map((spell) => {\r\n                if (spell === selectedSpell) {\r\n                    return (<li key={spell.name}>{spell.name}</li>);\r\n                } else {\r\n                    return (<li onClick={() => setSelectedSpell(spell)} key={spell.name}>{spell.name}</li>);\r\n                }\r\n            });            \r\n        } \r\n    }\r\n    \r\n    switch (props.navigation) {\r\n        //case \"Races\":        \r\n        //    if (props.isRaceSelected(raceSelected) || props.isClassSelected(classSelected)) {\r\n        //        return InfoDisplay(raceName, className, hit_die, ability_bonuses, saving_throws);\r\n        //    } else {\r\n        //        return (<div className=\"col-12 info\">\r\n        //                    <p className='text-center'> ...Choose your race</p>\r\n        //                </div>);\r\n        //    }\r\n        //case 'Classes':\r\n        //    if (props.isClassSelected(classSelected) || props.isRaceSelected(raceSelected)) {\r\n        //        return InfoDisplay(raceName, className, hit_die, ability_bonuses, saving_throws);\r\n        //    } else {\r\n        //        return (<div className=\"col-12 info\">\r\n        //                    <h3>{className}</h3>\r\n        //                    <p className='text-center'> ...Choose your class</p>\r\n        //                </div>);\r\n        //    }\r\n        case 'Ability-Scores':\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies);\r\n        case 'Proficiencies':\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies);\r\n        case 'Spells':\r\n            if (isSelected(classSelected)) {\r\n                let spellDescription;\r\n                if (selectedSpell.name === undefined) {\r\n               //     console.log(\"check check check\")\r\n                } else {\r\n                    spellDescription = <p>{selectedSpell.desc}</p>\r\n                }\r\n                return (<div className='col-12 info'>\r\n                    <div className='row'>\r\n                        <div className='col-12'>\r\n                            <h3>{props.raceSelected.name} {props.classSelected.name}</h3>\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <p>Spells</p>\r\n                            <ul>{classSpells}</ul>\r\n                        </div>\r\n                        <div className='col-9'>\r\n                            <h4>{selectedSpell.name} {selectedSpell.level}</h4>\r\n                            {spellDescription}\r\n                        </div>\r\n                    </div>\r\n                </div>);\r\n            } else {\r\n                return (<div className='col-12 info'>\r\n                            <p className='text-center'>..Choose your class to select spells </p>\r\n                        </div>);\r\n            }\r\n        default:\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies); \r\n        }\r\n    }\r\n    \r\nexport default Info","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }\r\n        }        \r\n        this.setState({ scores: newScores })\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        return (<form className='col-12'>\r\n                    <label className='col-3' htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3'htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3'htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3' htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3' htmlFor='str'>Strength</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <label className='col-3' htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-1'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"constructor() \", props);\r\n        this.state = {\r\n            proficiencies: [],\r\n            proficienciesChosen: [],            \r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected }  = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n        }           \r\n    }   \r\n    \r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props; \r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = []; \r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }        \r\n    }\r\n   \r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean \r\n        const { classSelected } = this.props;\r\n       // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }            \r\n        }\r\n    }\r\n    \r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {                    \r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });              \r\n                    \r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }           \r\n        }       \r\n    }\r\n\r\n    classProficienciesToChooseFrom() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = []\r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency) => {               \r\n                    for (var j = 0; j < proficiencies.length; j++) {\r\n                        for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                            if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                                return (<button className='btn-sm btn-block btn-secondary' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                            }\r\n                        }\r\n                    }                \r\n                    return (<button className='btn-sm btn-block btn-primary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                });\r\n            chooseFrom.push(<div className='col-6 chooseProficiency' key={'catetory' + choicesIndex}><h6>Choose: {classSelected.proficiency_choices[choicesIndex].choose}</h6>{chooseProficiencies}</div>)\r\n        }\r\n        return (chooseFrom);\r\n    }\r\n\r\n    render() {\r\n          return (<div className='row'>\r\n                    {this.classProficienciesToChooseFrom()}\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React, { Component } from 'react';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],    \r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"ClassSpells mounted:\", this.props);\r\n        \r\n        this.spellSlots();\r\n        this.setClassSpells(1); // character level: 1\r\n    }\r\n    componentDidUpdate() {\r\n        console.log(\"ClassSpells updated: \", this.props);\r\n    }\r\n    spellSlots = () => { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;    \r\n        let slotsAvailable = [];\r\n        if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {\r\n            for (var h = 0; h < levelData.length; h++) {\r\n                if (levelData[h].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = 0;\r\n                    for (var i = 1; i < 6; i++) {\r\n                        if (levelData[h].spellcasting['spell_slots_level_' + i] !== 0) {\r\n                            slotsAvailable[i] = levelData[h].spellcasting['spell_slots_level_' + i];\r\n                            console.log(\"SLOTS avail\", slotsAvailable[i])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var j = 0; j < levelData.length; j++) {\r\n                if (levelData[j].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = levelData[j].spellcasting.cantrips_known;\r\n                    for (var k = 1; k < 10; k++) {\r\n                        if (levelData[j].spellcasting['spell_slots_level_' + k] !== 0) {\r\n                            slotsAvailable[k] = levelData[j].spellcasting['spell_slots_level_' + k];\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        } \r\n        console.log(\"slots available \", slotsAvailable);\r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => {\r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => {\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n                this.props.updateAlertMessage(message)\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    setClassSpells = (level) => { \r\n        const { classSelected } = this.props;\r\n        const { spellsInfo } = this.props;   \r\n        let spells = []\r\n        console.log(\"setClassSpells() fired\")\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                    for (var j = 0; j < spellsInfo[i].classes.length; j++) {\r\n                        if (classSelected.name === spellsInfo[i].classes[j].name && (spellsInfo[i].level <= level)) {\r\n                            spells.push(spellsInfo[i])\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default: \r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n    \r\n    addSpell = (spell) => {\r\n        console.log(\"Add Spell: \", spell.name);\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n\r\n        let spells = []\r\n\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        console.log(\"Spells that wont be removed, \", spells)\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = [];\r\n       \r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            //console.log(\"Slots Spells\", slotSpells);\r\n\r\n            spellChoices[slotLevel] = slotSpells.map((spell) => {\r\n                let classNames = \"btn btn-sm btn-block spell-btn \";\r\n              //  console.log(\"Spell \", spell);\r\n                    if (spell.damage !== undefined) { // Is there a better check for this?\r\n                        if (spell.damage.damage_type !== undefined) {\r\n                            classNames += spell.damage.damage_type.index + \" \";\r\n                        }\r\n                    }\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += \"btn-secondary \";\r\n                        return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                    }\r\n                    for (var b = 0; b < spellsChosen.length; b++) {\r\n                        let chosen = b;\r\n                        if (spellsChosen[chosen].name === spell.name) {  \r\n                            classNames += \"btn-primary \";\r\n                            return (<button className={classNames} onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                        } \r\n                }\r\n                classNames += 'btn-secondary ';\r\n                return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n            });\r\n\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='cantrips'><h6>You have no spells to choose from at level 1</h6></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='col-6' key='cantrips'><h6>Cantrips</h6>{spellChoices[b]}</div>\r\n                }\r\n                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='col-6' key={keyForThee + b}><h6>Spell Level {b}</h6>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {\r\n        return (<div className='row'>{this.displaySpells()}</div>);\r\n    }\r\n}\r\n\r\nexport default ClassSpells;","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            raceSelected: {},            \r\n        }\r\n       // this.buttons = this.buttons.bind(this);\r\n       // this.selectRace = this.selectRace.bind(this);\r\n        console.log(\"Race Constructor\", props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            console.log('race is selcted');\r\n            this.setState({ raceSelected: this.props.raceSelected, });\r\n        }\r\n        console.log(\"Races buttons mounted\");\r\n    }\r\n\r\n    selectRace = (index) => {\r\n        const { racesInfo } = this.props;\r\n        const { setRace } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });\r\n                setRace(raceSelected[0]); \r\n                break;\r\n            }\r\n        }\r\n    }   \r\n\r\n    buttons = () => {\r\n        const { races } = this.props;\r\n        const { raceSelected } = this.state;\r\n        //console.log(\"race selected \", raceSelected);\r\n        let raceButtons = races.results.map((race) => {\r\n            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n                return (<button className='selectionButtons buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name} uh</button>);\r\n            }\r\n            return (<button onClick={() => this.selectRace(race.index)} className='selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n        });\r\n        return raceButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"col-12\">\r\n                         {this.buttons()}\r\n                </div>);\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n        }\r\n        this.buttons = this.buttons.bind(this);\r\n        this.selectClass = this.selectClass.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        } \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.props;\r\n        const { setClass } = this.props;\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], });\r\n                setClass(classSelected[0]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    buttons() {\r\n        const { classes } = this.props\r\n        const { classSelected } = this.state;\r\n\r\n        let classButtons = classes.results.map((characterClass) => {\r\n            if (isSelected(classSelected) && classSelected.index === characterClass.index) {\r\n                //console.log(\"selection disabled for class\");\r\n                return (<button className='selectionButtons buttonSelected col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n            }\r\n            return (<button onClick={() => this.selectClass(characterClass.index)} className='selectionButtons col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n\r\n        });       \r\n        return classButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"row\">\r\n                    <div className=\"col-12 text-center selection\">\r\n                        {this.buttons()}\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './ClassProficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nconst Selection = (props) => {\r\n    //console.log(\"Selection() props\", props)\r\n    const abilityScores = props.abilityScores;\r\n    const classSelected = props.classSelected;\r\n    const navigation = props.navigation;\r\n    const getScore = props.getScore;\r\n\r\n    switch (navigation) {\r\n        case 'Races':\r\n            return (<div className='col-12 text-center selection'><Races {...props} /></div>);           \r\n        case 'Classes':\r\n            return (<div className='col-12 text-center selection'><Classes {...props} /></div>); \r\n        case 'Proficiencies':\r\n            if (isSelected(classSelected)) {\r\n                return (<div className='col-12 text-center selection'><ClassProficiencies {...props} /></div>);\r\n            }\r\n            return (<div className='col-12 text-center selection'>You must choose a class to select your proficiencies.</div>);            \r\n        case 'Spells':\r\n            if (isSelected(classSelected) && classSelected.spellcasting !== undefined) {\r\n                return (<div className='col-12 text-center selection'>\r\n                            <ClassSpells {...props} />\r\n                        </div>);\r\n            }\r\n            return (<div className='col-12 text-center selection'>{classSelected.name} is not a spell caster.</div>);            \r\n        case 'Ability-Scores':\r\n            let scores = abilityScores.results.map((abilityScore, index) => {\r\n                return (<button onClick={() => getScore(abilityScore.index)} className='col-2 abilityScoresSelection' key={index}>{abilityScore.name}</button>)\r\n            });\r\n            return (\r\n                <div className='col-12 text-center selection'>\r\n                    <div className='row'>\r\n                        <div className='col-12'>\r\n                            {scores}\r\n                        </div>\r\n                        <AbilityScoresForm handleSubmit={props.handleSubmit} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        default:\r\n            return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n    }    \r\n}\r\n\r\n//<div className='row'>\r\n    //<div className='col-12'>\r\n    //    <AbilityScoresForm handleSubmit={props.handleSubmit} />\r\n    //</div>\r\n//</div>\r\n\r\nexport default Selection ","import React from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nconst Navigation = (props) => {\r\n //   console.log(\"Navigation\", props)\r\n    const navigation = props.navigation\r\n    const navigationCategories = props.navigationCategories\r\n    const navigate = props.navigate\r\n    const classSelected = props.classSelected\r\n\r\n    let navButtons = navigationCategories.map((category, index) => {\r\n        if (isSelected(classSelected)) {\r\n            if (navigation === category) {\r\n                return (<button className='navigationButtons buttonSelected disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                return (<button onClick={() => navigate(category)} className='navigationButtons' key={index}>{category}</button>);\r\n            }\r\n        } else {\r\n            if (navigation === category) {\r\n                return (<button className='navigationButtons buttonSelected disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n                    switch (navigation) {\r\n                        case 'Proficiencies':\r\n                            return (<button onClick={() => navigate(category)} className='navigationButtons shiny' key={index}>{category}</button>);\r\n                        default:\r\n                            return (<button onClick={() => navigate(category)} className='navigationButtons shinyBlue' key={index}>{category}</button>);\r\n                    }     \r\n                } else {\r\n                    return (<button onClick={() => navigate(category)} className='navigationButtons' key={index}>{category}</button>);\r\n                }\r\n            }\r\n        }                \r\n    });\r\n    return (<div className=\"col-12 text-center navigation\">\r\n                {navButtons}\r\n            </div>);\r\n}\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n\r\nimport Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\n//import isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScoresSelected: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},\r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setSpells: this.setSpells,\r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { abilityScores } = this.props;\r\n        this.abilityScoresSetup(abilityScores);\r\n        console.log(\"CreateCharacter mounted\");\r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"CreateCharacter updated\")\r\n    }\r\n\r\n\r\n    abilityScoresSetup = (abilityScoresData) => {\r\n        const { count } = abilityScoresData;\r\n        const { results } = abilityScoresData;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    getScore = (ability) => {\r\n        const { abilityScores } = this.props;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = this.randomDiceRoll(6)\r\n                this.setState({abilityScoresSelected: scores})\r\n                break;\r\n            }\r\n        }\r\n   //     console.log(\"Ability Scores Selected\", abilityScoresSelected[ability])\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [] });\r\n    }\r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n\r\n    //isRaceSelected = (raceSelected) => {\r\n    //    return (this.isSelected(raceSelected));\r\n    //}\r\n\r\n    //isClassSelected = (classSelected) => {\r\n    //    return (this.isSelected(classSelected));\r\n    //}\r\n\r\n    //isSelected = (obj) => {\r\n    //    for (var key in obj) {\r\n    //        obj.hasOwnProperty(key)\r\n    //        return true;\r\n    //    }\r\n    //    return false;\r\n    //}\r\n\r\n    handleSubmit = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n       \r\n    render() {\r\n       // const { navigationCategories, navigation, } = this.state\r\n        \r\n        return (<div id='creator' className='container-fluid creation'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <Info {...this.state} {...this.props} />\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} setRace={this.setRace} setClass={this.setClass} handleSubmit={this.handleSubmit} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>\r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\n\r\n\r\nexport default CreateCharacter","import React, { Component, useEffect } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\nimport isSelected from './helper/helper-functions'\r\nimport isArrayEmpty from './helper/helper-array'\r\n\r\n\r\nexport default class App extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {           \r\n            races: {},\r\n            racesInfo: new Array(0),           \r\n            classes: {},\r\n            classesInfo: new Array(0),\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            spells: {},\r\n            spellsInfo: [],\r\n            features: {},\r\n            featuresInfo: [],\r\n            levelData: [],\r\n            ready: false,\r\n        }\r\n      //  this.state = this.initialState;\r\n      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n     //   this.getStuff = this.getStuff.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        const promise = this.getCharacterInformation(url);\r\n        promise.then((data) => {\r\n            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n        console.log(data)})\r\n    }\r\n     \r\n\r\n    getCharacterInformation(url) {\r\n      return Promise.all([this.getRaces(url),\r\n            this.getClasses(url),\r\n            this.getAbilityScores(url),\r\n            this.getSpells(url),\r\n            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n                return {races, classes, abilityScores, spells, features}\r\n            });\r\n    }\r\n\r\n\r\n    getCharacterData(races, classes, abilityScores, spells, features) {\r\n        Promise.all([this.getInfo(races, 'races'),\r\n            this.getInfo(classes, 'classes'),\r\n            this.getLevelData(classes, 1),\r\n            this.getInfo(abilityScores, 'ability-scores'),\r\n            this.getInfo(spells, 'spells'),\r\n            this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ ready: true, }) })\r\n       \r\n    }\r\n\r\n    getRaces(url) {        \r\n       return fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, ); return result })          \r\n            .catch(e => { console.log(e + \" -- \" + url); });        \r\n    }\r\n\r\n    getClasses(url) {\r\n       return fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n            .catch(e => { console.log(\"API Request Error: \", e); });\r\n    }\r\n\r\n    getAbilityScores(url) {\r\n      return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n            .catch(e => { console.log(\"API Request Error: \", e); });\r\n    }\r\n\r\n    getSpells(url) {\r\n      return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, }, ); return result })\r\n            .catch(e => { console.log(\"API Request Error: \", e); });\r\n    }\r\n\r\n    getFeatures(url) {      \r\n       return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result }, ); return result  })\r\n            .catch(e => { console.log(\"API Request Error: \", e); });\r\n    }\r\n\r\n    getLevelData(data, currentLevel) {       \r\n        let levels = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n           Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n                .then(result => result.json())\r\n                .then(result => { levels.push(result) })            \r\n        }\r\n        console.log(\"Level data\", levels)\r\n        this.setState({\r\n            levelData: levels,\r\n        });\r\n    }\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n    // console.log(\"getInfo() data coming in: \", data, category);\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) })\r\n        }\r\n        console.log(info);\r\n    // console.log(\"getInfo() info being set: \", info, category);\r\n        switch(category) {\r\n            case 'races':\r\n                this.setState({ racesInfo: info, });\r\n                break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);  \r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                console.log(\"reatures\", info)\r\n                this.setState({ featuresInfo: info, })\r\n                break;\r\n            default:\r\n        }\r\n    // let cat = category;\r\n    // console.log(\"Cat..\", category, this.state)\r\n    // this.readyToCreate();\r\n    }\r\n    \r\n    readyToCreate(data) {\r\n        //const characterInfo = data;\r\n        let check = true;\r\n        console.log(data);\r\n        const characterInfo = this.state;\r\n        console.log(\"CharacterInfo \", characterInfo);\r\n        \r\n\r\n        for (var key in data) {\r\n            switch (Object.getPrototypeOf(data[key]).constructor) {\r\n                case Array:\r\n                    isArrayEmpty(data[key])\r\n                    if (data[key].length === 0) {\r\n                  // console.log(\"Array setting ready to false \", key);\r\n                  // check = false;\r\n                    }\r\n                    break;\r\n                case Object:\r\n                    if (!isSelected(data[key])) {\r\n                  // console.log(\"Object setting ready to false \", key);\r\n                        check = false;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (!check) {\r\n                break;\r\n            }\r\n        }\r\n        return check;\r\n    }\r\n          \r\n    render() {\r\n        const { ready } = this.state;\r\n              \r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <p>...Loading API</p>\r\n                    </div>\r\n                </div>\r\n            </div>);  \r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);                   \r\n        }\r\n    }\r\n}\r\n// races.results === undefined || classes.results === undefined || abilityScores.results === undefined || spells.results === undefined || spellsInfo.length === spells.count || levelData.length === 12 || features.results === undefined","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}