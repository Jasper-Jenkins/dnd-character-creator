{"version":3,"sources":["helper/helper-functions.js","helper/modal/proficiency-modal.js","champion/Proficiencies.js","helper/spell-modal.js","ClassSpells.js","helper/search-bar.js","helper/modal.js","helper/search-results.js","champion/Races.js","champion/Classes.js","helper/AbilityScoresForm.js","helper/random-dice-roll.js","champion/AbilityScores.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","ProficiencyModal","props","state","proficiency","this","console","log","desc","map","index","className","id","tabIndex","role","aria-labelledby","aria-hidden","name","type","data-dismiss","aria-label","showProficiency","Component","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","classSelected","proficienciesChosen","choices","proficiency_choices","i","from","length","choose","message","updateAlertMessage","newProficiency","filter","newProfs","proficiencies","chosen","setState","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","isClassSelected","proficiencySelected","category","bind","count","startingProficiences","numberOfCategories","url","includes","fetch","replace","then","result","json","catch","e","chooseFrom","chooseProficiencies","classNames","j","k","onClick","data-toggle","data-target","setProficiencyInfo","push","newCategory","buttons","num","undefined","setNavigationCategory","proficienciesNavigation","startingProficiencies","proficienciesToChooseFrom","SpellModal","spell","showSpell","ClassSpells","updateSpells","spellsChosen","spells","setChosenSpells","spellsChosenByLevel","cantrips","levelOneSpells","level","spellSource","currentLevel","level0","level1","spellSlots","addSpell","setSelectedSpell","removeSpell","displaySpells","classSpells","spellChoices","slotLevel","slotSpells","setSpellInfo","spellChoiceDisplay","levelData","navigationCategory","selected","spellBook","spellsInfo","selectedSpell","getSpells","getInfo","spellcasting","setClassSpells","setSpells","setSpellsInfo","data","info","results","spellsInfoData","alert","slotsAvailable","cantrips_known","updateSpellSlots","spellsSlots","spellsNavigation","SearchBar","userValue","handleChange","htmlFor","value","onChange","InfoModal","traits","getTraits","raceSelected","trait","showTraits","SearchResults","champions","select","cards","race","bonuses","ability_bonuses","ability_score","bonus","target","size_description","age","alignment","language_desc","speed","championClass","prof","savingThrows","saving_throws","savingThrow","hit_die","CharacterRace","searchRaces","word","racesInfo","oldList","newList","toLowerCase","searchResults","races","selectRace","getRaces","setRaces","setRacesInfo","setRace","navigate","CharacterClass","searchClasses","classesInfo","characterClass","classes","selectClass","getClasses","setClasses","setClassesInfo","setClass","cClass","getLevelData","AbilityScoresForm","handleFocus","event","scores","newScores","JSON","parse","stringify","parseInt","submitForm","handleSubmitAbilityScores","initialState","abilityScoresSelected","onFocus","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","AbilityScores","abilityScoresSetup","abilityScores","abilities","noZeroes","zeroesAlert","abilityScoresInfo","abilityScoresSwitch","getScore","getAbilityScores","setAbilityScores","setAbilityScoresInfo","setAbilityScoresSelected","abilityScore","ability","full_name","scoreDisplay","abilityScoreSwitchy","Selection","navigation","Navigation","navigationCategories","aria-disabled","aria-controls","aria-expanded","navigationButtons","UserAlert","element","alertMessage","CreateCharacter","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","slots","profs","updateProficiencies","proficienciesChoices","champion","chosenRace","chosenClass","App","chooseYourChampion","ready","features","featuresInfo","enter","Promise","all","getFeatures","resolve","ReactDOM","render"],"mappings":"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","file":"static/js/main.bea9c826.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React from 'react'\r\nimport { Component } from 'react';\r\nimport isSelected from '../helper-functions'\r\nexport default class ProficiencyModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            proficiency: {}\r\n        }\r\n    }\r\n\r\n    showProficiency() {\r\n        const { proficiency } = this.props\r\n        console.log(\"showProficiency()\", proficiency)\r\n        if (isSelected(proficiency)) {\r\n            let proficiencyDescriptions = proficiency.desc.map((desc, index) => {\r\n                return (<p className='' key={index}>{desc}</p>);\r\n            });\r\n            return proficiencyDescriptions;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        //console.log(\"proficiency modal: \", this.props.proficiency);\r\n      //  proficiency \r\n        return (<div className=' info-modal'>\r\n            <div className=\"modal fade\" id='proficiency-info' tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"proficiencyInfo\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"proficiencyInfo\">{this.props.proficiency.name}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {this.showProficiency()}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport ProficiencyModal from '../helper/modal/proficiency-modal'\r\n\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //   console.log(\"constructor() \", props);\r\n        this.state = {\r\n            isClassSelected: false,           \r\n            proficiencies: [],\r\n            proficienciesChosen: [],\r\n            proficiencySelected: {},\r\n            category: 0,\r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected } = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n            this.setState({ isClassSelected: true, });\r\n\r\n        }\r\n    }\r\n\r\n    startingProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const count = classSelected.proficiencies.length;\r\n        let startingProficiences = classSelected.proficiencies.map((proficiency, index) => {\r\n            let proficiencyFormatting = '';\r\n            if (index === count - 1) {\r\n               // console.log(proficiency, ' check');\r\n                proficiencyFormatting = proficiency.name + '.'\r\n                return (proficiencyFormatting)\r\n            }            \r\n            proficiencyFormatting = proficiency.name + ', '\r\n            return (proficiencyFormatting)\r\n\r\n        });\r\n    return(<div className = 'card-body' > <h5 className='card-title'>Starting Proficiencies</h5><p className='card-text'>{startingProficiences} <button className='btn btn-sm btn-primary'>?</button></p></div>)\r\n    }\r\n\r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props;\r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = [];\r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }\r\n    }\r\n\r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean up\r\n        const { classSelected } = this.props;\r\n        // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {\r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setProficiencyInfo(proficiency) {\r\n       \r\n        const url = 'https://www.dnd5eapi.co'\r\n      //  let proficiencyInfo = {};\r\n        console.log(proficiency)\r\n        if (isSelected(proficiency)) {\r\n            if (proficiency.index.includes('skill-')) {\r\n                fetch(url + '/api/skills/' + proficiency.index.replace('skill-', ''))\r\n                    .then(result => result.json())\r\n                    .then(result => { this.setState({ proficiencySelected: result }); console.log(result) /* console.log('getInfo() for spells request: ', result)*/ })\r\n                    .catch(e => { console.log(e + \" -- getProficiency()  -- \" + url); });\r\n            }\r\n            \r\n        }\r\n        //this.setState({ proficiencySelected: proficiency, });\r\n    }\r\n\r\n\r\n    proficienciesToChooseFrom(category) {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = [];\r\n        console.log(classSelected);\r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency, index) => {\r\n                let classNames = 'btn btn-md '\r\n                for (var j = 0; j < proficiencies.length; j++) {\r\n                    for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                        if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                            classNames += 'btn-success col-11';\r\n                            //return (<button className='btn-sm col-12 btn-success' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                            return (<div className=\"btn-group col-12 proficiency-selection\" role=\"group\" aria-label=\"proficiency-buttons\" key={index}>\r\n                                        <button className={classNames} type='button' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>\r\n                                <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#proficiency-info' onClick={() => { this.setProficiencyInfo(proficiency) }} key={'info-btn-proficiency' + proficiency.name}>?</button>\r\n                            </div>);\r\n                        }\r\n                    }\r\n                }\r\n                classNames += 'btn-secondary col-11';\r\n               // return (<button className='btn-sm col-12 btn-secondary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                return (<div className=\"btn-group col-12 proficiency-selection\" role=\"group\" aria-label=\"proficiency-buttons\" key={index}>\r\n                            <button className={classNames} type='button' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>\r\n                            <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#proficiency-info' onClick={() => { this.setProficiencyInfo(proficiency) }} key={'info-btn-proficiency' + proficiency.name}>?</button>\r\n                        </div>)\r\n\r\n            });\r\n            chooseFrom.push(chooseProficiencies);\r\n        }\r\n        return (chooseFrom[category]);\r\n    }\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ category: newCategory, });\r\n    }\r\n\r\n    proficienciesNavigation() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let buttons = [];\r\n        for (var a = 0; a < classSelected.proficiency_choices.length; a++) {\r\n            let newCategory = a;\r\n            let check = proficienciesChosen[newCategory]; //I have to check because this comes through undefined the very first time this function runs, need to figure out a better solution.\r\n            let num;\r\n            if (check === undefined) {\r\n                num = 0;\r\n            } else {\r\n                num = proficienciesChosen[newCategory].length;\r\n            }\r\n            if (category === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-secondary' onClick={() => this.setNavigationCategory(newCategory)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='card-header text-white bg-dark text-center'>{buttons}</div>);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { classSelected } = this.props;\r\n        const { category, proficiencySelected } = this.state;\r\n        const { isClassSelected } = this.state; //this may need to be changed to not confuse with the object 'classSelected'\r\n        return (isClassSelected ? <div className='col-12 selection'>\r\n            <div className=\"col-12 text-center selectionTitle\">\r\n                <h3>{classSelected.name} proficiencies</h3>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"card border-dark mb-3 character-card \">                   \r\n                        {this.proficienciesNavigation()}                   \r\n                    <div className=\"card-body\">\r\n                        {this.startingProficiencies()}\r\n                        {this.proficienciesToChooseFrom(category)}\r\n                        <ProficiencyModal proficiency={proficiencySelected} /> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> : <div className='col-12 text-center selection'><h3 className='selectionTitle'>You must choose a class to select your proficiencies.</h3></div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React from 'react'\r\nimport { Component } from 'react';\r\nimport isSelected from './helper-functions'\r\nexport default class SpellModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            spell: {}\r\n        }       \r\n    }  \r\n\r\n    showSpell() {\r\n        console.log(\"showSpell()\", this.props.spell)\r\n        const { spell } = this.props\r\n        if (isSelected(this.props.spell)) {\r\n            let spellDescriptions = spell.desc.map((desc, index) => {\r\n                return (<p className='' key={index}>{desc}</p>);\r\n            });\r\n            return spellDescriptions;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"spell modal: \", this.props.spell);\r\n        return (<div className=' info-modal'>\r\n            <div className=\"modal fade\" id='spell-info' tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"spellInfo\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"spellInfo\">{this.props.spell.name}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            { this.showSpell() }\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n   }    \r\n}","import React, { Component } from 'react';\r\nimport isSelected from './helper/helper-functions';\r\nimport SpellModal from './helper/spell-modal';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],\r\n            levelData: {},\r\n            navigationCategory: 0,\r\n            selected: false, \r\n            spellBook: {},\r\n            spells: {},\r\n            spellsInfo: [],\r\n            selectedSpell: {},\r\n        };\r\n        this.spellSlots = this.spellSlots.bind(this);\r\n        this.getSpells = this.getSpells.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);   \r\n        this.setSpellInfo = this.setSpellInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {   \r\n        if (isSelected(this.props.classSelected) && this.props.classSelected.spellcasting !== undefined) {\r\n           // this.setState({ selected: true, });\r\n            \r\n            // character level: 1\r\n            if (this.props.spellsInfo.length === this.props.spells.count) {\r\n                console.log(\"setting spells from props\")\r\n                this.setState({ spells: this.props.spells, spellsInfo: this.props.spellsInfo, })\r\n                this.spellSlots();\r\n                this.setClassSpells(1, this.props.spellsInfo);\r\n            } else {\r\n                console.log(\"setting spells from api\")\r\n                this.getSpells();\r\n                this.spellSlots();\r\n             //   this.setClassSpells(1);\r\n            }\r\n        } else {\r\n            console.log(\"not a caster\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.spellsInfo.length === this.state.spells.count) {\r\n            this.props.setSpells(this.state.spells)\r\n            this.props.setSpellsInfo(this.state.spellsInfo)\r\n       //     console.log(\"checked it\");\r\n        }\r\n    }   \r\n    \r\n    getSpells() {\r\n        const { classSelected } = this.props;\r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + classSelected.spells)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState({ spells: result, }, this.getInfo(result)); console.log('getSpell() result: ', result) })\r\n                .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        const { classSelected } = this.props;\r\n        console.log(classSelected.name, ' spells ', data);\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result); if (this.state.spellsInfo.length === this.state.spells.count) { this.setClassSpells(1, info) } /* console.log('getInfo() for spells request: ', result)*/ })\r\n                .catch(e => { console.log(e + \" -- getInfo() for spells -- \" + url); });\r\n        }\r\n        this.setState({ spellsInfo: info });      \r\n    }\r\n\r\n    setClassSpells(level, spellsInfoData) {\r\n       // const { classSelected } = this.props;\r\n        const spellsInfo = spellsInfoData;\r\n     //   const { spellsInfo } = this.state;\r\n        let spells = [];\r\n\r\n        console.log('setClassSpells ', spellsInfo)\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                       if (spellsInfo[i].level <= level) {\r\n                           spells.push(spellsInfo[i])\r\n                       }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default:\r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //getLevelData(currentLevel) { //\r\n    //    const { classSelected } = this.props; \r\n    //   // console.log(\"getLeveData()\");\r\n    //    //let level = {}; \r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    Promise.resolve(fetch(url + \"/api/classes/\" + classSelected.index + \"/levels/\" + currentLevel))\r\n    //        .then(result => result.json())\r\n    //        .then(result => {\r\n    //            this.setState({\r\n    //                levelData: result,\r\n    //            }, this.props.setLevelData(result));\r\n    //        });\r\n        \r\n        \r\n    //}\r\n\r\n    spellSlots() { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;\r\n        let slotsAvailable = [];\r\n        console.log(\"spellSlots(), levelData: \", levelData)\r\n        if (levelData.spellcasting !== undefined) {\r\n            if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {        \r\n                for (var i = 1; i < 6; i++) {\r\n                    if (levelData.spellcasting['spell_slots_level_' + i] !== 0) {\r\n                        slotsAvailable[i] = levelData.spellcasting['spell_slots_level_' + i]; \r\n                        console.log(classSelected.name, \" spell slots available: \", slotsAvailable[i])\r\n                    }\r\n                }\r\n            } else {\r\n                slotsAvailable[0] = levelData.spellcasting.cantrips_known;\r\n                for (var k = 1; k < 10; k++) {\r\n                    if (levelData.spellcasting['spell_slots_level_' + k] !== 0) {\r\n                        slotsAvailable[k] = levelData.spellcasting['spell_slots_level_' + k];\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n        console.log(\"Slots available \", slotsAvailable);\r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n      \r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => { //this will only work for level one character creation. Works for this app as its for level one only. \r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => { // DUDE! this needs some loving. refactor this.\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        \r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    \r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n        let spells = []\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ navigationCategory: newCategory, });\r\n    }\r\n\r\n    spellsNavigation() {\r\n      //  const { spellsChosen } = this.props;\r\n        const { navigationCategory } = this.state;\r\n        const { spellSlots } = this.state;\r\n        let buttons = [];\r\n        let spellsSlots = this.spellsChosenByLevel();\r\n        for (var a = 0; a < spellSlots.length; a++) {\r\n            let newCategory = a;\r\n            let num;\r\n            num = spellsSlots[a];            \r\n            if (navigationCategory === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={a}> Choose: {spellSlots[a] - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-seconday color-white' onClick={() => this.setNavigationCategory(newCategory)} key={a}>Choose: {spellSlots[a] - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n    setSpellInfo(spell) {\r\n        this.setState({ selectedSpell: spell });\r\n    }\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = []; \r\n       //let target = ''\r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            spellChoices[slotLevel] = slotSpells.map((spell, index) => {\r\n                let classNames = 'btn btn-md ';\r\n                //let target = '#spell-' + spell.index;\r\n                \r\n                //if (spell.damage !== undefined) { // Is there a better way to style by damage type?\r\n                //    if (spell.damage.damage_type !== undefined) {\r\n                //        classNames += spell.damage.damage_type.index + \" \";\r\n                //    }\r\n                //}\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += 'btn-secondary col-11';\r\n                   // console.log(\"Target, \", target);\r\n                    return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                        <button className={classNames} type='button' onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                        <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n                                          </div>);\r\n                }\r\n                for (var b = 0; b < spellsChosen.length; b++) {\r\n                    let chosen = b;\r\n                    if (spellsChosen[chosen].name === spell.name) {  \r\n                        classNames += 'btn-success col-11';\r\n                        return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                            <button className={classNames} type='button' onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                            <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n                           \r\n                        </div>);\r\n                    } \r\n                }\r\n                classNames += 'btn-secondary col-11';\r\n                return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                    <button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                    <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n                   \r\n                </div>);\r\n            });\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='card-body ' key='no-known-spells'><h3 className='card-text text-center'>You have no spells to choose from at level 1</h3></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='card-body ' key='cantrips'><h3 className='card-text text-center'>Cantrips</h3>{spellChoices[b]}</div>\r\n                }                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='card-body ' key={keyForThee + b}><h3 className='card-text text-center'>Level {b} spells</h3>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {        \r\n        const { navigationCategory } = this.state; \r\n        const { selectedSpell } = this.state;\r\n        const spells = this.displaySpells();\r\n        console.log(\"Render spells, \", spells);\r\n       // const navigation = this.spellsNavigation();\r\n        \r\n        return ( isSelected(this.props.classSelected) ?\r\n            <div className='col-12 selection'>\r\n                <div className='row'>\r\n                    <div className=\"card col-12 border-dark mb-3 character-card \">\r\n                        <div className=\"card-header text-white text-center bg-dark\">\r\n                            {this.spellsNavigation()}\r\n                        </div>                        \r\n                        {spells[navigationCategory]}\r\n                        <SpellModal spell={selectedSpell} />\r\n                    </div>\r\n                </div>\r\n            </div> :\r\n            <div className='col-12 text-center selection'>\r\n           <h3>Choose a class to select your spells.</h3>\r\n                </div>);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default ClassSpells;","import React from 'react'\r\n\r\nexport default function SearchBar({ userValue, handleChange }) {\r\n    return (\r\n        <div className='col-7 text-center searchBar'>           \r\n            <label className='search-label col-4' htmlFor='searchBar'>Search:</label><input className='col-8' value={userValue} name='searchBar' id='searchBar' onChange={handleChange} />\r\n        </div>\r\n    );\r\n};","import React, { Component } from 'react'\r\n//import isSelected from './helper-functions.js'\r\n\r\nclass InfoModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            traits: [],\r\n        }       \r\n        this.getTraits = this.getTraits.bind(this);\r\n    }\r\n\r\n    componentDidMount() { // this is causing problems. need to be worked so it loads when user clicks. \r\n    //    console.log(\"did it mount?\");\r\n        this.getTraits(this.props.info);\r\n    }\r\n\r\n    getTraits(raceSelected) {\r\n        const url = 'https://www.dnd5eapi.co'\r\n        //let traitsInfo = [];\r\n        if (raceSelected.index === \"human\") {\r\n         //  console.log(\"Got to the humans\")\r\n        } else {\r\n            for (var a = 0; a < raceSelected.traits.length; a++) {\r\n                fetch(url + raceSelected.traits[a].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { this.setState((state) => ({ traits: [...state.traits, result]}))})\r\n                    .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n            }\r\n        }     \r\n    }\r\n\r\n    showTraits() {\r\n        const { traits } = this.state;    \r\n        let info = traits.map((trait) => {\r\n            return (<div key={'trait-'+trait.name}>\r\n                <h5>{trait.name}</h5>\r\n                <p>{trait.desc[0]}</p>\r\n            </div>)\r\n        });\r\n        return info;\r\n    }\r\n\r\n    render() {\r\n        const { traits } = this.state;\r\n        const { name } = this.props.info;\r\n       // console.log(this.props);\r\n        return (<div className='col-1 info-modal'>\r\n            <div className=\"modal fade\" id={'race-'+this.props.info.index} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"raceTraits\">{name} Traits</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {traits.length !== 0 ? this.showTraits() : \"Humans do not have racial traits\"}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default InfoModal","import React from 'react'\r\nimport InfoModal from './modal'\r\n\r\nexport default function SearchResults({ champions, select, category }) {\r\n   // console.log(champions)\r\n    let cards = [];\r\n    switch (category) {\r\n        case 'races':\r\n            cards = champions.map((race) => {\r\n                let bonuses = \"\";\r\n                for (var a = 0; a < race.ability_bonuses.length; a++) {\r\n                    bonuses += race.ability_bonuses[a].ability_score.name + \": \" + race.ability_bonuses[a].bonus + \" \";\r\n                }\r\n                let traits = [];\r\n                let target = '#race-' + race.index;\r\n                for (var b = 0; b < race.traits.length; b++) { //UI formatting commas and period. \r\n                    if (b !== race.traits.length-1) {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}, </span>);\r\n                    } else {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}. </span>);\r\n                    }\r\n                }\r\n                traits.push(<button className='btn btn-sm btn-primary'data-toggle=\"modal\" data-target={target} key='raceTraitsInfoButton'>?</button>)\r\n\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={race.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{race.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n                        <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n                        <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n                        <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n                        <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n                        <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n                        <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(race.index)}>Choose {race.name}</button>\r\n                        <InfoModal info={race} />\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break;\r\n        case 'classes':\r\n            cards = champions.map((championClass) => {\r\n                let proficiencies = \"\";\r\n                let count = 0;\r\n                proficiencies = championClass.proficiencies.map((prof) => {\r\n                    if (count === championClass.proficiencies.length - 1) {\r\n                        return (prof.name + \". \");\r\n                    }\r\n                    count++;\r\n                    return (prof.name + \", \");\r\n                });\r\n                let savingThrows = '';\r\n                savingThrows = championClass.saving_throws.map((savingThrow) => {\r\n                    return (savingThrow.name + \" \")\r\n                });\r\n\r\n                //let bonuses = this.abilityBonuses(race);\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={championClass.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{championClass.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Hit die:</strong> {championClass.hit_die}</p>\r\n                        <p className=\"card-text\"><strong>Starting proficiencies:</strong> {proficiencies} </p>\r\n                        <p className=\"card-text\"><strong>Saving Throws:</strong> {savingThrows}</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(championClass.index)}>Choose {championClass.name}</button>\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break; \r\n        default:\r\n            break;\r\n    }\r\n    return (cards);\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\n//import InfoModal from '../helper/modal'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\n//export default class CharacterRace extends Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            raceSelected: {},\r\n//            searchResults: [],\r\n//            word: \"\",\r\n          \r\n//        }\r\n//        //this.buttons = this.buttons.bind(this);\r\n//        //this.selectRace = this.selectRace.bind(this);\r\n//        //this.abilityBonuses = this.abilityBonuses.bind(this);\r\n//        //this.raceCards = this.raceCards.bind(this);\r\n//        //this.raceCarousel = this.raceCarousel.bind(this);\r\n//        this.traits = this.traits.bind(this);\r\n//    }\r\n\r\n\r\n//    componentDidMount() {\r\n//        if (isSelected(this.props.raceSelected)) {\r\n//            this.setState({ raceSelected: this.props.raceSelected, });\r\n//        }\r\n//        console.log(this.props);\r\n//    }\r\n\r\n//    getRaces() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, },); return result })\r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n//    }\r\n\r\n//    selectRace(index) {\r\n//        const { racesInfo } = this.props;\r\n//        const { setRace } = this.props;\r\n//        for (let i = 0; i < racesInfo.length; i++) {\r\n//            if (racesInfo[i].index === index) {\r\n//                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n//                this.setState({ raceSelected: raceSelected[0] });\r\n//                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n//                console.log(raceSelected[0]);\r\n//                break;\r\n//            }\r\n//        }\r\n//    }   \r\n\r\n//    buttons() {\r\n//        const { races } = this.props;\r\n//        const { raceSelected } = this.state;        \r\n//        let raceButtons = races.results.map((race) => {\r\n//            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n//                return (<button className='btn btn-sm buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n//            }\r\n//            return (<button onClick={() => this.selectRace(race.index)} className='btn btn-sm selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n//        });\r\n//        return raceButtons;\r\n//    }\r\n\r\n//    abilityBonuses(characterRace) {        \r\n//        let bonuses = \"\"; \r\n//        for (var a = 0; a < characterRace.ability_bonuses.length; a++) {\r\n//            bonuses += characterRace.ability_bonuses[a].ability_score.name + \": \" + characterRace.ability_bonuses[a].bonus + \" \";\r\n//        }\r\n//        return (bonuses);\r\n//    }\r\n\r\n//    traits(characterRace) {\r\n//        let traits = [];        \r\n//        let target = '#race-' + characterRace.index;\r\n//        for (var a = 0; a < characterRace.traits.length; a++) {\r\n//            traits.push(<span data-toggle=\"modal\" data-target={target} key={characterRace.traits[a].name}>{characterRace.traits[a].name} </span>);\r\n//        }\r\n//        return (traits);\r\n//    }\r\n\r\n//    raceCards() {       \r\n//        const { racesInfo } = this.props;  \r\n//        //console.log(racesInfo);\r\n//        let raceCards = racesInfo.map((race, index) => {            \r\n//            let bonuses = this.abilityBonuses(race);\r\n//            let traits = this.traits(race);\r\n//            return (<div className=\"card border-dark mb-3 \" key={race.index}>\r\n//                <div className=\"card-header text-white bg-dark text-center\">\r\n//                         <h4>{race.name}</h4>\r\n//                        </div>\r\n//                <div className=\"card-body\">                           \r\n//                    <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n//                    <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n//                    <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n//                    <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n//                    <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n//                    <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n//                    <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n//                    <button className=\"btn btn-primary\" onClick={() => this.selectRace(race.index)}>Choose {race.name}</button>\r\n//                    <InfoModal info={race} />\r\n//                 </div>\r\n//               </div>);\r\n//        }); \r\n//        return (raceCards);\r\n//    }\r\n//   // <button type=\"button\" className=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModalLong\">i</button>\r\n   \r\n//    searchRaces = (word) => {\r\n//        const { racesInfo } = this.props;\r\n//        this.setState({\r\n//            word: word,\r\n//        });\r\n//        let oldList = racesInfo.map((race) => {\r\n//            return race;\r\n//        });\r\n//        let newList = [];\r\n//        if (word !== \"\") {\r\n//            newList = oldList.filter(race => race.index.includes(word.toLowerCase())); \r\n//        //    console.log(oldList);\r\n//            this.setState({ searchResults: newList, });\r\n//        } else {\r\n//            console.log(newList);\r\n//            this.setState({ searchResults: oldList, });           \r\n//        }\r\n//    }\r\n\r\n\r\n//    render() {\r\n//        // let cards = this.raceCards();\r\n//        const { word } = this.state;\r\n//        const { searchResults } = this.state;\r\n//        return (<div className='selection col-12'>\r\n//            <h2 className=\"selectionTitle text-center\">Choose your Champions Race</h2>\r\n//            <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />\r\n//            {word !== \"\" ? <SearchResults champions={searchResults} /> : this.raceCards()}           \r\n//            </div>);\r\n//    }\r\n//}\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            raceSelected: {},\r\n            searchResults: [], \r\n            word: \"\",\r\n\r\n        }\r\n        this.selectRace = this.selectRace.bind(this);\r\n        this.getRaces = this.getRaces.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            this.setState({ raceSelected: this.props.raceSelected, });            \r\n        }\r\n        if (isSelected(this.props.races) && this.props.racesInfo.length === 9) {\r\n            this.setState({races: this.props.races, racesInfo: this.props.racesInfo,})\r\n        } else {\r\n            this.getRaces();\r\n        }\r\n      //  console.log(this.props);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n   //     console.log(\"Unmounting <Races />, races: \", this.state.races, \" racesInfo: \", this.state.racesInfo)\r\n        this.props.setRaces(this.state.races);\r\n        this.props.setRacesInfo(this.state.racesInfo);\r\n    }\r\n\r\n    getRaces() {\r\n     //   console.log(\"Getting Races\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, this.getInfo(result));})\r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n       // console.log(data);\r\n       // let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n           fetch(url + data.results[i].url)\r\n               .then(result => result.json())\r\n               .then(result => { this.setState((state) => ({ racesInfo: [...state.racesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectRace(index) {\r\n        const { racesInfo } = this.state;\r\n        const { setRace } = this.props; \r\n        const { navigate } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });                \r\n                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n                //console.log(raceSelected[0]);\r\n                navigate('Classes');\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   \r\n    searchRaces = (word) => {\r\n        const { racesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = racesInfo.map((race) => {\r\n            return race;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(race => race.index.includes(word.toLowerCase()));\r\n            //    console.log(oldList);\r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }  \r\n\r\n    render() {\r\n        // let cards = this.raceCards();\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { racesInfo } = this.state;\r\n        return (<div className='col-12 selection '>\r\n                <div className='row selectionTitle'>                   \r\n                <h5 className='col-5 text-center choose'>Choose a Race</h5>                \r\n                    <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />                   \r\n                </div>\r\n                <div className='row'>\r\n                    <SearchResults champions={word !== '' ? searchResults : racesInfo} category='races' select={this.selectRace} />\r\n                </div>\r\n            </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            classesInfo: [],\r\n            classSelected: {},           \r\n            searchResults:[],\r\n            word: \"\",            \r\n        }\r\n        \r\n        this.selectClass = this.selectClass.bind(this);\r\n      //  this.classCards = this.classCards.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        }\r\n        if (isSelected(this.props.classes) && this.props.classesInfo.length === 12) {//needs better validation\r\n            this.setState({ classes: this.props.classes, classesInfo: this.props.classesInfo, })\r\n        } else {\r\n            this.getClasses();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.classesInfo.length === 12) {\r\n            this.props.setClasses(this.state.classes);\r\n            this.props.setClassesInfo(this.state.classesInfo);\r\n        }\r\n    }\r\n\r\n    getClasses() {\r\n       // console.log(\"Getting Classes\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, this.getInfo(result)); })\r\n            .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n\r\n    }\r\n\r\n    getInfo(data) {\r\n      //  console.log(data);\r\n       // let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ classesInfo: [...state.classesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.state;\r\n        const { setClass } = this.props;\r\n        const { navigate } = this.props;\r\n       // console.log(\"hello\", classesInfo)\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], }, this.props.getLevelData(classSelected[0].index, 1));\r\n                setClass(classSelected[0]);\r\n                console.log(classSelected[0]);\r\n                navigate('Ability-Scores');\r\n                break;\r\n            }\r\n        }        \r\n    } \r\n\r\n\r\n    //getLevelData(currentLevel, index) { //\r\n    //    //const { classSelected } = this.props;\r\n    //    // console.log(\"getLeveData()\");\r\n    //    //let level = {}; \r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    Promise.resolve(fetch(url + \"/api/classes/\" + index + \"/levels/\" + currentLevel))\r\n    //        .then(result => result.json())\r\n    //        .then(result => {\r\n    //            this.setState({\r\n    //                levelData: result,\r\n    //            }, this.props.setLevelData(result));\r\n    //        });\r\n\r\n\r\n    //}\r\n\r\n\r\n    searchClasses = (word) => {\r\n        const { classesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = classesInfo.map((characterClass) => {\r\n            return characterClass;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(characterClass => characterClass.index.includes(word.toLowerCase()));            \r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            console.log(newList);\r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { classesInfo } = this.state;\r\n        return (<div className='col-12 selection'>\r\n                    <div className='row selectionTitle'>\r\n                        <h5 className='col-5 text-center choose'>Choose a Class</h5>\r\n                        <SearchBar value={word} handleChange={e => this.searchClasses(e.target.value)} />\r\n                    </div>\r\n                    <div className='row'>\r\n                        <SearchResults champions={word !== '' ? searchResults : classesInfo} category='classes' select={this.selectClass} />\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(\"AbilityScoresForm \", this.props);\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmitAbilityScores(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />      \r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} /> \r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","export default function randomDiceRoll(maxNum) { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n    let totalDiceRolls = 5;\r\n    let totalRollsToKeep = 3;\r\n    let abilityPoint = 0;\r\n    let abilityPoints = 0;\r\n    let abilityPointsArray = [];\r\n    for (var i = 0; i < totalDiceRolls; i++) {\r\n        abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n        abilityPointsArray.push(abilityPoint);\r\n    }\r\n    abilityPointsArray.sort()\r\n    abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n    for (var j = 0; j < abilityPointsArray.length; j++) {\r\n        abilityPoints += abilityPointsArray[j];\r\n    }\r\n    return abilityPoints;\r\n}    ","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport AbilityScoresForm from '../helper/AbilityScoresForm'\r\nimport randomDiceRoll from '../helper/random-dice-roll'\r\n\r\nexport default class AbilityScores extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            abilityScoresSelected: {},\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.getScore = this.getScore.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.abilityScores)) {\r\n            console.log(\"this should happen any time after the first\")\r\n            this.setState({ abilityScores: this.props.abilityScores, abilityScoresInfo: this.props.abilityScoresInfo, abilityScoresSelected: this.props.abilityScoresSelected, }, this.abilityScoresSetup())\r\n            \r\n        } else {\r\n            console.log(\"this should happen second\")\r\n            this.getAbilityScores();\r\n           \r\n        }\r\n        console.log(this.props)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setAbilityScores(this.state.abilityScores);\r\n        this.props.setAbilityScoresInfo(this.state.abilityScoresInfo);\r\n        this.props.setAbilityScoresSelected(this.state.abilityScoresSelected);\r\n    }\r\n\r\n    abilityScoresSetup = () => {\r\n       // console.log(\"scores set up\", this.state.abilityScores)\r\n        //abilityScoresData \r\n        const { count } = this.state.abilityScores;\r\n        const { results } = this.state.abilityScores;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    getAbilityScores() {\r\n        const url = \"https://www.dnd5eapi.co/api/\"\r\n        fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result }, this.getInfo(result)) })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        console.log(data);\r\n        //let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ abilityScoresInfo: [...state.abilityScoresInfo, result] }), this.abilityScoresSetup()) });\r\n        }     \r\n    }\r\n\r\n    scoreDisplay() {\r\n        const { abilityScoresInfo, abilityScoresSelected } = this.state;\r\n        const { raceSelected, classSelected } = this.props;\r\n       // let bonuses, ability_bonuses = [];\r\n        let bonus = 0;\r\n\r\n        let abilityScore = ''\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            abilityScore = 'card-text abilityScore '\r\n            bonus = abilityScoresSelected[ability.index]          \r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += 'savingThrow '                      \r\n                    }\r\n                }\r\n            }\r\n            if (isSelected(raceSelected)) { \r\n                for (var b = 0; b < raceSelected.ability_bonuses.length; b++) {\r\n                    if (raceSelected.ability_bonuses[b].ability_score.index === ability.index) {                     \r\n                        abilityScore += 'bonus '\r\n                        bonus = abilityScoresSelected[ability.index] + raceSelected.ability_bonuses[b].bonus;\r\n                    } \r\n                }\r\n            }  \r\n            return (<div className=\"card border-dark mb-3 col-4 card-ability-score text-center\" key={ability.index}>\r\n                    <div className=\"card-header text-white bg-dark ability-score-header\">\r\n                        <h6>{ability.full_name}</h6>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className={abilityScore} key={ability.index}>{bonus}</p>\r\n                    </div>\r\n                </div>);\r\n        });\r\n        return (abilityScores);\r\n    }\r\n\r\n    getScore(ability) {        \r\n        const { abilityScores } = this.state;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = randomDiceRoll(6)\r\n                this.setState({ abilityScoresSelected: scores })\r\n                break;\r\n            }\r\n        }      \r\n    }\r\n\r\n\r\n    handleSubmitAbilityScores = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.props.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    buttons() {\r\n        const { abilityScoresInfo } = this.state;\r\n        let buttons = abilityScoresInfo.map((abilityScore, index) => {\r\n            return (<button onClick={() => this.getScore(abilityScore.index)} className='btn btn-primary ability-score-button col-5' type='button' key={index}>{abilityScore.full_name}</button>)\r\n        });\r\n\r\n        return (<div className='d-grid gap-2 d-md-block'>{buttons}</div>);\r\n\r\n    }\r\n\r\n    render() {\r\n        const {abilityScoresSwitch } = this.state;\r\n       \r\n        return (<div className='selection col-12'>\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"text-center\">Set ability scores</h3>                      \r\n                    </div>  \r\n                <div className='row'>{this.scoreDisplay()}</div>\r\n                <div className='row'>\r\n                    <div className='col-12 scoreSelection text-center'>\r\n                        {abilityScoresSwitch ? <AbilityScoresForm handleSubmitAbilityScores={this.handleSubmitAbilityScores} abilityScoresSelected={this.state.abilityScoresSelected} /> : this.buttons()}\r\n                        <button onClick={() => this.abilityScoreSwitchy()} className='btn btn-primary ability-score-switchy-btn'>{abilityScoresSwitch ? \"Auto fill \" : \"Manual fill \"}</button><br />\r\n                    </div>\r\n                </div>\r\n                </div>)\r\n    }\r\n}","import React, { Component } from 'react'\r\n//import AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './champion/Proficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport AbilityScores from './champion/AbilityScores'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component { //convert this to a function\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n      //      abilityScoresSwitch: false,\r\n        }\r\n     //   this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    //abilityScoreSwitchy() {\r\n    //    this.setState(state => ({\r\n    //        abilityScoresSwitch: !state.abilityScoresSwitch,\r\n    //    }));\r\n    //}\r\n\r\n    render() {       \r\n       // const { classSelected } = this.props;\r\n        const { navigation } = this.props;      \r\n        switch (navigation) {\r\n            case 'Races':\r\n                return (<Races {...this.props} />);           \r\n            case 'Classes':\r\n                return (<Classes {...this.props} />); \r\n            case 'Proficiencies':\r\n                return (<ClassProficiencies {...this.props} />);      \r\n            case 'Spells':\r\n                return (<ClassSpells {...this.props} />);\r\n            case 'Ability-Scores':\r\n                return (<AbilityScores {...this.props} />);               \r\n            default:\r\n                return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n        }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React, { Component } from 'react'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    navigationButtons() {\r\n        const navigation = this.props.navigation\r\n        const navigationCategories = this.props.navigationCategories\r\n        const navigate = this.props.navigate\r\n        // const classSelected = this.props.classSelected       \r\n        let navButtons = navigationCategories.map((category, index) => {\r\n            if (navigation === category) {\r\n                return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm  btn-dark btn-nav' key={index}>{category}</button>);\r\n            }\r\n        });\r\n        return (navButtons);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<nav className=\"navbar navbar-expand-lg navbar-light\" id=\"navigation-bottom-container\">\r\n            <button className=\"btn btn-sm navbar-toggler bg-light\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navigation-bottom\" aria-controls=\"navigation-bottom\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon col-2\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse col-10\" id=\"navigation-bottom\">\r\n                {this.navigationButtons()}\r\n            </div>\r\n        </nav>);\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n//import Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\nimport isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            champion: 'Champion', //add support: user being able to name their Champion. \r\n            abilityScoresSelected: {},\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            levelData: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},           \r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            spells: {},\r\n            spellsInfo: [],\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            setAbilityScoresSelected: this.setAbilityScoresSelected,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setChosenSpells: this.setChosenSpells,\r\n            setSpells: this.setSpells,\r\n            setSpellsInfo: this.setSpellsInfo,\r\n            setAbilityScores: this.setAbilityScores,\r\n            setAbilityScoresInfo: this.setAbilityScoresInfo,\r\n          \r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n     \r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spells: spells, });\r\n    }\r\n\r\n    setSpellsInfo = (spellsInfo) => {\r\n        this.setState({ spellsInfo: spellsInfo, });\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setChosenSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        console.log(\"and here????\")\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [], spells: {}, spellsInfo: [], });\r\n    }\r\n\r\n    //setLevelData = (dataObj) => {\r\n    //    console.log(dataObj)\r\n    //    //let levelDataObj = dataObj\r\n    //    this.setState({ levelData: dataObj, })\r\n    //} \r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n    \r\n    setAbilityScoresSelected = (abilityScoresSelected) => {\r\n        this.setState({ abilityScoresSelected: abilityScoresSelected, })\r\n    }\r\n\r\n\r\n    setAbilityScores = (abilityScores) => {\r\n        this.setState({ abilityScores: abilityScores })\r\n    }\r\n\r\n    setAbilityScoresInfo = (abilityScoresInfo) => {\r\n        this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    }\r\n\r\n    //setClasses = (classes) => {\r\n    //    this.setState({ classes: classes, })\r\n    //}\r\n\r\n    //setClassesInfo = (classesInfo) => {\r\n    //    this.setState({ classesInfo: classesInfo, })\r\n    //}\r\n\r\n   \r\n    getLevelData(index, currentLevel) { //\r\n        //const { classSelected } = this.props;\r\n         console.log(\"getLeveData()\");\r\n        //let level = {}; \r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + \"/api/classes/\" + index + \"/levels/\" + currentLevel)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    levelData: result,\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n\r\n       \r\n    render() {\r\n      //hacky way of displaying alert\r\n        //hacky way to put a space between race and class name, fix this. this messes with the total view height need to fix. \r\n        const { raceSelected, classSelected } = this.state;\r\n\r\n        return (<div id='creation' className='container-fluid'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <div className='col-12 text-center' id='characterType'>\r\n                    <h5 className='col'>\r\n                        {isSelected(raceSelected) ? raceSelected.name : null}\r\n                        <span> </span> \r\n                        {isSelected(classSelected) ? classSelected.name : null}\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} getLevelData={this.getLevelData} setRace={this.setRace} navigate={this.navigate} setClass={this.setClass} handleSubmitAbilityScores={this.handleSubmitAbilityScores} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>               \r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <Info {...this.state} {...this.props} />\r\n//</div>\r\n\r\n\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\n//export default class App extends Component { \r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {           \r\n//            races: {},\r\n//            racesInfo: new Array(0),           \r\n//            classes: {},\r\n//            classesInfo: new Array(0),\r\n//            abilityScores: {},\r\n//            abilityScoresInfo: [],\r\n//            spells: {},\r\n//            spellsInfo: [],\r\n//            features: {},\r\n//            featuresInfo: [],\r\n//            levelData: [],\r\n//            ready: false,\r\n//            enter: false,\r\n//        }\r\n//      //  this.state = this.initialState;\r\n//      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n//        this.getInfo = this.getInfo.bind(this);\r\n//        this.getLevelData = this.getLevelData.bind(this);\r\n//        //   this.getStuff = this.getStuff.bind(this);\r\n//        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n//    }\r\n\r\n//    componentDidMount() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        const promise = this.getCharacterInformation(url);\r\n//        promise.then((data) => {\r\n//            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n//        });\r\n//    }\r\n     \r\n\r\n//    getCharacterInformation(url) {\r\n//      return Promise.all([this.getRaces(url),\r\n//            this.getClasses(url),\r\n//            this.getAbilityScores(url),\r\n//            this.getSpells(url),\r\n//            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n//                return {races, classes, abilityScores, spells, features}\r\n//            });\r\n//    }\r\n\r\n\r\n//    getCharacterData(races, classes, abilityScores, spells, features) {\r\n//        Promise.all([this.getInfo(races, 'races'),\r\n//            this.getInfo(classes, 'classes'),\r\n//            this.getLevelData(classes, 1),\r\n//            this.getInfo(abilityScores, 'ability-scores'),\r\n//            this.getInfo(spells, 'spells'),\r\n//            this.getInfo(features, 'features'),\r\n//        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n//    }\r\n\r\n//    getRaces(url) {        \r\n//       return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, }, ); return result })          \r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n//    }\r\n\r\n//    getClasses(url) {\r\n//       return fetch(url + 'classes')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n//           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n//    }\r\n\r\n//    getAbilityScores(url) {\r\n//      return fetch(url + 'ability-scores')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n//    }\r\n\r\n//    getSpells(url) {\r\n//      return fetch(url + 'spells')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ spells: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n//    }\r\n\r\n//    getFeatures(url) {      \r\n//       return fetch(url + 'features')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ features: result }, ); return result  })\r\n//           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n//    }\r\n\r\n//    getLevelData(data, currentLevel) {       \r\n//        let levels = []\r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n//                .then(result => result.json())\r\n//                .then(result => { levels.push(result) });            \r\n//        }        \r\n//        this.setState({\r\n//            levelData: levels,\r\n//        });\r\n//    }\r\n\r\n//    getInfo(data, category) {\r\n//        let info = []    \r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + data.results[i].url))\r\n//                .then(result => result.json())\r\n//                .then(result => { info.push(result) });\r\n//        }\r\n//       // console.log(info);   \r\n//        switch(category) {\r\n//            case 'races':\r\n//                this.setState({ racesInfo: info, });\r\n//                break;\r\n//            case 'classes':\r\n//                this.setState({ classesInfo: info, },);  \r\n//                break;\r\n//            case 'ability-scores':\r\n//                this.setState({ abilityScoresInfo: info, });\r\n//                break;\r\n//            case 'spells':\r\n//                this.setState({ spellsInfo: info, });\r\n//                break;\r\n//            case 'features':                \r\n//                this.setState({ featuresInfo: info, });\r\n//                break;\r\n//            default:\r\n//        }\r\n//    }\r\n\r\n//    //handleClick() {\r\n//    //    this.setState(state => ({\r\n//    //        isToggleOn: !state.isToggleOn\r\n//    //    }));\r\n//    //}\r\n\r\n\r\n//    chooseYourChampion = () => {\r\n//        this.setState(state => ({\r\n//            ready: !state.ready,\r\n//        }));\r\n//    }\r\n    \r\n//    render() {\r\n//        const { ready } = this.state;\r\n              \r\n//        if (!ready) {\r\n//            return (<div className=\"container-fluid\">\r\n//                <div className=\"row\">\r\n//                    <div className=\"col-12 text-center\">\r\n//                        <h1>Welcome</h1>\r\n//                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n//                    </div>\r\n//                </div>\r\n//            </div>);  \r\n//        } else {\r\n//            return (<CreateCharacter {...this.state} />);                   \r\n//        }\r\n//    }\r\n//}\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            classes: {},\r\n            classesInfo: [],\r\n           \r\n            features: {},\r\n            featuresInfo: [],\r\n           \r\n            ready: false,\r\n            enter: false,\r\n            setRaces: this.setRaces,\r\n            setRacesInfo: this.setRacesInfo,\r\n            setClasses: this.setClasses, \r\n            setClassesInfo: this.setClassesInfo,\r\n          \r\n        }\r\n        //  this.state = this.initialState;\r\n        //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n       // this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // const url = 'https://www.dnd5eapi.co/api/'\r\n        //const promise = this.getCharacterInformation(url);\r\n        //promise.then((data) => {\r\n        //    this.getCharacterData(data.classes, data.abilityScores, data.spells, data.features)\r\n        //});\r\n        this.setState({ enter: true,})\r\n    }\r\n\r\n\r\n    getCharacterInformation(url) {\r\n        return Promise.all([\r\n        this.getClasses(url),\r\n        this.getAbilityScores(url),\r\n        this.getSpells(url),\r\n        this.getFeatures(url),]).then(([abilityScores, spells, features]) => {\r\n            return { abilityScores, spells, features }\r\n        });\r\n    }\r\n\r\n\r\n    getCharacterData(classes, abilityScores, spells, features) {\r\n        Promise.all([       \r\n        this.getLevelData(classes, 1),\r\n        this.getInfo(abilityScores, 'ability-scores'),\r\n        this.getInfo(spells, 'spells'),\r\n        this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ enter: true, }) })\r\n\r\n    }\r\n\r\n   \r\n\r\n    getAbilityScores(url) {\r\n        return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n        return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {\r\n        return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result },); return result })\r\n            .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    //getLevelData(data, currentLevel) {\r\n    //    let levels = []\r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    for (var i = 0; i < data.results.length; i++) {\r\n    //        Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n    //            .then(result => result.json())\r\n    //            .then(result => { levels.push(result) });\r\n    //    }\r\n    //    this.setState({\r\n    //        levelData: levels,\r\n    //    });\r\n    //}\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n        // console.log(info);   \r\n        switch (category) {\r\n            //case 'races':\r\n            //    this.setState({ racesInfo: info, });\r\n            //    break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);\r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n\r\n    setRaces = (races) => {\r\n        this.setState({ races: races, });\r\n    }\r\n\r\n    setRacesInfo = (racesInfo) => {\r\n        this.setState({ racesInfo: racesInfo,})\r\n    }\r\n\r\n    setClasses = (classes) => {\r\n        this.setState({classes: classes,})\r\n    }\r\n\r\n    setClassesInfo = (classesInfo) => {\r\n        this.setState({classesInfo: classesInfo,})\r\n    }\r\n\r\n    //setAbilityScores = (abilityScores) => {\r\n    //    this.setState({ abilityScores: abilityScores })\r\n    //}\r\n\r\n    //setAbilityScoresInfo = (abilityScoresInfo) => {\r\n    //    this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    //}\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { ready } = this.state; //this has been set up top and not by the user. will need to change once characters can be saved and retrieved. \r\n\r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p>}\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\nimport './assets/css/navigation-style.css'\r\nimport './assets/css/selection-style.css'\r\nimport './assets/css/info-style.css'\r\nimport './assets/css/abilityScores-style.css'\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}