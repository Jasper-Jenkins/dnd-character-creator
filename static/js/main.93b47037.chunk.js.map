{"version":3,"sources":["helper/helper-functions.js","helper/modal/proficiency-modal.js","champion/Proficiencies.js","helper/modal/spell-modal.js","ClassSpells.js","helper/search-bar.js","helper/search-results.js","helper/modal/traits-modal.js","champion/Races.js","champion/Classes.js","helper/AbilityScoresForm.js","helper/random-dice-roll.js","champion/AbilityScores.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","ProficiencyModal","props","proficiencySelectedInfo","className","id","tabIndex","role","aria-labelledby","aria-hidden","name","type","data-dismiss","aria-label","desc","map","index","showProficiency","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","classSelected","proficienciesChosen","state","choices","proficiency_choices","i","from","length","choose","message","updateAlertMessage","newProficiency","filter","proficiency","newProfs","proficiencies","chosen","setState","setProficiencies","removeProficiency","a","b","newProficiencies","newChoices","category","proficienciesInfo","proficienciesChoices","startingProficiencies","proficiencyNavigationButtons","proficiencyIndex","bind","this","getProficienciesChoices","url","check","c","fetch","then","result","json","push","catch","e","console","log","numberOfCategories","reference","count","str","getProficiencyInfo","chooseFrom","chooseProficiencies","classNames","k","onClick","data-toggle","data-target","indec","newCategory","buttons","num","undefined","setNavigationCategory","proficienciesNavigation","proficienciesToChooseFrom","Component","SpellModal","spell","showSpell","ClassSpells","updateSpells","spellsChosen","spells","setChosenSpells","spellsChosenByLevel","cantrips","levelOneSpells","level","addSpell","level0","level1","setSelectedSpell","spellSlots","removeSpell","displaySpells","classSpells","spellChoices","spellChoiceDisplay","spellcasting","slotLevel","slotSpells","setSpellInfo","spellsAvailableByLevel","levelData","navigationCategory","selected","spellBook","spellsInfo","selectedSpell","getSpells","setClassSpells","setSpells","setSpellsInfo","getSpellInfo","data","info","results","spellsInfoData","alert","abilityScoresModifiers","modifier","spellCountAvailableAtLevelOne","cantrips_known","spells_known","spellcasting_ability","updateSpellSlots","spellsSlots","spellsNavigation","SearchBar","userValue","handleChange","htmlFor","value","onChange","SearchResults","champions","select","getTraits","cards","race","bonuses","ability_bonuses","ability_score","bonus","traits","target","size_description","age","alignment","language_desc","speed","championClass","prof","savingThrows","saving_throws","savingThrow","hit_die","TraitsModal","trait","CharacterRace","searchRaces","word","racesInfo","oldList","newList","includes","toLowerCase","searchResults","races","raceSelected","selectRace","getRaces","getInfo","setRaces","setRacesInfo","setRace","navigate","CharacterClass","searchClasses","classesInfo","characterClass","classes","selectClass","getClasses","setClasses","setClassesInfo","setClass","cClass","getLevelData","AbilityScoresForm","handleFocus","event","scores","newScores","JSON","parse","stringify","parseInt","submitForm","handleSubmitAbilityScores","initialState","abilityScoresSelected","onFocus","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","j","AbilityScores","abilities","noZeroes","modifiers","abilityScoreModifier","setAbilityScoresModifiers","zeroesAlert","abilityScores","abilityScoresInfo","abilityScoresSwitch","getScore","abilityScoresSetup","getAbilityScores","setAbilityScores","arr","abilityScoreValue","abilityScore","ability","full_name","scoreDisplay","abilityScoreSwitchy","Selection","navigation","Navigation","navigationCategories","aria-disabled","aria-controls","aria-expanded","navigationButtons","UserAlert","element","alertMessage","CreateCharacter","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","slots","profs","champion","setAbilityScoresSelected","setAbilityScoresInfo","chosenRace","chosenClass","currentLevel","App","chooseYourChampion","ready","features","featuresInfo","enter","Promise","resolve","ReactDOM","render"],"mappings":"mWAAe,SAASA,EAAWC,GAC/B,IAAK,IAAIC,KAAOD,EAEZ,OADAA,EAAIE,eAAeD,IACZ,EAEX,OAAO,ECFI,SAASE,EAAiBC,GAAM,IAYnCC,EAA4BD,EAA5BC,wBAGR,OAAQ,yBAAKC,UAAU,eACf,yBAAKA,UAAU,aAAaC,GAAG,mBAAmBC,SAAS,KAAKC,KAAK,SAASC,kBAAgB,kBAAkBC,cAAY,QACxH,yBAAKL,UAAU,eAAeG,KAAK,YAC/B,yBAAKH,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAcC,GAAG,mBAAmBR,EAAWM,GAA2BA,EAAwBO,KAP7G,yBAQH,4BAAQC,KAAK,SAASP,UAAU,QAAQQ,eAAa,QAAQC,aAAW,SACpE,0BAAMJ,cAAY,QAAlB,UAGR,yBAAKL,UAAU,cAxBnC,WAA4B,IAChBD,EAA4BD,EAA5BC,wBACR,OAAIN,EAAWM,GACQA,EAAwBW,KAAKC,KAAI,SAACD,EAAME,GACvD,OAAQ,uBAAGZ,UAAU,GAAGL,IAAKiB,GAAQF,MAKtC,KAgBcG,IAEL,yBAAKb,UAAU,gBACX,4BAAQO,KAAK,SAASP,UAAU,oBAAoBQ,eAAa,SAAjE,c,ICuMbM,E,kDAjOX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAuFViB,eAAiB,SAACC,EAAiBC,GAI/B,IAJgD,IACxCC,EAAkB,EAAKpB,MAAvBoB,cACAC,EAAwB,EAAKC,MAA7BD,oBACFE,EAAUH,EAAcI,oBACrBC,EAAI,EAAGA,EAAIF,EAAQJ,GAAcO,KAAKC,OAAQF,IAAK,CACxD,KAAIJ,EAAoBF,GAAcQ,OAASJ,EAAQJ,GAAcS,QAY9D,CACH,IAAMC,EAAU,uBAAyBN,EAAQJ,GAAcS,OAAS,uBACxE,EAAK5B,MAAM8B,mBAAmBD,GAC9B,MAdA,GAAIN,EAAQJ,GAAcO,KAAKD,GAAGjB,OAASU,GAAiB,qBACxD,IAAIa,EAAiBR,EAAQJ,GAAcO,KAAKM,QAAO,SAAUC,GAAe,OAAOA,EAAYzB,OAASU,KACtGgB,EAAQ,sBAAO,EAAKZ,MAAMa,eAAlB,CAAiCJ,EAAe,KAC1DK,EAASf,EAMb,OALAe,EAAOjB,GAAP,sBAA2BiB,EAAOjB,IAAlC,CAAiDY,EAAe,KAChE,EAAKM,UAAS,SAAAf,GAAK,MAAK,CACpBa,cAAc,GAAD,mBAAMb,EAAMa,eAAZ,CAA2BJ,EAAe,KACvDV,oBAAqBe,KACrB,EAAKpC,MAAMsC,iBAAiBJ,EAAUE,IAC1C,QATwD,GASxD,QAvGG,EAiHnBG,kBAAoB,SAACrB,EAAiBC,GAGlC,IAHoD,IAC5CgB,EAAkB,EAAKb,MAAvBa,cACAd,EAAwB,EAAKC,MAA7BD,oBACCmB,EAAI,EAAGA,EAAInB,EAAoBM,OAAQa,IAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAoBmB,GAAGb,OAAQc,IAC/C,GAAIpB,EAAoBmB,GAAGC,GAAGjC,OAASU,EAAiB,CACpD,IAAIwB,EAAmBP,EAAcH,QAAO,SAAUC,GAAe,OAAOA,EAAYzB,OAASU,KAC7FyB,EAAatB,EACjBsB,EAAWxB,GAAgBE,EAAoBF,GAAca,QAAO,SAAUC,GAAe,OAAOA,EAAYzB,OAASU,KACzH,EAAKmB,SAAS,CACVF,cAAc,YAAKO,GACnBrB,oBAAqBsB,GACtB,EAAK3C,MAAMsC,iBAAX,YAAgCI,GAAmBC,IACtD,QA5HZ,EAAKrB,MAAQ,CACTsB,SAAU,EACVT,cAAe,GACfd,oBAAqB,GACrBwB,kBAAmB,GACnBC,qBAAsB,GACtBC,sBAAuB,GACvBC,6BAA8B,GAC9BC,iBAAkB,GAClBhD,wBAAyB,IAE7B,EAAKqC,iBAAmB,EAAKA,iBAAiBY,KAAtB,gBAbT,E,gEAkBXvD,EADsBwD,KAAKnD,MAAvBoB,iBAEJ+B,KAAKb,mBACLa,KAAKC,6B,gDAQT,IAJuB,IAAD,OACdhC,EAAkB+B,KAAKnD,MAAvBoB,cACFiC,EAAM,0BACR9B,EAAU,GAHQ,aAKlB,IAAMT,EAAQ2B,EALI,aAOd,IAAMa,EAAQC,EACdC,MAAMH,EAAMjC,EAAcI,oBAAoBiB,GAAGf,KAAK6B,GAAGF,KACpDI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAYnC,EAAQqC,KAAKF,GAAaJ,IAAUlC,EAAcI,oBAAoBV,GAAOY,KAAKC,OAAS,GAAKb,IAAUM,EAAcI,oBAAoBG,OAAS,GAAK,EAAKU,SAAS,CAAEQ,kBAAmBtB,OAC9MsC,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,mCAAqCT,OAL3E,IAASE,EAAI,EAAGA,EAAInC,EAAcI,oBAAoBiB,GAAGf,KAAKC,OAAQ4B,IAAM,KAFvEd,EAAI,EAAGA,EAAIrB,EAAcI,oBAAoBG,OAAQc,IAAK,CAAC,IAEvDc,EAFsD,O,yCAYnD,IACRnC,EAAkB+B,KAAKnD,MAAvBoB,cACAe,EAAkBgB,KAAKnD,MAAvBmC,cACAd,EAAwB8B,KAAKnD,MAA7BqB,oBACJe,EAAS,GACT6B,EAAqB7C,EAAcI,oBAAoBG,OAC3D,GAAIN,EAAoBM,OAAS,EAAG,CAChC,IAAK,IAAIa,EAAI,EAAGA,EAAIyB,EAAoBzB,IACpCJ,EAAOI,GAAK,GAEhBW,KAAKd,SAAS,CACVF,cAAeA,EACfd,oBAAqBe,GACtBe,KAAKnD,MAAMsC,iBAAiBH,EAAeC,SAE9Ce,KAAKd,SAAS,CACVF,cAAeA,EACfd,oBAAqBA,M,yCAMdY,GAAc,IAAD,OACtBoB,EAAM,0BACZU,QAAQC,IAAI,wBAAyB/B,GAErCuB,MAAMH,EAAMpB,EAAYiC,UAAUb,KAC7BI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,SAAS,CAAEpC,wBAAyByD,EAAQT,iBAAkBhB,EAAYnB,WAChG+C,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,gCAAkCT,Q,8CAG/C,IACdjC,EAAkB+B,KAAKnD,MAAvBoB,cACD+C,EAAQ/C,EAAce,cAAcR,OAU1C,OAT2BP,EAAce,cAActB,KAAI,SAACoB,EAAanB,GAErE,OAAIA,IAAUqD,EAAQ,EACMlC,EAAYzB,KAAO,IAGvByB,EAAYzB,KAAO,U,8CAkD3B4D,GAEpB,IAF0B,IAClBvB,EAAsBM,KAAK7B,MAA3BuB,kBACCL,EAAI,EAAGA,EAAIK,EAAkBlB,OAAQa,IACtC4B,IAAQvB,EAAkBL,GAAG1B,OAC7BqC,KAAKkB,mBAAmBxB,EAAkBL,M,kDASlD,IAJyB,IAAD,OAChBpB,EAAkB+B,KAAKnD,MAAvBoB,cADgB,EAEkB+B,KAAK7B,MAAvCD,EAFgB,EAEhBA,oBAAqBuB,EAFL,EAEKA,SACzB0B,EAAa,GAHO,aAKpB,IAAInD,EAAeM,EACb8C,EAAsBnD,EAAcI,oBAAoBC,GAAGC,KAAKb,KAAI,SAACoB,EAAanB,GACpF,IAAI0D,EAAa,cACjB,GAAmC,IAA/BnD,EAAoBM,OACpB,IAAK,IAAI8C,EAAI,EAAGA,EAAIpD,EAAoBF,GAAcQ,OAAQ8C,IAC1D,GAAIxC,EAAYzB,OAASa,EAAoBF,GAAcsD,GAAGjE,KAAM,CAChEgE,GAAc,qBAGd,OAAQ,yBAAKtE,UAAU,yCAAyCG,KAAK,QAAQM,aAAW,sBAAsBd,IAAKiB,GAC/G,4BAAQZ,UAAWsE,EAAY/D,KAAK,SAASiE,QAAS,kBAAM,EAAKnC,kBAAkBN,EAAYzB,KAAMW,IAAetB,IAAKoC,EAAYnB,OAAQmB,EAAYzB,MACzJ,4BAAQN,UAAU,0BAA0BO,KAAK,SAASkE,cAAY,QAAQC,cAAY,oBAAoBF,QAAS,WAAQ,EAAKzE,wBAAwBgC,EAAYnB,QAAUjB,IAAK,wBAA0BoC,EAAY4C,OAA7N,MAKhBL,GAAc,uBAGd,OAAQ,yBAAKtE,UAAU,yCAAyCG,KAAK,QAAQM,aAAW,sBAAsBd,IAAKiB,GAC/G,4BAAQZ,UAAWsE,EAAY/D,KAAK,SAASiE,QAAS,kBAAM,EAAKzD,eAAegB,EAAYzB,KAAMW,IAAetB,IAAKoC,EAAYnB,OAAQmB,EAAYzB,MACtJ,4BAAQN,UAAU,0BAA0BO,KAAK,SAASkE,cAAY,QAAQC,cAAY,oBAAoBF,QAAS,WAAQ,EAAKzE,wBAAwBgC,EAAYnB,QAAUjB,IAAK,wBAA0BoC,EAAYnB,OAA7N,SAGRwD,EAAWV,KAAKW,IAzBX9C,EAAI,EAAGA,EAAIL,EAAcI,oBAAoBG,OAAQF,IAAM,IA2BpE,OAAQ6C,EAAW1B,K,4CAGDkC,GAClB3B,KAAKd,SAAS,CAAEO,SAAUkC,M,gDAQ1B,IALuB,IAAD,OACd1D,EAAkB+B,KAAKnD,MAAvBoB,cACAwB,EAAaO,KAAK7B,MAAlBsB,SACAvB,EAAwB8B,KAAK7B,MAA7BD,oBACJ0D,EAAU,GAJQ,aAMlB,IAAID,EAActC,EAEdwC,OAAG,EAEHA,OADUC,IAFF5D,EAAoByD,GAGtB,EAEAzD,EAAoByD,GAAanD,OAEvCiB,IAAaJ,EACbuC,EAAQnB,KAAK,4BAAQ1D,UAAU,yBAAyBwE,QAAS,aAAgB7E,IAAKuB,EAAcZ,KAAOgC,GAA9F,WAA0GpB,EAAcI,oBAAoBsD,GAAalD,OAASoD,IAE/KD,EAAQnB,KAAK,4BAAQ1D,UAAU,2BAA2BwE,QAAS,kBAAM,EAAKQ,sBAAsBJ,IAAcjF,IAAKuB,EAAcZ,KAAOgC,GAA/H,WAA2IpB,EAAcI,oBAAoBsD,GAAalD,OAASoD,KAZ/MxC,EAAI,EAAGA,EAAIpB,EAAcI,oBAAoBG,OAAQa,IAAM,IAepE,OAAQ,yBAAKtC,UAAU,8CAA8C6E,K,+BAG/D,IACE3D,EAAkB+B,KAAKnD,MAAvBoB,cACAnB,EAA4BkD,KAAK7B,MAAjCrB,wBACP,OAAQN,EAAWyB,GAAiB,yBAAKlB,UAAU,oBAChD,yBAAKA,UAAU,qCACX,4BAAKkB,EAAcZ,KAAnB,mBAEJ,yBAAKN,UAAU,OACX,yBAAKA,UAAU,gDACNiD,KAAKgC,0BACV,yBAAKjF,UAAU,aACX,wBAAIA,UAAU,0BAAd,0BACA,uBAAGA,UAAU,aAAaiD,KAAKJ,yBAC/B,wBAAI7C,UAAU,0BAAd,wBACCiD,KAAKiC,4BACN,kBAACrF,EAAD,CAAkBE,wBAAyBA,EAAyBmB,cAAeA,QAI1F,yBAAKlB,UAAU,gCAA+B,wBAAIA,UAAU,kBAAd,qD,GA9N9BmF,a,OCFZC,E,kDACjB,WAAYtF,GAAQ,IAAD,8BACf,cAAMA,IACDsB,MAAQ,CACTiE,MAAO,IAHI,E,wDAON,IACDA,EAAUpC,KAAKnD,MAAfuF,MACR,OAAI5F,EAAWwD,KAAKnD,MAAMuF,OACEA,EAAM3E,KAAKC,KAAI,SAACD,EAAME,GAE1C,OADDiD,QAAQC,IAAIpD,GACH,uBAAGV,UAAU,GAAGL,IAAKiB,GAAQF,MAItC,O,+BAIP,OAAQ,yBAAKV,UAAU,eACnB,yBAAKA,UAAU,aAAaC,GAAG,aAAaC,SAAS,KAAKC,KAAK,SAASC,kBAAgB,YAAYC,cAAY,QAC5G,yBAAKL,UAAU,eAAeG,KAAK,YAC/B,yBAAKH,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAcC,GAAG,aAAagD,KAAKnD,MAAMuF,MAAM/E,MAC7D,4BAAQC,KAAK,SAASP,UAAU,QAAQQ,eAAa,QAAQC,aAAW,SACpE,0BAAMJ,cAAY,QAAlB,UAGR,yBAAKL,UAAU,cACTiD,KAAKqC,aAEX,yBAAKtF,UAAU,gBACX,4BAAQO,KAAK,SAASP,UAAU,oBAAoBQ,eAAa,SAAjE,kB,GAnCY2E,aC+VzBI,E,kDA7VX,WAAYzF,GAAQ,IAAD,8BACf,cAAMA,IA2JV0F,aAAe,SAACH,GAAW,IACfI,EAAiB,EAAK3F,MAAtB2F,aACJC,EAAM,sBAAOD,GAAP,CAAqBJ,IAC/B,EAAKlD,SAAS,CACVsD,aAAcC,IAElB,EAAK5F,MAAM6F,gBAAgBD,IAlKZ,EAqKnBE,oBAAsB,WAKlB,IALwB,IAChBH,EAAiB,EAAK3F,MAAtB2F,aACJI,EAAW,EACXC,EAAiB,EACjBJ,EAAS,GACJnE,EAAI,EAAGA,EAAIkE,EAAahE,OAAQF,IACP,IAA1BkE,EAAalE,GAAGwE,MAChBF,IACiC,IAA1BJ,EAAalE,GAAGwE,OACvBD,IAKR,OAFAJ,EAAOhC,KAAKmC,GACZH,EAAOhC,KAAKoC,GACLJ,GAnLQ,EAsLnBM,SAAW,SAACX,GAAW,IAGfQ,EACAC,EACAG,EAAQC,EAJJC,EAAqB,EAAKrG,MAA1BqG,iBACAC,EAAe,EAAKhF,MAApBgF,WAFU,cAMCA,EAND,GAMjBH,EANiB,KAMTC,EANS,WAOW,EAAKN,sBAPhB,mBAQlB,GADCC,EAPiB,KAOPC,EAPO,KAQdD,EAAWI,GAA0B,IAAhBZ,EAAMU,MAG3B,OAFA,EAAKP,aAAaH,QAClBc,EAAiBd,GAGrB,GAAIS,EAAiBI,GAA0B,IAAhBb,EAAMU,MAGjC,OAFA,EAAKP,aAAaH,QAClBc,EAAiBd,GAGrB,IAAI1D,EAAU,kBAAoB0D,EAAM/E,KAAO,uBAC/C,EAAKR,MAAM8B,mBAAmBD,IAzMf,EA4MnB0E,YAAc,SAAChB,GAIX,IAJsB,IACdI,EAAiB,EAAK3F,MAAtB2F,aACAU,EAAqB,EAAKrG,MAA1BqG,iBACJT,EAAS,GACJnE,EAAI,EAAGA,EAAIkE,EAAahE,OAAQF,IACjCkE,EAAalE,GAAGjB,OAAS+E,EAAM/E,MAC/BoF,EAAOhC,KAAK+B,EAAalE,IAGjC,EAAKY,SAAS,CACVsD,aAAcC,IAElB,EAAK5F,MAAM6F,gBAAgBD,GAC3BS,EAAiB,KAzNF,EAsPnBG,cAAgB,WAAO,IAAD,EACsB,EAAKxG,MAArCoB,EADU,EACVA,cAAeuE,EADL,EACKA,aADL,EAEkB,EAAKrE,MAAjCmF,EAFU,EAEVA,YAAaH,EAFH,EAEGA,WACjBI,EAAe,GACfC,EAAqB,GAGzB,GADA5C,QAAQC,IAAIyC,QACuBxB,IAA/B7D,EAAcwF,aAEd,OADAD,EAAmB,GAAK,yBAAKzG,UAAU,aAAaL,IAAI,mBAAkB,wBAAIK,UAAU,yBAAd,+BAAmEkB,EAAcZ,OACnJmG,EAGZ,GAAIF,EAAY9E,OAAS,GAA4B,YAAvBP,EAAcZ,MAA6C,WAAvBY,EAAcZ,KAG5E,MADqB,CADL,wBAAIN,UAAU,eAAd,yBAIhB6D,QAAQC,IAAI,QACZ,IAFG,eAEMxB,GACL,IAAMqE,EAAYrE,EACdsE,EAAaL,EAAYzE,QAAO,SAACuD,GACjC,OAAQA,EAAMU,QAAUY,EAAYtB,EAAQ,QAEhDmB,EAAaG,GAAaC,EAAWjG,KAAI,SAAC0E,EAAOzE,GAC7C,IAAI0D,EAAa,cAOjB,GAA4B,IAAxBmB,EAAahE,OAEb,OADA6C,GAAc,uBACN,yBAAKtE,UAAU,mCAAmCG,KAAK,QAAQM,aAAW,gBAAgBd,IAAKiB,GACnG,4BAAQZ,UAAWsE,EAAY/D,KAAK,SAASiE,QAAS,kBAAM,EAAKwB,SAASX,IAAQ1F,IAAK0F,EAAM/E,KAAO+E,EAAMU,OAAQV,EAAM/E,MACxH,4BAAQN,UAAU,0BAA0BO,KAAK,SAASkE,cAAY,QAAQC,cAAY,cAAcF,QAAS,WAAQ,EAAKqC,aAAaxB,IAAU1F,IAAK,iBAAmB0F,EAAM/E,MAAnL,MAGR,IAAK,IAAIiC,EAAI,EAAGA,EAAIkD,EAAahE,OAAQc,IAAK,CAE1C,GAAIkD,EADSlD,GACYjC,OAAS+E,EAAM/E,KAEpC,OADAgE,GAAc,qBACN,yBAAKtE,UAAU,mCAAmCG,KAAK,QAAQM,aAAW,gBAAgBd,IAAKiB,GACnG,4BAAQZ,UAAWsE,EAAY/D,KAAK,SAASiE,QAAS,kBAAM,EAAK6B,YAAYhB,IAAQ1F,IAAK0F,EAAM/E,KAAO+E,EAAMU,OAAQV,EAAM/E,MAC3H,4BAAQN,UAAU,0BAA0BO,KAAK,SAASkE,cAAY,QAAQC,cAAY,cAAcF,QAAS,WAAQ,EAAKqC,aAAaxB,IAAU1F,IAAK,iBAAmB0F,EAAM/E,MAAnL,MAMZ,OADAgE,GAAc,uBACN,yBAAKtE,UAAU,mCAAmCG,KAAK,QAAQM,aAAW,gBAAgBd,IAAKiB,GACnG,4BAAQZ,UAAWsE,EAAYE,QAAS,kBAAM,EAAKwB,SAASX,IAAQ1F,IAAK0F,EAAM/E,KAAO+E,EAAMU,OAAQV,EAAM/E,MAC1G,4BAAQN,UAAU,0BAA0BO,KAAK,SAASkE,cAAY,QAAQC,cAAY,cAAcF,QAAS,WAAQ,EAAKqC,aAAaxB,IAAU1F,IAAK,iBAAmB0F,EAAM/E,MAAnL,UAlCHgC,EAAI,EAAGA,EAAI8D,EAAW3E,OAAQa,IAAM,EAApCA,GAyCmB,IAAxBkE,EAAa/E,SACbgF,EAAmB,GAAK,yBAAKzG,UAAU,aAAaL,IAAI,mBAAkB,wBAAIK,UAAU,yBAAd,kDAG9E,IAAK,IAAIuC,EAAI,EAAGA,EAAIiE,EAAa/E,OAAQc,IACrC,GAAU,IAANA,EAEAkE,EAAmBlE,GAAK,yBAAKvC,UAAU,aAAaL,IAAI,YAAW,wBAAIK,UAAU,yBAAd,YAAoDwG,EAAajE,QAEjI,CAEHkE,EAAmBlE,GAAK,yBAAKvC,UAAU,aAAaL,IADnC,aACqD4C,GAAG,wBAAIvC,UAAU,yBAAd,SAA6CuC,EAA7C,WAA4DiE,EAAajE,IAG1J,OAAQkE,GA7TZ,EAAKrF,MAAQ,CACTF,cAAe,GACfqF,YAAa,GACbH,WAAY,CAAC,EAAE,GACfU,uBAAwB,GACxBrB,aAAc,GACdsB,UAAW,GACXC,mBAAoB,EACpBC,UAAU,EACVC,UAAW,GACXxB,OAAQ,GACRyB,WAAY,GACZC,cAAe,IAGnB,EAAKF,UAAY,EAAKA,UAAUlE,KAAf,gBACjB,EAAKqE,UAAY,EAAKA,UAAUrE,KAAf,gBAEjB,EAAK6D,aAAe,EAAKA,aAAa7D,KAAlB,gBApBL,E,gEAwBXvD,EAAWwD,KAAKnD,MAAMoB,qBAA4D6D,IAA1C9B,KAAKnD,MAAMoB,cAAcwF,aAC7DzD,KAAKnD,MAAMqH,WAAW1F,SAAWwB,KAAKnD,MAAM4F,OAAOzB,OACnDhB,KAAKd,SAAS,CAAEuD,OAAQzC,KAAKnD,MAAM4F,OAAQyB,WAAYlE,KAAKnD,MAAMqH,aAClElE,KAAKqE,eAAe,EAAGrE,KAAKnD,MAAMqH,YAClClE,KAAKiE,cAELjE,KAAKoE,YACLpE,KAAKiE,aAGTrD,QAAQC,IAAI,kB,6CAKZb,KAAK7B,MAAM+F,WAAW1F,SAAWwB,KAAK7B,MAAMsE,OAAOzB,QACnDhB,KAAKnD,MAAMyH,UAAUtE,KAAK7B,MAAMsE,QAChCzC,KAAKnD,MAAM0H,cAAcvE,KAAK7B,MAAM+F,e,kCAI/B,IAAD,OACAjG,EAAkB+B,KAAKnD,MAAvBoB,cACFiC,EAAM,0BACZG,MAAMH,EAAMjC,EAAcwE,QACrBnC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,SAAS,CAAEuD,OAAQlC,GAAW,EAAKiE,aAAajE,OACtEG,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,sBAAwBT,Q,mCAGjDuE,GAGT,IAHgB,IAAD,OACXC,EAAO,GACLxE,EAAM,0BACH5B,EAAI,EAAGA,EAAImG,EAAKE,QAAQnG,OAAQF,IACrC+B,MAAMH,EAAMuE,EAAKE,QAAQrG,GAAG4B,KACvBI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAYmE,EAAKjE,KAAKF,GAAa,EAAKpC,MAAM+F,WAAW1F,SAAW,EAAKL,MAAMsE,OAAOzB,OAAS,EAAKqD,eAAe,EAAGK,MAC3HhE,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,yBAA2BT,MAEjEF,KAAKd,SAAS,CAAEgF,WAAYQ,M,qCAGjB5B,EAAO8B,GAClB,IAAMV,EAAaU,EACfnC,EAAS,GACb,OAAQK,GACJ,KAAK,EACD,IAAK,IAAIxE,EAAI,EAAGA,EAAI4F,EAAW1F,OAAQF,IAC5B4F,EAAW5F,GAAGwE,OAASA,GACvBL,EAAOhC,KAAKyD,EAAW5F,IAGlC0B,KAAKd,SAAS,CACVoE,YAAab,IAElB,MACH,QACIoC,MAAM,yD,kCAKL,IACD5G,EAAkB+B,KAAKnD,MAAvBoB,cADA,EAEsC+B,KAAKnD,MAA3CiH,EAFA,EAEAA,UAAWgB,EAFX,EAEWA,uBAEfC,EAAW,EAEfnE,QAAQC,IAAI,sBAAuBb,KAAKnD,OACxC,IAAImI,EAAgC,QACLlD,IAA3BgC,EAAUL,oBACoC3B,IAA1CgC,EAAUL,aAAawB,eACvBD,EAA8B,GAAKlB,EAAUL,aAAawB,eAE1DD,EAA8B,GAAK,OAEKlD,IAAxCgC,EAAUL,aAAayB,cACvBF,EAA8B,GAAKlB,EAAUL,aAAayB,aAC1DtE,QAAQC,IAAI,yCAA2C5C,EAAcZ,KAAO,4BAA8ByG,EAAUhB,MAAQ,mBAAqBgB,EAAUL,aAAayB,aAAe,aAmBjGpD,IAAlFgD,EAAuB7G,EAAcwF,aAAa0B,qBAAqBxH,QACvEiD,QAAQC,IAAIiE,GACZC,EAAWD,EAAuB7G,EAAcwF,aAAa0B,qBAAqBxH,QAElFiD,QAAQC,IAAI,+BAEhBmE,EAA8B,GAAKD,EAAWjB,EAAUhB,MACxDlC,QAAQC,IAAIiE,EAAuB7G,EAAcwF,aAAa0B,qBAAqBxH,OAAQ,+EAAiFM,EAAcZ,KAAO,eAAiB0H,EAAW,WAAajB,EAAUhB,OACzN,WAAvB7E,EAAcZ,MAAyC,IAApByG,EAAUhB,QAC7CkC,EAA8B,GAAK,KAqB/ChF,KAAKd,SAAS,CACViE,WAAY6B,GACbhF,KAAKnD,MAAMuI,iBAAiBJ,M,4CAmEbrD,GAClB3B,KAAKd,SAAS,CAAE6E,mBAAoBpC,M,yCAQpC,IALgB,IAAD,OACPoC,EAAuB/D,KAAK7B,MAA5B4F,mBACAZ,EAAenD,KAAK7B,MAApBgF,WACJvB,EAAU,GACVyD,EAAcrF,KAAK2C,sBAJR,WAKNtD,GACL,IACIwC,EADAF,EAActC,EAElBwC,EAAMwD,EAAYhG,GACd0E,IAAuB1E,EACvBuC,EAAQnB,KAAK,4BAAQ1D,UAAU,yBAAyBwE,QAAS,aAAgB7E,IAAK2C,GAAzE,YAAsF8D,EAAW9D,GAAKwC,IAEnHD,EAAQnB,KAAK,4BAAQ1D,UAAU,sCAAsCwE,QAAS,kBAAM,EAAKQ,sBAAsBJ,IAAcjF,IAAK2C,GAArH,WAAiI8D,EAAW9D,GAAKwC,KAP7JxC,EAAI,EAAGA,EAAI8D,EAAW3E,OAAQa,IAAM,EAApCA,GAUT,OAAQ,yBAAKtC,UAAU,UAAU6E,K,mCAGxBQ,GACTpC,KAAKd,SAAS,CAAEiF,cAAe/B,M,+BAgFzB,IACE2B,EAAuB/D,KAAK7B,MAA5B4F,mBACAI,EAAkBnE,KAAK7B,MAAvBgG,cACAlG,EAAkB+B,KAAKnD,MAAvBoB,cACFwE,EAASzC,KAAKqD,gBACpB,OAAS7G,EAAWwD,KAAKnD,MAAMoB,eAC3B,yBAAKlB,UAAU,oBACX,yBAAKA,UAAU,qCACX,4BAAKkB,EAAcZ,KAAnB,cAEJ,yBAAKN,UAAU,OACX,yBAAKA,UAAU,gDACX,yBAAKA,UAAU,8CACViD,KAAKsF,oBAET7C,EAAOsB,GACR,kBAAC,EAAD,CAAY3B,MAAO+B,OAI/B,yBAAKpH,UAAU,oBACX,wBAAIA,UAAU,qCAAd,8C,GAzVUmF,aCFX,SAASqD,EAAT,GAAiD,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAC3C,OACI,yBAAK1I,UAAU,+BACX,2BAAOA,UAAU,qBAAqB2I,QAAQ,aAA9C,WAAyE,2BAAO3I,UAAU,QAAQ4I,MAAOH,EAAWnI,KAAK,YAAYL,GAAG,YAAY4I,SAAUH,KCH3J,SAASI,EAAT,GAAqE,IAA5CC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,OAAQtG,EAAwB,EAAxBA,SAAUuG,EAAc,EAAdA,UAE7DC,EAAQ,GACZ,OAAQxG,GACJ,IAAK,QACDwG,EAAQH,EAAUpI,KAAI,SAACwI,GAEnB,IADA,IAAIC,EAAU,GACL9G,EAAI,EAAGA,EAAI6G,EAAKE,gBAAgB5H,OAAQa,IAC7C8G,GAAWD,EAAKE,gBAAgB/G,GAAGgH,cAAchJ,KAAO,KAAO6I,EAAKE,gBAAgB/G,GAAGiH,MAAQ,IAInG,IAFA,IAAIC,EAAS,GACTC,EAAS,eACJlH,EAAI,EAAGA,EAAI4G,EAAKK,OAAO/H,OAAQc,IAChCA,IAAM4G,EAAKK,OAAO/H,OAAO,EACzB+H,EAAO9F,KAAK,0BAAMe,cAAY,QAAQC,cAAa+E,EAAQ9J,IAAKwJ,EAAKK,OAAOjH,GAAGjC,MAAO6I,EAAKK,OAAOjH,GAAGjC,KAAzF,OAEZkJ,EAAO9F,KAAK,0BAAMe,cAAY,QAAQC,cAAa+E,EAAQ9J,IAAKwJ,EAAKK,OAAOjH,GAAGjC,MAAO6I,EAAKK,OAAOjH,GAAGjC,KAAzF,OAKpB,OAFAkJ,EAAO9F,KAAK,4BAAQ1D,UAAU,yBAAyByE,cAAY,QAAQC,cAAa+E,EAAQjF,QAAS,kBAAMyE,EAAUE,IAAOxJ,IAAI,wBAAxH,MAEJ,yBAAKK,UAAU,8CAA8CL,IAAKwJ,EAAKvI,OAC3E,yBAAKZ,UAAU,8CACX,4BAAKmJ,EAAK7I,OAEd,yBAAKN,UAAU,aACX,uBAAGA,UAAU,aAAY,gDAAzB,IAAwDmJ,EAAKO,kBAC7D,uBAAG1J,UAAU,aAAY,wCAAzB,IAAgDmJ,EAAKQ,KACrD,uBAAG3J,UAAU,aAAY,8CAAzB,IAAsDmJ,EAAKS,WAC3D,uBAAG5J,UAAU,aAAY,6CAAzB,IAAqDmJ,EAAKU,eAC1D,uBAAG7J,UAAU,aAAY,2CAAzB,IAAmDwJ,GACnD,uBAAGxJ,UAAU,aAAY,oDAAzB,IAA4DoJ,GAC5D,uBAAGpJ,UAAU,aAAY,0CAAzB,IAAkDmJ,EAAKW,OACvD,4BAAQ9J,UAAU,4BAA4BwE,QAAS,kBAAMwE,EAAOG,EAAKvI,SAAzE,UAAyFuI,EAAK7I,WAK1G,MACJ,IAAK,UACD4I,EAAQH,EAAUpI,KAAI,SAACoJ,GACnB,IAAI9H,EACAgC,EAAQ,EACZhC,EAAgB8H,EAAc9H,cAActB,KAAI,SAACqJ,GAC7C,OAAI/F,IAAU8F,EAAc9H,cAAcR,OAAS,EACvCuI,EAAK1J,KAAO,MAExB2D,IACQ+F,EAAK1J,KAAO,SAExB,IAAI2J,EAMJ,OALAA,EAAeF,EAAcG,cAAcvJ,KAAI,SAACwJ,GAC5C,OAAQA,EAAY7J,KAAO,OAIvB,yBAAKN,UAAU,8CAA8CL,IAAKoK,EAAcnJ,OACpF,yBAAKZ,UAAU,8CACX,4BAAK+J,EAAczJ,OAEvB,yBAAKN,UAAU,aACX,uBAAGA,UAAU,aAAY,4CAAzB,IAAoD+J,EAAcK,SAClE,uBAAGpK,UAAU,aAAY,2DAAzB,IAAmEiC,EAAnE,KACA,uBAAGjC,UAAU,aAAY,kDAAzB,IAA0DiK,GAC1D,uBAAGjK,UAAU,cACb,uBAAGA,UAAU,cACb,uBAAGA,UAAU,cACb,4BAAQA,UAAU,4BAA4BwE,QAAS,kBAAMwE,EAAOe,EAAcnJ,SAAlF,UAAkGmJ,EAAczJ,WAQpI,OAAQ4I,EC3EG,SAASmB,EAAYvK,GAAQ,IAChCqJ,EAAiBrJ,EAAjBqJ,KAAMK,EAAW1J,EAAX0J,OAed,OAAQ,yBAAKxJ,UAAU,oBACnB,yBAAKA,UAAU,aAAaC,GAAI,cAAeC,SAAS,KAAKC,KAAK,SAASC,kBAAgB,aAAaC,cAAY,QAChH,yBAAKL,UAAU,eAAeG,KAAK,YAC/B,yBAAKH,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAcC,GAAG,cAAckJ,EAAK7I,KAAlD,WACA,4BAAQC,KAAK,SAASP,UAAU,QAAQQ,eAAa,QAAQC,aAAW,SACpE,0BAAMJ,cAAY,QAAlB,UAGR,yBAAKL,UAAU,cACQ,IAAlBwJ,EAAO/H,OArBb+H,EAAO7I,KAAI,SAAC2J,GACnB,OAAQ,yBAAK3K,IAAK,SAAS2K,EAAMhK,MAC7B,4BAAKgK,EAAMhK,MACX,2BAAIgK,EAAM5J,KAAK,QAkB+B,oCAE1C,yBAAKV,UAAU,gBACX,4BAAQO,KAAK,SAASP,UAAU,oBAAoBQ,eAAa,SAAjE,c,ICzBH+J,E,kDACjB,WAAYzK,GAAQ,IAAD,8BACf,cAAMA,IAqFV0K,YAAc,SAACC,GAAU,IACbC,EAAc,EAAKtJ,MAAnBsJ,UACR,EAAKvI,SAAS,CACVsI,KAAMA,IAEV,IAAIE,EAAUD,EAAU/J,KAAI,SAACwI,GACzB,OAAOA,KAEPyB,EAAU,GACD,KAATH,GACAG,EAAUD,EAAQ7I,QAAO,SAAAqH,GAAI,OAAIA,EAAKvI,MAAMiK,SAASJ,EAAKK,kBAE1D,EAAK3I,SAAS,CAAE4I,cAAeH,KAG/B,EAAKzI,SAAS,CAAE4I,cAAeJ,KAnGnC,EAAKvJ,MAAQ,CACT4J,MAAO,GACPN,UAAW,GACXO,aAAc,GACdF,cAAe,GACfN,KAAM,GACNjB,OAAQ,GACRL,KAAM,IAEV,EAAK+B,WAAa,EAAKA,WAAWlI,KAAhB,gBAClB,EAAKmI,SAAW,EAAKA,SAASnI,KAAd,gBAChB,EAAKoI,QAAU,EAAKA,QAAQpI,KAAb,gBACf,EAAKiG,UAAY,EAAKA,UAAUjG,KAAf,gBAdF,E,gEAkBXvD,EAAWwD,KAAKnD,MAAMmL,eACtBhI,KAAKd,SAAS,CAAE8I,aAAchI,KAAKnD,MAAMmL,eAEzCxL,EAAWwD,KAAKnD,MAAMkL,QAA0C,IAAhC/H,KAAKnD,MAAM4K,UAAUjJ,OACrDwB,KAAKd,SAAS,CAAC6I,MAAO/H,KAAKnD,MAAMkL,MAAON,UAAWzH,KAAKnD,MAAM4K,YAE9DzH,KAAKkI,a,6CAOTlI,KAAKnD,MAAMuL,SAASpI,KAAK7B,MAAM4J,OAC/B/H,KAAKnD,MAAMwL,aAAarI,KAAK7B,MAAMsJ,a,iCAG3B,IAAD,OAEDvH,EAAM,+BACZG,MAAMH,EAAM,SACPI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,SAAS,CAAE6I,MAAOxH,GAAW,EAAK4H,QAAQ5H,OAChEG,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,qBAAuBT,Q,8BAGrDuE,GAIJ,IAJW,IAAD,OAIDnG,EAAI,EAAGA,EAAImG,EAAKE,QAAQnG,OAAQF,IACtC+B,MAFS,0BAEGoE,EAAKE,QAAQrG,GAAG4B,KACvBI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,UAAS,SAACf,GAAD,MAAY,CAAEsJ,UAAU,GAAD,mBAAMtJ,EAAMsJ,WAAZ,CAAuBlH,a,gCAI/E2F,GAAO,IAMA7G,EAND,OACNa,EAAM,0BACO,UAAfgG,EAAKvI,MACLqC,KAAKd,SAAS,CAAEqH,OAAQ,GAAIL,KAAMA,IAC/B,WACH,IAAIK,EAAS,GADV,aAGC,IAAMpG,EAAQ+F,EAAKK,OAAO/H,OAC1B6B,MAAMH,EAAMgG,EAAKK,OAAOlH,GAAGa,KACtBI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAYgG,EAAO9F,KAAKF,GAAaJ,IAAUoG,EAAO/H,QAAU,EAAKU,SAAS,CAAEqH,OAAQA,EAAQL,KAAMA,OAC3GxF,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,sBAAwBT,OAL9D,IAASb,EAAI,EAAGA,EAAI6G,EAAKK,OAAO/H,OAAQa,IAAM,IAF3C,K,iCAYA1B,GAIP,IAJe,IAAD,OACN8J,EAAczH,KAAK7B,MAAnBsJ,UACAa,EAAYtI,KAAKnD,MAAjByL,QACAC,EAAavI,KAAKnD,MAAlB0L,SAHM,WAILjK,GACL,GAAImJ,EAAUnJ,GAAGX,QAAUA,EAAO,CAC9B,IAAMqK,EAAeP,EAAU5I,QAAO,SAAUqH,GAAQ,OAAOA,EAAK7I,OAASoK,EAAUnJ,GAAGjB,QAI1F,OAHA,EAAK6B,SAAS,CAAE8I,aAAcA,EAAa,KAC3CM,EAAQN,EAAa,IACrBO,EAAS,WACT,UANCjK,EAAI,EAAGA,EAAImJ,EAAUjJ,OAAQF,IAAK,gBAAlCA,GAMD,S,+BAwBF,IAAD,OAEGkJ,EAASxH,KAAK7B,MAAdqJ,KACAM,EAAkB9H,KAAK7B,MAAvB2J,cAHH,EAI+B9H,KAAK7B,MAAjCsJ,EAJH,EAIGA,UAAWlB,EAJd,EAIcA,OAAQL,EAJtB,EAIsBA,KAC3B,OAAQ,yBAAKnJ,UAAU,qBACf,yBAAKA,UAAU,sBACf,wBAAIA,UAAU,4BAAd,iBACI,kBAACwI,EAAD,CAAWI,MAAO6B,EAAM/B,aAAc,SAAA9E,GAAC,OAAI,EAAK4G,YAAY5G,EAAE6F,OAAOb,WAE7E,yBAAK5I,UAAU,OACX,kBAAC8I,EAAD,CAAeC,UAAoB,KAAT0B,EAAcM,EAAgBL,EAAWhI,SAAS,QAAQuG,UAAWhG,KAAKgG,UAAWD,OAAQ/F,KAAKiI,cAEhI,kBAACb,EAAD,CAAab,OAAQA,EAAQL,KAAMA,S,GAvHJhE,aCFtBsG,E,kDACjB,WAAY3L,GAAQ,IAAD,8BACf,cAAMA,IAiEV4L,cAAgB,SAACjB,GAAU,IACfkB,EAAgB,EAAKvK,MAArBuK,YACR,EAAKxJ,SAAS,CACVsI,KAAMA,IAEV,IAAIE,EAAUgB,EAAYhL,KAAI,SAACiL,GAC3B,OAAOA,KAEPhB,EAAU,GACD,KAATH,GACAG,EAAUD,EAAQ7I,QAAO,SAAA8J,GAAc,OAAIA,EAAehL,MAAMiK,SAASJ,EAAKK,kBAC9E,EAAK3I,SAAS,CAAE4I,cAAeH,KAE9B,EAAKzI,SAAS,CAAE4I,cAAeJ,KA7EpC,EAAKvJ,MAAQ,CACTyK,QAAS,GACTF,YAAa,GACbzK,cAAe,GACf6J,cAAc,GACdN,KAAM,IAGV,EAAKqB,YAAc,EAAKA,YAAY9I,KAAjB,gBAVJ,E,gEAeXvD,EAAWwD,KAAKnD,MAAMoB,gBACtB+B,KAAKd,SAAS,CAAEjB,cAAe+B,KAAKnD,MAAMoB,gBAE1CzB,EAAWwD,KAAKnD,MAAM+L,UAA8C,KAAlC5I,KAAKnD,MAAM6L,YAAYlK,OACzDwB,KAAKd,SAAS,CAAE0J,QAAS5I,KAAKnD,MAAM+L,QAASF,YAAa1I,KAAKnD,MAAM6L,cAErE1I,KAAK8I,e,6CAK6B,KAAlC9I,KAAK7B,MAAMuK,YAAYlK,SACvBwB,KAAKnD,MAAMkM,WAAW/I,KAAK7B,MAAMyK,SACjC5I,KAAKnD,MAAMmM,eAAehJ,KAAK7B,MAAMuK,gB,mCAI/B,IAAD,OACHxI,EAAM,+BACZG,MAAMH,EAAM,WACPI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,SAAS,CAAE0J,QAASrI,GAAW,EAAK4H,QAAQ5H,OAClEG,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,uBAAyBT,Q,8BAIvDuE,GAEJ,IAFW,IAAD,OAEDnG,EAAI,EAAGA,EAAImG,EAAKE,QAAQnG,OAAQF,IACrC+B,MAFQ,0BAEIoE,EAAKE,QAAQrG,GAAG4B,KACvBI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,UAAS,SAACf,GAAD,MAAY,CAAEuK,YAAY,GAAD,mBAAMvK,EAAMuK,aAAZ,CAAyBnI,a,kCAIlF5C,GAIR,IAJgB,IAAD,OACP+K,EAAgB1I,KAAK7B,MAArBuK,YACAO,EAAajJ,KAAKnD,MAAlBoM,SACAV,EAAavI,KAAKnD,MAAlB0L,SAHO,WAINjK,GACL,GAAIoK,EAAYpK,GAAGX,QAAUA,EAAO,CAChC,IAAMM,EAAgByK,EAAY7J,QAAO,SAAUqK,GAAU,OAAOA,EAAO7L,OAASqL,EAAYpK,GAAGjB,QAKnG,OAJA,EAAK6B,SAAS,CAAEjB,cAAeA,EAAc,IAAO,EAAKpB,MAAMsM,aAAalL,EAAc,GAAGN,MAAO,IACpGsL,EAAShL,EAAc,IACvB2C,QAAQC,IAAI5C,EAAc,IAC1BsK,EAAS,kBACT,UAPCjK,EAAI,EAAGA,EAAIoK,EAAYlK,OAAQF,IAAK,gBAApCA,GAOD,S,+BAsBF,IAAD,OACGkJ,EAASxH,KAAK7B,MAAdqJ,KACAM,EAAkB9H,KAAK7B,MAAvB2J,cACAY,EAAgB1I,KAAK7B,MAArBuK,YACR,OAAQ,yBAAK3L,UAAU,oBACX,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,4BAAd,kBACA,kBAACwI,EAAD,CAAWI,MAAO6B,EAAM/B,aAAc,SAAA9E,GAAC,OAAI,EAAK8H,cAAc9H,EAAE6F,OAAOb,WAE3E,yBAAK5I,UAAU,OACX,kBAAC8I,EAAD,CAAeC,UAAoB,KAAT0B,EAAcM,EAAgBY,EAAajJ,SAAS,UAAUsG,OAAQ/F,KAAK6I,oB,GA9FjF3G,aC+G7BkH,E,kDAjHX,WAAYvM,GAAQ,IAAD,8BACf,cAAMA,IA4BVwM,YAAc,SAACC,GAAD,OAAWA,EAAM9C,OAAOT,UA7BnB,EA+BnBN,aAAe,SAAC6D,GAKZ,IALuB,IAAD,EACEA,EAAM9C,OAAtBnJ,EADc,EACdA,KAAMsI,EADQ,EACRA,MACN4D,EAAW,EAAKpL,MAAhBoL,OACFC,EAAYC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEnCjL,EAAI,EAAGA,EAAIkL,EAAUhL,OAAQF,IAC9BkL,EAAUlL,GAAGjB,OAASA,IAElBmM,EAAUlL,GAAGqH,MADH,KAAVA,EACqB,EAEAiE,SAASjE,EAAO,KAKjD,EAAKzG,SAAS,CACVqK,OAAQC,KA/CG,EAmDnBK,WAAa,WACT,EAAKhN,MAAMiN,0BAA0B,EAAK3L,MAAMoL,SAlDhD,EAAKQ,aAAe,CAChBR,OAAQ,CACJ,CAAElM,KAAM,MAAOsI,MAAO,GACtB,CAAEtI,KAAM,MAAOsI,MAAO,GACtB,CAAEtI,KAAM,MAAOsI,MAAO,GACtB,CAAEtI,KAAM,MAAOsI,MAAO,GACtB,CAAEtI,KAAM,MAAOsI,MAAO,GACtB,CAAEtI,KAAM,MAAOsI,MAAO,KAI9B,EAAKxH,MAAQ,EAAK4L,aAbH,E,gEAiBf/J,KAAKd,SAAS,CACVqK,OAAQ,CACJ,CAAElM,KAAM,MAAOsI,MAAO3F,KAAKnD,MAAMmN,sBAAX,KACtB,CAAE3M,KAAM,MAAOsI,MAAO3F,KAAKnD,MAAMmN,sBAAX,KACtB,CAAE3M,KAAM,MAAOsI,MAAO3F,KAAKnD,MAAMmN,sBAAX,KACtB,CAAE3M,KAAM,MAAOsI,MAAO3F,KAAKnD,MAAMmN,sBAAX,KACtB,CAAE3M,KAAM,MAAOsI,MAAO3F,KAAKnD,MAAMmN,sBAAX,KACtB,CAAE3M,KAAM,MAAOsI,MAAO3F,KAAKnD,MAAMmN,sBAAX,U,+BAgCxB,IACET,EAAWvJ,KAAK7B,MAAhBoL,OAER,OAAQ,8BACJ,2BAAOxM,UAAWwM,EAAO,GAAG5D,MAAQ,IAAM4D,EAAO,GAAG5D,MAAQ,EAAI,sBAAwB,oBAAsBD,QAAQ,OAAtH,YACQ,2BAAO3I,UAAU,QACbO,KAAK,SACLD,KAAK,MACLL,GAAG,MACH2I,MAAO4D,EAAO,GAAG5D,MACjBC,SAAU5F,KAAKyF,aACfwE,QAASjK,KAAKqJ,cAC1B,2BAAOtM,UAAWwM,EAAO,GAAG5D,MAAQ,IAAM4D,EAAO,GAAG5D,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,gBACQ,2BAAO3I,UAAU,QACbO,KAAK,SACLD,KAAK,MACLL,GAAG,MACH2I,MAAO4D,EAAO,GAAG5D,MACjBC,SAAU5F,KAAKyF,aACvBwE,QAASjK,KAAKqJ,cAClB,2BAAOtM,UAAWwM,EAAO,GAAG5D,MAAQ,IAAM4D,EAAO,GAAG5D,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,aACQ,2BAAO3I,UAAU,QACbO,KAAK,SACLD,KAAK,MACLL,GAAG,MACH2I,MAAO4D,EAAO,GAAG5D,MACjBC,SAAU5F,KAAKyF,aACfwE,QAASjK,KAAKqJ,cAC1B,2BAAOtM,UAAWwM,EAAO,GAAG5D,MAAQ,IAAM4D,EAAO,GAAG5D,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,gBACQ,2BAAO3I,UAAU,QACbO,KAAK,SACLD,KAAK,MACLL,GAAG,MACH2I,MAAO4D,EAAO,GAAG5D,MACjBC,SAAU5F,KAAKyF,aACfwE,QAASjK,KAAKqJ,cAC1B,2BAAOtM,UAAWwM,EAAO,GAAG5D,MAAQ,IAAM4D,EAAO,GAAG5D,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,YACQ,2BAAO3I,UAAU,QACbO,KAAK,SACLD,KAAK,MACLL,GAAG,MACH2I,MAAO4D,EAAO,GAAG5D,MACjBC,SAAU5F,KAAKyF,aACfwE,QAASjK,KAAKqJ,cAC1B,2BAAOtM,UAAWwM,EAAO,GAAG5D,MAAQ,IAAM4D,EAAO,GAAG5D,MAAQ,EAAI,sBAAwB,oBAAqBD,QAAQ,OAArH,UACQ,2BAAO3I,UAAU,QACbO,KAAK,SACLD,KAAK,MACLL,GAAG,MACH2I,MAAO4D,EAAO,GAAG5D,MACjBC,SAAU5F,KAAKyF,aACfwE,QAASjK,KAAKqJ,cAClB,2BAAO/L,KAAK,SAASqI,MAAM,SAASpE,QAASvB,KAAK6J,kB,GA7GtC3H,aCFjB,SAASgI,EAAeC,GAMnC,IALA,IAEIC,EAAe,EACfC,EAAgB,EAChBC,EAAqB,GAChBhM,EAAI,EAAGA,EALK,EAKeA,IAChC8L,EAAeG,KAAKC,MAAOD,KAAKE,SAAWN,EAAU,GACrDG,EAAmB7J,KAAK2J,GAE5BE,EAAmBI,OACnBJ,EAAmBK,OAAO,EAAGC,GAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAmB9L,OAAQqM,IAC3CR,GAAiBC,EAAmBO,GAExC,OAAOR,E,ICVUS,E,kDACjB,WAAYjO,GAAQ,IAAD,8BACf,cAAMA,IA4JViN,0BAA4B,SAACiB,GAKzB,IALuC,MACmB,EAAK5M,MAC3DoL,EAFmC,EAC/BS,sBAEJgB,EAAW,GACXC,EAJmC,EACRnG,uBAItBxG,EAAI,EAAGA,EAAIyM,EAAUvM,OAAQF,IAClC,GAAIyM,EAAUzM,GAAGqH,MAAQ,GAAKoF,EAAUzM,GAAGqH,MAAQ,GAC/CqF,EAASvK,KAAKsK,EAAUzM,GAAGjB,UACxB,CACH,IAAIsI,EACJA,EAAQiE,SAASmB,EAAUzM,GAAGqH,MAAO,IACrC4D,EAAOwB,EAAUzM,GAAGjB,MAAQsI,EAC5BsF,EAAUF,EAAUzM,GAAGjB,MAAQ,EAAK6N,qBAAqBvF,GACzD,EAAKzG,SAAS,CAAE8K,sBAAuBT,EAAQzE,uBAAwBmG,IACvE,EAAKpO,MAAMsO,0BAA0BF,GAG7C,GAAID,EAASxM,OAAS,EAAG,CAErB,IADA,IAAI4M,EAAc,0DACT9J,EAAI,EAAGA,EAAI0J,EAASxM,OAAQ8C,IAC7BA,EAAI0J,EAASxM,OAAS,EACtB4M,GAAeJ,EAAS1J,GAAK,KAE7B8J,GAAeJ,EAAS1J,GAGhC8J,GAAe,IACf,EAAKvO,MAAM8B,mBAAmByM,KAtLlC,EAAKjN,MAAQ,CACTkN,cAAe,GACfC,kBAAmB,GACnBtB,sBAAuB,GACvBlF,uBAAwB,GACxByG,qBAAqB,GAEzB,EAAKC,SAAW,EAAKA,SAASzL,KAAd,gBATD,E,gEAaXvD,EAAWwD,KAAKnD,MAAMwO,eACtBrL,KAAKd,SAAS,CACVmM,cAAerL,KAAKnD,MAAMwO,cAC1BC,kBAAmBtL,KAAKnD,MAAMyO,kBAC9BtB,sBAAuBhK,KAAKnD,MAAMmN,sBAClClF,uBAAwB9E,KAAKnD,MAAMiI,wBACpC9E,KAAKyL,mBAAmBzL,KAAKnD,MAAMyO,oBAEtCtL,KAAK0L,mBAET9K,QAAQC,IAAIb,KAAKnD,S,6CAIjBmD,KAAKnD,MAAM8O,iBAAiB3L,KAAK7B,MAAMkN,cAAerL,KAAK7B,MAAMmN,kBAAmBtL,KAAK7B,MAAM2G,uBAAwB9E,KAAK7B,MAAM6L,uBAClIpJ,QAAQC,IAAI,+GAAgHb,KAAK7B,MAAM2G,0B,yCAGxH8G,GAEf,IADA,IAAIP,EAAgB,GACXR,EAAI,EAAGA,EAAIe,EAAIpN,OAAQqM,IAAK,CAEjCQ,EADcO,EAAIf,GAAGlN,OACI,EAE7BiD,QAAQC,IAAI,oDAAqDwK,GACjErL,KAAKd,SAAS,CAAE8K,sBAAuBqB,M,yCAGvB,IAAD,OACTnL,EAAM,+BACZG,MAAMH,EAAM,kBACPI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,SAAS,CAAEmM,cAAe9K,GAAU,EAAK4H,QAAQ5H,OACvED,MAAK,WAAQ,EAAKmL,mBAAmB,EAAKtN,MAAMkN,cAAc1G,YAC9DjE,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,6CAA+CT,Q,8BAG7EuE,GAEJ,IAFW,IAAD,OACJvE,EAAM,0BACH5B,EAAI,EAAGA,EAAImG,EAAKE,QAAQnG,OAAQF,IACrC+B,MAAMH,EAAMuE,EAAKE,QAAQrG,GAAG4B,KACvBI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAY,EAAKrB,UAAS,SAACf,GAAD,MAAY,CAAEmN,kBAAkB,GAAD,mBAAMnN,EAAMmN,mBAAZ,CAA+B/K,WAC7FG,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,qCAAuCT,Q,2CAI5D2L,GAAmB,IAC5B5N,EAAkB+B,KAAKnD,MAAvBoB,cACR,QAAQ,GACJ,KAAK4N,EAAoB,GAAKA,EAAoB,EAE9C,OADAjL,QAAQC,IAAI,qCAAuCgL,EAAoB,OAC9D,EACb,KAAKA,EAAoB,GAAKA,EAAoB,EAE9C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,OAC/D,EACb,KAAKA,EAAoB,GAAKA,EAAoB,EAE9C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,OAC/D,EACb,KAAKA,EAAoB,GAAKA,EAAoB,EAE9C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,OAC/D,EACb,KAAKA,EAAoB,GAAKA,EAAoB,GAE9C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,OAC/D,EACb,KAAKA,EAAoB,GAAKA,EAAoB,GAE9C,OADAjL,QAAQC,IAAI,uCAAyCgL,EAAoB,MACjE,EACZ,KAAKA,EAAoB,IAAMA,EAAoB,GAE/C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,MAChE,EACZ,KAAKA,EAAoB,IAAMA,EAAoB,GAE/C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,MAChE,EACZ,KAAKA,EAAoB,IAAMA,EAAoB,GAE/C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,MAChE,EACZ,KAAKA,EAAoB,IAAMA,EAAoB,GAE/C,OADAjL,QAAQC,IAAI,sCAAwCgL,EAAoB,MAChE,EACZ,QAEI,OADAjL,QAAQC,IAAI,wCAA0C5C,EAAcwF,aAAa0B,qBAAqBxH,MAAQ,4BAA8BkO,EAAoB,UACxJ,K,qCAMJ,IAAD,EAC0C7L,KAAK7B,MAAlDmN,EADG,EACHA,kBAAmBtB,EADhB,EACgBA,sBADhB,EAE6BhK,KAAKnD,MAArCmL,EAFG,EAEHA,aAAc/J,EAFX,EAEWA,cAClBqI,EAAQ,EACRwF,EAAe,GA4BnB,OA3BoBR,EAAkB5N,KAAI,SAACqO,GAGvC,GAFAD,EAAe,0BACfxF,EAAQ0D,EAAsB+B,EAAQpO,OAClCnB,EAAWyB,GACX,IAAK,IAAIoB,EAAI,EAAGA,EAAIpB,EAAcgJ,cAAczI,OAAQa,IAChD0M,EAAQpO,QAAUM,EAAcgJ,cAAc5H,GAAG1B,QACjDmO,GAAgB,gBAI5B,GAAItP,EAAWwL,GACX,IAAK,IAAI1I,EAAI,EAAGA,EAAI0I,EAAa5B,gBAAgB5H,OAAQc,IACjD0I,EAAa5B,gBAAgB9G,GAAG+G,cAAc1I,QAAUoO,EAAQpO,QAChEmO,GAAgB,SAChBxF,EAAQ0D,EAAsB+B,EAAQpO,OAASqK,EAAa5B,gBAAgB9G,GAAGgH,OAI3F,OAAQ,yBAAKvJ,UAAU,6DAA6DL,IAAKqP,EAAQpO,OACzF,yBAAKZ,UAAU,uDACX,4BAAKgP,EAAQC,YAEjB,yBAAKjP,UAAU,aACX,uBAAGA,UAAW+O,EAAcpP,IAAKqP,EAAQpO,OAAQ2I,U,+BAU5DyF,GAAU,IACPV,EAAkBrL,KAAK7B,MAAvBkN,cACRzK,QAAQC,IAAI,6BAA8BwK,GAI1C,IANc,MAG4CrL,KAAK7B,MAC3DoL,EAJU,EAGNS,sBAEJiB,EALU,EAGiBnG,uBAGtBxG,EAAI,EAAGA,EAAI+M,EAAcrK,MAAO1C,IACrC,GAAI+M,EAAc1G,QAAQrG,GAAGX,QAAUoO,EAAS,CAC5C,IAAIlK,EAAMqI,EAAe,GACzBX,EAAOwC,GAAWlK,EAClBoJ,EAAUc,GAAW/L,KAAKkL,qBAAqBrJ,GAC/C7B,KAAKd,SAAS,CAAE8K,sBAAuBT,EAAQzE,uBAAwBmG,IACvEjL,KAAKnD,MAAMsO,0BAA0BF,GACrC,S,4CAqCRjL,KAAKd,UAAS,SAAAf,GAAK,MAAK,CACpBoN,qBAAsBpN,EAAMoN,0B,gCAIzB,IAAD,OAEF3J,EAD0B5B,KAAK7B,MAA3BmN,kBACwB5N,KAAI,SAACoO,EAAcnO,GAC/C,OAAQ,4BAAQ4D,QAAS,kBAAM,EAAKiK,SAASM,EAAanO,QAAQZ,UAAU,6CAA6CO,KAAK,SAASZ,IAAKiB,GAAQmO,EAAaE,cAErK,OAAQ,yBAAKjP,UAAU,2BAA2B6E,K,+BAG5C,IAAD,OACG2J,EAAwBvL,KAAK7B,MAA7BoN,oBACR,OAAQ,yBAAKxO,UAAU,oBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,eAAd,uBAER,yBAAKA,UAAU,OAAOiD,KAAKiM,gBAC3B,yBAAKlP,UAAU,OACX,yBAAKA,UAAU,qCACVwO,EAAsB,kBAAC,EAAD,CAAmBzB,0BAA2B9J,KAAK8J,0BAA2BE,sBAAuBhK,KAAK7B,MAAM6L,wBAA4BhK,KAAK4B,UACxK,4BAAQL,QAAS,kBAAM,EAAK2K,uBAAuBnP,UAAU,6CAA6CwO,EAAsB,aAAe,gBAAwB,oC,GArNpJrJ,aC0C5BiK,E,kDApCX,WAAYtP,GAAQ,IAAD,8BACf,cAAMA,IACDsB,MAAQ,GAFE,E,qDAiBf,OADuB6B,KAAKnD,MAApBuP,YAEJ,IAAK,QACD,OAAQ,kBAAC,EAAUpM,KAAKnD,OAC5B,IAAK,UACD,OAAQ,kBAAC,EAAYmD,KAAKnD,OAC9B,IAAK,gBACD,OAAQ,kBAAC,EAAuBmD,KAAKnD,OACzC,IAAK,SACD,OAAQ,kBAAC,EAAgBmD,KAAKnD,OAClC,IAAK,iBACD,OAAQ,kBAAC,EAAkBmD,KAAKnD,OACpC,QACI,OAAQ,yBAAKE,UAAU,gCAAf,+B,GA9BAmF,aC+BTmK,E,kDApCX,WAAYxP,GAAQ,IAAD,8BACf,cAAMA,IACDsB,MAAQ,GAFE,E,gEASf,IAAMiO,EAAapM,KAAKnD,MAAMuP,WACxBE,EAAuBtM,KAAKnD,MAAMyP,qBAClC/D,EAAWvI,KAAKnD,MAAM0L,SAS5B,OAPiB+D,EAAqB5O,KAAI,SAAC+B,EAAU9B,GACjD,OAAIyO,IAAe3M,EACP,4BAAQnC,KAAK,SAASP,UAAU,iCAAiCE,SAAS,KAAKsP,gBAAc,OAAO7P,IAAKiB,GAAQ8B,GAEjH,4BAAQnC,KAAK,SAASiE,QAAS,WAAQgH,EAAS9I,IAAc1C,UAAU,+BAA+BL,IAAKiB,GAAQ8B,Q,+BAQpI,OAAQ,yBAAK1C,UAAU,uCAAuCC,GAAG,+BAC7D,4BAAQD,UAAU,qCAAqCO,KAAK,SAASkE,cAAY,WAAWC,cAAY,qBAAqB+K,gBAAc,oBAAoBC,gBAAc,QAAQjP,aAAW,qBAC5L,0BAAMT,UAAU,+BAEpB,yBAAKA,UAAU,kCAAkCC,GAAG,qBAC/CgD,KAAK0M,0B,GA/BGxK,aCYVyK,EAdG,SAAC9P,GAGf,IAAI+P,EAAW,yBAAK7P,UAAU,MAAMC,GAAG,UAQvC,OAPIH,EAAMgQ,aAAarO,OAAS,IAC5BoO,EAAW,yBAAK7P,UAAU,MAAMC,GAAG,SAC/B,yBAAKD,UAAU,mBACVF,EAAMgQ,gBAIXD,GCgMGE,E,kDAnMX,WAAYjQ,GAAQ,IAAD,8BACf,cAAMA,IAgDV8B,mBAAqB,SAACD,GAClB,EAAKQ,SAAS,CAAE2N,aAAcnO,GAAW,EAAKqO,gBAlD/B,EAqDnBA,YAAc,WACV,IAAMC,EAAYC,SAASC,eAAe,SAI1CC,YAAW,WACP,IAAIC,EAAOC,aAAY,WACdL,EAAUM,MAAMC,UAClBP,EAAUM,MAAMC,QAAU,GAEzBP,EAAUM,MAAMC,QAAU,EAC1BP,EAAUM,MAAMC,SAAW,IAE3BC,cAAcJ,KAEnB,MACJ,MACH,EAAKlO,SAAS,CAAE2N,aAAc,KAC9BG,EAAUM,MAAMC,QAAU,GAvEX,EA2EnBjJ,UAAY,SAAC7B,GACT,EAAKvD,SAAS,CAAEuD,OAAQA,KA5ET,EA+EnB8B,cAAgB,SAACL,GACb,EAAKhF,SAAS,CAAEgF,WAAYA,KAhFb,EAmFnBhB,iBAAmB,SAACd,GAChB,EAAKlD,SAAS,CAAEiF,cAAe/B,KApFhB,EAuFnBM,gBAAkB,SAACD,GACf,EAAKvD,SAAS,CAAEsD,aAAcC,KAxFf,EA2FnB2C,iBAAmB,SAACqI,GAChB,EAAKvO,SAAS,CAAEiE,WAAYsK,KA5Fb,EA+FnBlF,SAAW,SAAC9I,GACR,EAAKP,SAAS,CAAEkN,WAAY3M,KAhGb,EAmGnByK,eAAiB,SAACC,GAMd,IALA,IAEIC,EAAe,EACfC,EAAgB,EAChBC,EAAqB,GAChBhM,EAAI,EAAGA,EALK,EAKeA,IAChC8L,EAAeG,KAAKC,MAAOD,KAAKE,SAAWN,EAAU,GACrDG,EAAmB7J,KAAK2J,GAE5BE,EAAmBI,OACnBJ,EAAmBK,OAAO,EAAGC,GAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAmB9L,OAAQqM,IAC3CR,GAAiBC,EAAmBO,GAExC,OAAOR,GAlHQ,EA6HnBzK,sBAAwB,SAACZ,GACrB,EAAKE,SAAS,CAAEF,cAAeA,KA9HhB,EAiInBG,iBAAmB,SAACuO,EAAOtP,GACvB,EAAKc,SAAS,CACVF,cAAe0O,EACfxP,oBAAqBE,KApIV,EA4InBuN,iBAAmB,SAACN,EAAeC,EAAmBL,EAAWjB,GAC7D,EAAK9K,SAAS,CACVmM,cAAeA,EACfC,kBAAmBA,EAEnBtB,sBAAuBA,KAjJZ,EAyJnBmB,0BAA4B,SAACF,GACzBrK,QAAQC,IAAI,6CAA8CoK,GAC1D,EAAK/L,SAAS,CAAE4F,uBAAwBmG,KAzJxC,EAAK9M,MAAQ,CACTkN,cAAe,GACfC,kBAAmB,GACnBxG,uBAAwB,GACxBkF,sBAAuB,GACvB6C,aAAc,GACdc,SAAU,WACV1P,cAAe,GACf6F,UAAW,GACXwI,qBAAsB,CAAC,QAAS,UAAW,iBAAkB,gBAAiB,UAC9EF,WAAY,QACZpN,cAAe,GACfW,qBAAsB,GACtBzB,oBAAqB,GACrB8J,aAAc,GACdvF,OAAQ,GACRD,aAAc,GACd0B,WAAY,GACZf,WAAY,GACZgB,cAAe,GACfiB,iBAAkB,EAAKA,iBACvBzG,mBAAoB,EAAKA,mBACzBuE,iBAAkB,EAAKA,iBACvB/D,iBAAkB,EAAKA,iBACvByO,yBAA0B,EAAKA,yBAC/BhO,sBAAuB,EAAKA,sBAC5B8C,gBAAiB,EAAKA,gBACtB4B,UAAW,EAAKA,UAChBC,cAAe,EAAKA,cACpBoH,iBAAkB,EAAKA,iBACvBkC,qBAAsB,EAAKA,qBAC3B1C,0BAA2B,EAAKA,2BAGpC,EAAK7C,QAAU,EAAKA,QAAQvI,KAAb,gBACf,EAAKkJ,SAAW,EAAKA,SAASlJ,KAAd,gBAChB,EAAKoJ,aAAe,EAAKA,aAAapJ,KAAlB,gBAtCL,E,+IAqHX+N,GACJ9N,KAAKd,SAAS,CAAE8I,aAAc8F,M,+BAGzBC,GACL/N,KAAKd,SAAS,CAAEjB,cAAe8P,EAAavL,aAAc,GAAI2B,cAAe,GAAInF,cAAe,GAAId,oBAAqB,GAAIuE,OAAQ,GAAIyB,WAAY,O,mCAoC5IvG,EAAOqQ,GAAe,IAAD,OAE9B3N,MAAMH,uCAAwBvC,EAAQ,WAAaqQ,GAC9C1N,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACF,EAAKrB,SAAS,CACV4E,UAAWvD,S,+BAKlB,MAGmCP,KAAK7B,MAArC6J,EAHH,EAGGA,aAAc/J,EAHjB,EAGiBA,cAEtB,OAAQ,yBAAKjB,GAAG,WAAWD,UAAU,mBACjC,kBAAC,EAAD,CAAW8P,aAAc7M,KAAK7B,MAAM0O,eACpC,yBAAK9P,UAAU,OACX,yBAAKA,UAAU,qBAAqBC,GAAG,iBACnC,wBAAID,UAAU,OACTP,EAAWwL,GAAgBA,EAAa3K,KAAO,KAChD,mCACCb,EAAWyB,GAAiBA,EAAcZ,KAAO,QAI9D,yBAAKN,UAAU,OACX,kBAAC,EAAD,iBAAeiD,KAAK7B,MAAW6B,KAAKnD,MAApC,CAA2CsM,aAAcnJ,KAAKmJ,aAAcb,QAAStI,KAAKsI,QAASC,SAAUvI,KAAKuI,SAAUU,SAAUjJ,KAAKiJ,aAE/I,yBAAKlM,UAAU,OACX,kBAAC,EAAD,CAAYwL,SAAUvI,KAAKuI,SAAU6D,WAAYpM,KAAK7B,MAAMiO,WAAYE,qBAAsBtM,KAAK7B,MAAMmO,6B,GA9L3FpK,aCiKT+L,E,kDACjB,WAAYpR,GAAQ,IAAD,8BACf,cAAMA,IA8FVqR,mBAAqB,WACjB,EAAKhP,UAAS,SAAAf,GAAK,MAAK,CACpBgQ,OAAQhQ,EAAMgQ,WAjGH,EAqGnB/F,SAAW,SAACL,GACR,EAAK7I,SAAS,CAAE6I,MAAOA,KAtGR,EAyGnBM,aAAe,SAACZ,GACZ,EAAKvI,SAAS,CAAEuI,UAAWA,KA1GZ,EA6GnBsB,WAAa,SAACH,GACV,EAAK1J,SAAS,CAAC0J,QAASA,KA9GT,EAiHnBI,eAAiB,SAACN,GACd,EAAKxJ,SAAS,CAACwJ,YAAaA,KAhH5B,EAAKvK,MAAQ,CACT4J,MAAO,GACPN,UAAW,GACXmB,QAAS,GACTF,YAAa,GACb0F,SAAU,GACVC,aAAc,GACdF,OAAO,EACPG,OAAO,EACPlG,SAAU,EAAKA,SACfC,aAAc,EAAKA,aACnBU,WAAY,EAAKA,WACjBC,eAAgB,EAAKA,gBAKzB,EAAKb,QAAU,EAAKA,QAAQpI,KAAb,gBAGf,EAAKmO,mBAAqB,EAAKA,mBAAmBnO,KAAxB,gBAtBX,E,6DAyBFG,GAAM,IAAD,OAClB,OAAOG,MAAMH,EAAM,kBACdI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAwD,OAA5C,EAAKrB,SAAS,CAAEmM,cAAe9K,IAAoBA,KACpEG,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,6BAA+BT,Q,gCAG3DA,GAAM,IAAD,OACX,OAAOG,MAAMH,EAAM,UACdI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAiD,OAArC,EAAKrB,SAAS,CAAEuD,OAAQlC,IAAoBA,KAC7DG,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,sBAAwBT,Q,kCAGlDA,GAAM,IAAD,OACb,OAAOG,MAAMH,EAAM,YACdI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAkD,OAAtC,EAAKrB,SAAS,CAAEkP,SAAU7N,IAAmBA,KAC9DG,OAAM,SAAAC,GAAOC,QAAQC,IAAIF,EAAI,wBAA0BT,Q,8BAgBxDuE,EAAMhF,GAGV,IAFA,IAAIiF,EAAO,GAEFpG,EAAI,EAAGA,EAAImG,EAAKE,QAAQnG,OAAQF,IACrCiQ,QAAQC,QAAQnO,MAFR,0BAEoBoE,EAAKE,QAAQrG,GAAG4B,MACvCI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAYmE,EAAKjE,KAAKF,MAGpC,OAAQd,GAIJ,IAAK,UACDO,KAAKd,SAAS,CAAEwJ,YAAahE,IAC7B,MACJ,IAAK,iBACD1E,KAAKd,SAAS,CAAEoM,kBAAmB5G,IACnC,MACJ,IAAK,SACD1E,KAAKd,SAAS,CAAEgF,WAAYQ,IAC5B,MACJ,IAAK,WACD1E,KAAKd,SAAS,CAAEmP,aAAc3J,O,+BAiDtC,OAFkB1E,KAAK7B,MAAfgQ,MAYI,kBAAC,EAAoBnO,KAAK7B,OAT1B,yBAAKpB,UAAU,mBACnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBACX,uCACA,4BAAQwE,QAASvB,KAAKkO,mBAAoBnR,UAAU,0BAApD,8B,GAzISmF,a,8BCjKjCuM,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAASC,eAAe,W","file":"static/js/main.93b47037.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React from 'react'\r\nimport isSelected from '../helper-functions'\r\n\r\nexport default function ProficiencyModal(props){\r\n    function showProficiency() {\r\n        const { proficiencySelectedInfo } = props;         \r\n        if (isSelected(proficiencySelectedInfo)) {\r\n             let description = proficiencySelectedInfo.desc.map((desc, index) => {\r\n                return (<p className='' key={index}>{desc}</p>);\r\n             });\r\n            return description;\r\n        }\r\n       \r\n        return null;      \r\n    }\r\n    const { proficiencySelectedInfo } = props;\r\n    const noProficiencyTitle = \"Choose a proficiency.\"        \r\n\r\n    return (<div className=' info-modal'>\r\n            <div className=\"modal fade\" id='proficiency-info' tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"proficiencyInfo\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"proficiencyInfo\">{isSelected(proficiencySelectedInfo) ? proficiencySelectedInfo.name : noProficiencyTitle}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {showProficiency()}\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>);\r\n}","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport ProficiencyModal from '../helper/modal/proficiency-modal'\r\n\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            category: 0,\r\n            proficiencies: [],\r\n            proficienciesChosen: [],           \r\n            proficienciesInfo: [], //objects\r\n            proficienciesChoices: [],  //objects          \r\n            startingProficiencies: [], //objects\r\n            proficiencyNavigationButtons: [], //jsx\r\n            proficiencyIndex: '',\r\n            proficiencySelectedInfo: {},\r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);        \r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected } = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n            this.getProficienciesChoices();          \r\n        }\r\n    }   \r\n\r\n    getProficienciesChoices() {\r\n        const { classSelected } = this.props;\r\n        const url = 'https://www.dnd5eapi.co';\r\n        let choices = [];\r\n        for (var b = 0; b < classSelected.proficiency_choices.length; b++) {\r\n            const index = b;\r\n            for (var c = 0; c < classSelected.proficiency_choices[b].from.length; c++) {\r\n                const check = c;\r\n                fetch(url + classSelected.proficiency_choices[b].from[c].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { choices.push(result); if (check === classSelected.proficiency_choices[index].from.length - 1 && index === classSelected.proficiency_choices.length - 1) { this.setState({ proficienciesInfo: choices }); } })\r\n                    .catch(e => { console.log(e + \" -- getProficiencyChoices()  -- \" + url); });\r\n            }           \r\n        }\r\n    }\r\n\r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props;\r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = [];\r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    getProficiencyInfo(proficiency) { \r\n        const url = 'https://www.dnd5eapi.co';\r\n        console.log(\"getProficiencyInfo() \", proficiency);\r\n         \r\n        fetch(url + proficiency.reference.url)\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ proficiencySelectedInfo: result, proficiencyIndex: proficiency.index, }); })\r\n            .catch(e => { console.log(e + \" -- getProficiencyInfo()  -- \" + url); });\r\n    }\r\n       \r\n    startingProficiencies() {\r\n       const { classSelected } = this.props;\r\n        const count = classSelected.proficiencies.length;\r\n        let startingProficiences = classSelected.proficiencies.map((proficiency, index) => {\r\n            let proficiencyFormatting = '';\r\n            if (index === count - 1) {\r\n                proficiencyFormatting = proficiency.name + '.'\r\n                return (proficiencyFormatting)\r\n            }            \r\n            proficiencyFormatting = proficiency.name + ', '\r\n            return (proficiencyFormatting)\r\n        });\r\n        return (startingProficiences);\r\n    }\r\n    \r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean up\r\n        const { classSelected } = this.props;\r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }\r\n        }        \r\n    }\r\n\r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {\r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    proficiencySelectedInfo(str) {\r\n        const { proficienciesInfo } = this.state;\r\n        for (var a = 0; a < proficienciesInfo.length; a++) {\r\n            if (str === proficienciesInfo[a].index) {\r\n                this.getProficiencyInfo(proficienciesInfo[a])\r\n            }\r\n        }        \r\n    }\r\n     \r\n    proficienciesToChooseFrom() {\r\n        const { classSelected } = this.props;        \r\n        const { proficienciesChosen, category } = this.state;       \r\n        let chooseFrom = [];       \r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency, index) => {\r\n                let classNames = 'btn btn-md '\r\n                if (proficienciesChosen.length !== 0) {\r\n                    for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                        if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                            classNames += 'btn-success col-11';\r\n                            let prof = []\r\n                            prof[0] = proficiency;                           \r\n                            return (<div className=\"btn-group col-12 proficiency-selection\" role=\"group\" aria-label=\"proficiency-buttons\" key={index}>\r\n                                <button className={classNames} type='button' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.index}>{proficiency.name}</button>\r\n                                <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#proficiency-info' onClick={() => { this.proficiencySelectedInfo(proficiency.index) }} key={'info-btn-proficiency-' + proficiency.indec}>?</button>\r\n                            </div>);\r\n                        }\r\n                    }\r\n                }                 \r\n                classNames += 'btn-secondary col-11';\r\n                let prof = []\r\n                prof[0] = proficiency; //putting this into array so getProficiencyInfo(prof) can handle multiple incoming object.\r\n                return (<div className=\"btn-group col-12 proficiency-selection\" role=\"group\" aria-label=\"proficiency-buttons\" key={index}>\r\n                    <button className={classNames} type='button' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.index}>{proficiency.name}</button>\r\n                    <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#proficiency-info' onClick={() => { this.proficiencySelectedInfo(proficiency.index) }} key={'info-btn-proficiency-' + proficiency.index}>?</button>\r\n                </div>)\r\n            });\r\n            chooseFrom.push(chooseProficiencies);\r\n        }       \r\n        return (chooseFrom[category]);\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ category: newCategory, });\r\n    }\r\n\r\n    proficienciesNavigation() {\r\n        const { classSelected } = this.props;\r\n        const { category } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let buttons = [];\r\n        for (var a = 0; a < classSelected.proficiency_choices.length; a++) {\r\n            let newCategory = a;\r\n            let check = proficienciesChosen[newCategory]; //I have to check because this comes through undefined the very first time this function runs, need to figure out a better solution.\r\n            let num;\r\n            if (check === undefined) {\r\n                num = 0;\r\n            } else {\r\n                num = proficienciesChosen[newCategory].length;\r\n            }\r\n            if (category === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-secondary' onClick={() => this.setNavigationCategory(newCategory)} key={classSelected.name + a}>Choose: {classSelected.proficiency_choices[newCategory].choose - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='card-header text-white bg-dark text-center'>{buttons}</div>);\r\n    }\r\n\r\n    render() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencySelectedInfo } = this.state;\r\n         return (isSelected(classSelected) ? <div className='col-12 selection'>\r\n            <div className=\"col-12 text-center selectionTitle\">\r\n                <h3>{classSelected.name} Proficiencies</h3>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"card col-12 border-dark mb-3 character-card \">                   \r\n                        {this.proficienciesNavigation()}                   \r\n                    <div className=\"card-body\">\r\n                        <h5 className='card-title text-center'>Starting Proficiencies</h5>\r\n                        <p className='card-text'>{this.startingProficiencies()}</p>\r\n                        <h5 className='card-title text-center'>Choose Proficiencies</h5>\r\n                        {this.proficienciesToChooseFrom()}\r\n                        <ProficiencyModal proficiencySelectedInfo={proficiencySelectedInfo} classSelected={classSelected} /> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> : <div className='col-12 text-center selection'><h3 className='selectionTitle'>Choose a class to select your proficiencies.</h3></div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React from 'react'\r\nimport { Component } from 'react';\r\nimport isSelected from '../helper-functions'\r\nexport default class SpellModal extends Component { // change this to a function instead of class, unless you think of a reason it needs a state.\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            spell: {}\r\n        }       \r\n    }  \r\n\r\n    showSpell() {\r\n        const { spell } = this.props;\r\n        if (isSelected(this.props.spell)) {\r\n            let spellDescriptions = spell.desc.map((desc, index) => {\r\n               console.log(desc)\r\n                return (<p className='' key={index}>{desc}</p>);\r\n            });\r\n            return spellDescriptions;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=' info-modal'>\r\n            <div className=\"modal fade\" id='spell-info' tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"spellInfo\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"spellInfo\">{this.props.spell.name}</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            { this.showSpell() }\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n   }    \r\n}","import React, { Component } from 'react';\r\nimport isSelected from './helper/helper-functions';\r\nimport SpellModal from './helper/modal/spell-modal';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n            classSpells: [], \r\n            spellSlots: [0,0], \r\n            spellsAvailableByLevel: [],\r\n            spellsChosen: [],\r\n            levelData: {},\r\n            navigationCategory: 0,\r\n            selected: false, \r\n            spellBook: [],\r\n            spells: {},\r\n            spellsInfo: [],\r\n            selectedSpell: {},\r\n        };\r\n       // this.spellSlots = this.spellSlots.bind(this);\r\n        this.spellBook = this.spellBook.bind(this);\r\n        this.getSpells = this.getSpells.bind(this);\r\n       // this.getSpellInfo = this.getSpellInfo.bind(this);   \r\n        this.setSpellInfo = this.setSpellInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {   \r\n        if (isSelected(this.props.classSelected) && this.props.classSelected.spellcasting !== undefined) {        \r\n            if (this.props.spellsInfo.length === this.props.spells.count) {\r\n                this.setState({ spells: this.props.spells, spellsInfo: this.props.spellsInfo, })\r\n                this.setClassSpells(1, this.props.spellsInfo);\r\n                this.spellBook();\r\n            } else {\r\n                this.getSpells();\r\n                this.spellBook();\r\n            }\r\n        } else {\r\n            console.log(\"not a caster\");\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.spellsInfo.length === this.state.spells.count) {\r\n            this.props.setSpells(this.state.spells);\r\n            this.props.setSpellsInfo(this.state.spellsInfo);    \r\n        }\r\n    }   \r\n    \r\n    getSpells() {\r\n        const { classSelected } = this.props;\r\n        const url = 'https://www.dnd5eapi.co';\r\n        fetch(url + classSelected.spells)\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, }, this.getSpellInfo(result)) })\r\n            .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getSpellInfo(data) { // the setClassSpells() could be in a better spot?             \r\n        let info = [];\r\n        const url = 'https://www.dnd5eapi.co';\r\n        for (let i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result); if (this.state.spellsInfo.length === this.state.spells.count) { this.setClassSpells(1, info) }})\r\n                .catch(e => { console.log(e + \" -- getSpellInfo() -- \" + url); });\r\n        }\r\n        this.setState({ spellsInfo: info, });      \r\n    }\r\n    \r\n    setClassSpells(level, spellsInfoData) {       \r\n        const spellsInfo = spellsInfoData;    \r\n        let spells = [];\r\n        switch (level) {\r\n            case 1:\r\n                for (let i = 0; i < spellsInfo.length; i++) {\r\n                       if (spellsInfo[i].level <= level) {\r\n                           spells.push(spellsInfo[i]);\r\n                       }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n               break;\r\n            default:\r\n                alert(\"level of character is invalid in spells creation. \");\r\n        }\r\n    }\r\n\r\n   \r\n    spellBook() {\r\n        const { classSelected } = this.props;\r\n        const { levelData, abilityScoresModifiers } = this.props;\r\n       \r\n        let modifier = 0; \r\n        \r\n        console.log(\" -- spellBook() -- \", this.props);\r\n        let spellCountAvailableAtLevelOne = [];\r\n        if (levelData.spellcasting !== undefined) { // checked when component mounts, should I check spells_known instead?\r\n            if (levelData.spellcasting.cantrips_known !== undefined) { // Cantrips for all classes checked\r\n                spellCountAvailableAtLevelOne[0] = levelData.spellcasting.cantrips_known;\r\n            } else {\r\n                spellCountAvailableAtLevelOne[0] = 0; //this is catch for class without use of cantrips\r\n            }\r\n            if (levelData.spellcasting.spells_known !== undefined) {\r\n                spellCountAvailableAtLevelOne[1] = levelData.spellcasting.spells_known;\r\n                console.log(\"Setting up amount of spells known for \" + classSelected.name + \" to choose from at level \" + levelData.level + \". Spells known: \" + levelData.spellcasting.spells_known + \". \");\r\n                //switch (classSelected.name) {\r\n                //    case 'Bard':                          \r\n                //        //Cantrips\r\n                //        //Spells known\r\n                //    case 'Ranger':\r\n                //        //No Cantrips\r\n                //        //Spells known\r\n                //    case 'Sorcerer':                        \r\n                //        //Cantrips\r\n                //        //Spells known\r\n                //    case 'Warlock':                        \r\n                //        //Cantrips\r\n                //        //Spells known   \r\n                //        break;\r\n                //    default:\r\n                //        break;\r\n                //}\r\n            } else {\r\n                if (abilityScoresModifiers[classSelected.spellcasting.spellcasting_ability.index] !== undefined) {//\r\n                    console.log(abilityScoresModifiers);\r\n                    modifier = abilityScoresModifiers[classSelected.spellcasting.spellcasting_ability.index];\r\n                } else {\r\n                    console.log(\"Something aint right cletus\");\r\n                }\r\n                spellCountAvailableAtLevelOne[1] = modifier + levelData.level;\r\n                console.log(abilityScoresModifiers[classSelected.spellcasting.spellcasting_ability.index], \"Setting up spells known based on ability score modifiers + character level: \" + classSelected.name + \". Modifier: \" + modifier + \", level \" + levelData.level);\r\n                if (classSelected.name === 'Wizard' && levelData.level === 1) {\r\n                    spellCountAvailableAtLevelOne[1] = 6;\r\n                }\r\n                //switch (classSelected.name) {\r\n                //    case 'Cleric':\r\n                //        //Cantrips\r\n                //        //wisdom modifier + level \r\n                //    case 'Druid':\r\n                //        //Cantrips\r\n                //        //wisdom modifier + level \r\n                //    case 'Paladin':\r\n                //        //No Cantrips\r\n                //        //Charisma modifier + leve1/2 rounding down. no spells available at level 1. \r\n                //    case 'Wizard':\r\n                //        //Cantrips                        \r\n                //        //Intelligence modifier + level, gets 6 spells in spell book at level 1\r\n                //      break;\r\n                //    default:\r\n                //        break;\r\n                //}\r\n            }            \r\n        }\r\n        this.setState({ // need to change key name from 'spellSlots' to something else that matches how many can be added to the spellbook not how many can be casted\r\n            spellSlots: spellCountAvailableAtLevelOne,\r\n        }, this.props.updateSpellSlots(spellCountAvailableAtLevelOne));\r\n    }    \r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => { //make this work for all levels \r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (let i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1 = 0;\r\n        [level0, level1] = spellSlots;        \r\n        [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n        if (cantrips < level0 && spell.level === 0) {\r\n            this.updateSpells(spell);\r\n            setSelectedSpell(spell);\r\n            return;\r\n        }\r\n        if (levelOneSpells < level1 && spell.level === 1) {\r\n            this.updateSpells(spell);\r\n            setSelectedSpell(spell);\r\n            return;\r\n        }\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        this.props.updateAlertMessage(message);       \r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        const { setSelectedSpell } = this.props;\r\n        let spells = [];\r\n        for (let i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setChosenSpells(spells);\r\n        setSelectedSpell({});\r\n    }\r\n\r\n    setNavigationCategory(newCategory) {\r\n        this.setState({ navigationCategory: newCategory, });\r\n    }\r\n\r\n    spellsNavigation() {     \r\n        const { navigationCategory } = this.state;\r\n        const { spellSlots } = this.state;\r\n        let buttons = [];\r\n        let spellsSlots = this.spellsChosenByLevel();\r\n        for (let a = 0; a < spellSlots.length; a++) {\r\n            let newCategory = a;\r\n            let num;\r\n            num = spellsSlots[a];            \r\n            if (navigationCategory === a) {\r\n                buttons.push(<button className='btn-sm btn btn-primary' onClick={() => void (0)} key={a}> Choose: {spellSlots[a] - num}</button>)\r\n            } else {\r\n                buttons.push(<button className='btn-sm btn btn-seconday color-white' onClick={() => this.setNavigationCategory(newCategory)} key={a}>Choose: {spellSlots[a] - num}</button>)\r\n            }\r\n        }\r\n        return (<div className='col-12'>{buttons}</div>);\r\n    }\r\n\r\n    setSpellInfo(spell) {\r\n        this.setState({ selectedSpell: spell });\r\n    }\r\n\r\n    displaySpells = () => {\r\n        const { classSelected, spellsChosen } = this.props;\r\n        const { classSpells, spellSlots } = this.state;        \r\n        let spellChoices = []; \r\n        let spellChoiceDisplay = [];\r\n       //let target = ''\r\n        console.log(classSpells);\r\n        if (classSelected.spellcasting === undefined) {\r\n            spellChoiceDisplay[0] = <div className='card-body ' key='no-known-spells'><h3 className='card-text text-center'>You do not have spells as a {classSelected.name}</h3></div>\r\n            return (spellChoiceDisplay);\r\n        }\r\n\r\n        if (classSpells.length < 1 && classSelected.name !== 'Paladin' && classSelected.name !== 'Ranger') {\r\n            const element = <h2 className='text-center'>Retrieving spells...</h2> //Need to figure out why I cant put this in the return() without doing it this way\r\n            const stillLoading = [element,];\r\n            return (stillLoading);\r\n        } else {\r\n            console.log(\"Well\");\r\n            for (let a = 0; a < spellSlots.length; a++) {\r\n                const slotLevel = a;\r\n                let slotSpells = classSpells.filter((spell) => {\r\n                    return (spell.level === slotLevel ? spell : null);\r\n                });\r\n                spellChoices[slotLevel] = slotSpells.map((spell, index) => {\r\n                    let classNames = 'btn btn-md ';\r\n                    //let target = '#spell-' + spell.index;\r\n                    //if (spell.damage !== undefined) { // Is there a better way to style by damage type?\r\n                    //    if (spell.damage.damage_type !== undefined) {\r\n                    //        classNames += spell.damage.damage_type.index + \" \";\r\n                    //    }\r\n                    //}\r\n                    if (spellsChosen.length === 0) {\r\n                        classNames += 'btn-secondary col-11';\r\n                        return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                            <button className={classNames} type='button' onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                            <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n                        </div>);\r\n                    }\r\n                    for (let b = 0; b < spellsChosen.length; b++) {\r\n                        let chosen = b;\r\n                        if (spellsChosen[chosen].name === spell.name) {\r\n                            classNames += 'btn-success col-11';\r\n                            return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                                <button className={classNames} type='button' onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                                <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n\r\n                            </div>);\r\n                        }\r\n                    }\r\n                    classNames += 'btn-secondary col-11';\r\n                    return (<div className=\"btn-group col-12 spell-selection\" role=\"group\" aria-label=\"spell-buttons\" key={index}>\r\n                        <button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>\r\n                        <button className='btn btn-sm btn-primary ' type='button' data-toggle=\"modal\" data-target='#spell-info' onClick={() => { this.setSpellInfo(spell) }} key={'info-btn-spell' + spell.name}>?</button>\r\n\r\n                    </div>);\r\n                });\r\n            }            \r\n            // console.log(\"what\", spellChoices)\r\n\r\n            if (spellChoices.length === 0) {\r\n                spellChoiceDisplay[0] = <div className='card-body ' key='no-known-spells'><h3 className='card-text text-center'>You have no spells to choose from at level 1</h3></div>\r\n            }\r\n\r\n            for (let b = 0; b < spellChoices.length; b++) {\r\n                if (b === 0) {\r\n                    // console.log(\"HERE\");                    \r\n                    spellChoiceDisplay[b] = <div className='card-body ' key='cantrips'><h3 className='card-text text-center'>Cantrips</h3>{spellChoices[b]}</div>\r\n                   \r\n                } else {\r\n                    let keyForThee = \"spellLevel\";\r\n                    spellChoiceDisplay[b] = <div className='card-body ' key={keyForThee + b}><h3 className='card-text text-center'>Level {b} spells</h3>{spellChoices[b]}</div>\r\n                }\r\n            }\r\n            return (spellChoiceDisplay);\r\n        }       \r\n    }  \r\n    \r\n    render() {        \r\n        const { navigationCategory } = this.state; \r\n        const { selectedSpell } = this.state;\r\n        const { classSelected } = this.props;\r\n        const spells = this.displaySpells();\r\n        return ( isSelected(this.props.classSelected) ?\r\n            <div className='col-12 selection'>\r\n                <div className=\"col-12 text-center selectionTitle\">\r\n                    <h3>{classSelected.name} Spellsss</h3>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className=\"card col-12 border-dark mb-3 character-card \">\r\n                        <div className=\"card-header text-white bg-dark text-center\">\r\n                            {this.spellsNavigation()}\r\n                        </div>                        \r\n                        {spells[navigationCategory]}\r\n                        <SpellModal spell={selectedSpell} />\r\n                    </div>\r\n                </div>\r\n            </div> :\r\n            <div className='col-12 selection'>\r\n                <h3 className=\"col-12 text-center selectionTitle\">Choose a class to select your spells.</h3>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default ClassSpells;","import React from 'react'\r\n\r\nexport default function SearchBar({ userValue, handleChange }) {\r\n    return (\r\n        <div className='col-7 text-center searchBar'>           \r\n            <label className='search-label col-4' htmlFor='searchBar'>Search:</label><input className='col-8' value={userValue} name='searchBar' id='searchBar' onChange={handleChange} />\r\n        </div>\r\n    );\r\n};","import React from 'react'\r\n\r\nexport default function SearchResults({ champions, select, category, getTraits, }) {\r\n   // console.log(champions)\r\n    let cards = [];\r\n    switch (category) {\r\n        case 'races':\r\n            cards = champions.map((race) => {\r\n                let bonuses = \"\";\r\n                for (var a = 0; a < race.ability_bonuses.length; a++) {\r\n                    bonuses += race.ability_bonuses[a].ability_score.name + \": \" + race.ability_bonuses[a].bonus + \" \";\r\n                }\r\n                let traits = [];\r\n                let target = '#race-traits';\r\n                for (var b = 0; b < race.traits.length; b++) { //UI formatting commas and period. \r\n                    if (b !== race.traits.length-1) {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}, </span>);\r\n                    } else {\r\n                        traits.push(<span data-toggle=\"modal\" data-target={target} key={race.traits[b].name}>{race.traits[b].name}. </span>);\r\n                    }\r\n                }\r\n                traits.push(<button className='btn btn-sm btn-primary' data-toggle=\"modal\" data-target={target} onClick={() => getTraits(race)} key='raceTraitsInfoButton'>?</button>)\r\n\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={race.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{race.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Description:</strong> {race.size_description}</p>\r\n                        <p className=\"card-text\"><strong>Age:</strong> {race.age}</p>\r\n                        <p className=\"card-text\"><strong>Alignment:</strong> {race.alignment}</p>\r\n                        <p className=\"card-text\"><strong>Language:</strong> {race.language_desc}</p>\r\n                        <p className=\"card-text\"><strong>Traits:</strong> {traits}</p>\r\n                        <p className=\"card-text\"><strong>Ability Bonuses:</strong> {bonuses}</p>\r\n                        <p className=\"card-text\"><strong>Speed:</strong> {race.speed}</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(race.index)}>Choose {race.name}</button>\r\n                       \r\n                    </div>\r\n                </div>);\r\n            });\r\n            break;\r\n        case 'classes':\r\n            cards = champions.map((championClass) => {\r\n                let proficiencies = \"\";\r\n                let count = 0;\r\n                proficiencies = championClass.proficiencies.map((prof) => {\r\n                    if (count === championClass.proficiencies.length - 1) {\r\n                        return (prof.name + \". \");\r\n                    }\r\n                    count++;\r\n                    return (prof.name + \", \");\r\n                });\r\n                let savingThrows = '';\r\n                savingThrows = championClass.saving_throws.map((savingThrow) => {\r\n                    return (savingThrow.name + \" \")\r\n                });\r\n\r\n                //let bonuses = this.abilityBonuses(race);\r\n                return (<div className=\"card border-dark mb-3 col-12 character-card\" key={championClass.index}>\r\n                    <div className=\"card-header text-white bg-dark text-center\">\r\n                        <h4>{championClass.name}</h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><strong>Hit die:</strong> {championClass.hit_die}</p>\r\n                        <p className=\"card-text\"><strong>Starting proficiencies:</strong> {proficiencies} </p>\r\n                        <p className=\"card-text\"><strong>Saving Throws:</strong> {savingThrows}</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <p className=\"card-text\">{ }</p>\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => select(championClass.index)}>Choose {championClass.name}</button>\r\n                    </div>\r\n                </div>);\r\n            });\r\n            break; \r\n        default:\r\n            break;\r\n    }\r\n    return (cards);\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function TraitsModal(props) {\r\n    const { race, traits } = props;\r\n\r\n\r\n    function showTraits() {\r\n      //  const { traits } = props;    \r\n        let info = traits.map((trait) => {\r\n            return (<div key={'trait-'+trait.name}>\r\n                <h5>{trait.name}</h5>\r\n                <p>{trait.desc[0]}</p>\r\n            </div>)\r\n        });\r\n        return info;\r\n    }\r\n\r\n    \r\n    return (<div className='col-1 info-modal'>\r\n        <div className=\"modal fade\" id={'race-traits'} tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"raceTraits\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"raceTraits\">{race.name} Traits</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        {traits.length !== 0 ? showTraits() : \"Humans do not have racial traits\"}\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>                            \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}","import React, { Component } from 'react'\r\n//import InfoModal from '../helper/modal'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\nimport TraitsModal from '../helper/modal/traits-modal'\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            raceSelected: {},\r\n            searchResults: [], \r\n            word: \"\",            \r\n            traits: [],\r\n            race: {},\r\n        }\r\n        this.selectRace = this.selectRace.bind(this);\r\n        this.getRaces = this.getRaces.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n        this.getTraits = this.getTraits.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n            this.setState({ raceSelected: this.props.raceSelected, });            \r\n        }\r\n        if (isSelected(this.props.races) && this.props.racesInfo.length === 9) {\r\n            this.setState({races: this.props.races, racesInfo: this.props.racesInfo,})\r\n        } else {\r\n            this.getRaces();\r\n        }\r\n      //  console.log(this.props);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n   //     console.log(\"Unmounting <Races />, races: \", this.state.races, \" racesInfo: \", this.state.racesInfo)\r\n        this.props.setRaces(this.state.races);\r\n        this.props.setRacesInfo(this.state.racesInfo);\r\n    }\r\n\r\n    getRaces() {\r\n     //   console.log(\"Getting Races\")\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, this.getInfo(result));})\r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n       // console.log(data);\r\n       // let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n           fetch(url + data.results[i].url)\r\n               .then(result => result.json())\r\n               .then(result => { this.setState((state) => ({ racesInfo: [...state.racesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    getTraits(race) {\r\n        const url = 'https://www.dnd5eapi.co'        \r\n        if (race.index === \"human\") {\r\n            this.setState({ traits: [], race: race })\r\n        } else {\r\n            let traits = []\r\n            for (var a = 0; a < race.traits.length; a++) {\r\n                const check = race.traits.length;\r\n                fetch(url + race.traits[a].url)\r\n                    .then(result => result.json())\r\n                    .then(result => { traits.push(result); if (check === traits.length) { this.setState({ traits: traits, race: race }) }})\r\n                    .catch(e => { console.log(e + \" -- getTraits() -- \" + url); });\r\n            }\r\n        }\r\n    }\r\n\r\n    selectRace(index) {\r\n        const { racesInfo } = this.state;\r\n        const { setRace } = this.props; \r\n        const { navigate } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0], });                \r\n                setRace(raceSelected[0]); //setting race to CreateCharacter class \r\n                navigate('Classes');\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   \r\n    searchRaces = (word) => {\r\n        const { racesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = racesInfo.map((race) => {\r\n            return race;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(race => race.index.includes(word.toLowerCase()));\r\n           \r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n            \r\n            this.setState({ searchResults: oldList, });\r\n        }\r\n    }  \r\n\r\n    render() {\r\n       \r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { racesInfo, traits, race } = this.state;\r\n        return (<div className='col-12 selection '>\r\n                <div className='row selectionTitle'>                   \r\n                <h5 className='col-5 text-center choose'>Choose a Race</h5>                \r\n                    <SearchBar value={word} handleChange={e => this.searchRaces(e.target.value)} />                   \r\n                </div>\r\n            <div className='row'>\r\n                <SearchResults champions={word !== '' ? searchResults : racesInfo} category='races' getTraits={this.getTraits} select={this.selectRace} />\r\n            </div>\r\n            <TraitsModal traits={traits} race={race} />\r\n            </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport SearchBar from '../helper/search-bar'\r\nimport SearchResults from '../helper/search-results'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classes: {},\r\n            classesInfo: [],\r\n            classSelected: {},           \r\n            searchResults:[],\r\n            word: \"\",            \r\n        }\r\n        \r\n        this.selectClass = this.selectClass.bind(this);\r\n      //  this.classCards = this.classCards.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        }\r\n        if (isSelected(this.props.classes) && this.props.classesInfo.length === 12) {//needs better validation\r\n            this.setState({ classes: this.props.classes, classesInfo: this.props.classesInfo, })\r\n        } else {\r\n            this.getClasses();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.classesInfo.length === 12) {\r\n            this.props.setClasses(this.state.classes);\r\n            this.props.setClassesInfo(this.state.classesInfo);\r\n        }\r\n    }\r\n\r\n    getClasses() {\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, this.getInfo(result)); })\r\n            .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n\r\n    }\r\n\r\n    getInfo(data) {\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ classesInfo: [...state.classesInfo, result] })) });\r\n        }        \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.state;\r\n        const { setClass } = this.props;\r\n        const { navigate } = this.props;\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], }, this.props.getLevelData(classSelected[0].index, 1));\r\n                setClass(classSelected[0]);\r\n                console.log(classSelected[0]);\r\n                navigate('Ability-Scores');\r\n                break;\r\n            }\r\n        }        \r\n    } \r\n\r\n    searchClasses = (word) => {\r\n        const { classesInfo } = this.state;\r\n        this.setState({\r\n            word: word,\r\n        });\r\n        let oldList = classesInfo.map((characterClass) => {\r\n            return characterClass;\r\n        });\r\n        let newList = [];\r\n        if (word !== \"\") {\r\n            newList = oldList.filter(characterClass => characterClass.index.includes(word.toLowerCase()));            \r\n            this.setState({ searchResults: newList, });\r\n        } else {\r\n             this.setState({ searchResults: oldList, });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.state;\r\n        const { searchResults } = this.state;\r\n        const { classesInfo } = this.state;\r\n        return (<div className='col-12 selection'>\r\n                    <div className='row selectionTitle'>\r\n                        <h5 className='col-5 text-center choose'>Choose a Class</h5>\r\n                        <SearchBar value={word} handleChange={e => this.searchClasses(e.target.value)} />\r\n                    </div>\r\n                    <div className='row'>\r\n                        <SearchResults champions={word !== '' ? searchResults : classesInfo} category='classes' select={this.selectClass} />\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        const { scores } = this.state;\r\n        const newScores = JSON.parse(JSON.stringify(scores));\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmitAbilityScores(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />      \r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} /> \r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 invalidScore ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","export default function randomDiceRoll(maxNum) { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n    let totalDiceRolls = 5;\r\n    let totalRollsToKeep = 3;\r\n    let abilityPoint = 0;\r\n    let abilityPoints = 0;\r\n    let abilityPointsArray = [];\r\n    for (var i = 0; i < totalDiceRolls; i++) {\r\n        abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n        abilityPointsArray.push(abilityPoint);\r\n    }\r\n    abilityPointsArray.sort()\r\n    abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n    for (var j = 0; j < abilityPointsArray.length; j++) {\r\n        abilityPoints += abilityPointsArray[j];\r\n    }\r\n    return abilityPoints;\r\n}    ","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\nimport AbilityScoresForm from '../helper/AbilityScoresForm'\r\nimport randomDiceRoll from '../helper/random-dice-roll'\r\n\r\nexport default class AbilityScores extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            abilityScoresSelected: {},\r\n            abilityScoresModifiers: {},\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.getScore = this.getScore.bind(this);       \r\n    }\r\n\r\n    componentDidMount() {        \r\n        if (isSelected(this.props.abilityScores)) {\r\n            this.setState({\r\n                abilityScores: this.props.abilityScores,\r\n                abilityScoresInfo: this.props.abilityScoresInfo,\r\n                abilityScoresSelected: this.props.abilityScoresSelected,\r\n                abilityScoresModifiers: this.props.abilityScoresModifiers,\r\n            }, this.abilityScoresSetup(this.props.abilityScoresInfo))\r\n         } else {\r\n            this.getAbilityScores();           \r\n        }\r\n        console.log(this.props);\r\n     }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setAbilityScores(this.state.abilityScores, this.state.abilityScoresInfo, this.state.abilityScoresModifiers, this.state.abilityScoresSelected);        \r\n        console.log(\"AbilityScores unmounting and setAbilityScoresModifiers() being used to update modifiers in CreateCharacter. \", this.state.abilityScoresModifiers);       \r\n    }\r\n\r\n    abilityScoresSetup(arr) {       \r\n        let abilityScores = {};     \r\n        for (var j = 0; j < arr.length; j++) {\r\n            let ability = arr[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        console.log(\"abilityScores at the end of abilityScoresSetup() \", abilityScores);\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    getAbilityScores() {\r\n        const url = 'https://www.dnd5eapi.co/api/';\r\n        fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result }, this.getInfo(result)); })\r\n            .then(() => { this.abilityScoresSetup(this.state.abilityScores.results); }) //seems hacky?\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() in AbilityScores-- \" + url); });\r\n    }\r\n\r\n    getInfo(data) {\r\n        const url = 'https://www.dnd5eapi.co';        \r\n        for (var i = 0; i < data.results.length; i++) {            \r\n            fetch(url + data.results[i].url)\r\n                .then(result => result.json())\r\n                .then(result => { this.setState((state) => ({ abilityScoresInfo: [...state.abilityScoresInfo, result] })); })\r\n                .catch(e => { console.log(e + \" -- getInfo() in AbilityScores -- \" + url); });\r\n        }     \r\n    }\r\n\r\n    abilityScoreModifier(abilityScoreValue) { //needs values for up to level 30. \r\n        const { classSelected } = this.props;\r\n        switch (true) {\r\n            case abilityScoreValue > 0 && abilityScoreValue < 2:\r\n                console.log(\"-5 modifier for a ability score of\" + abilityScoreValue + \". \");\r\n                return (-5);\r\n            case abilityScoreValue > 1 && abilityScoreValue < 4:\r\n                console.log(\"-4 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (-4);\r\n            case abilityScoreValue > 3 && abilityScoreValue < 6:\r\n                console.log(\"-3 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (-3);\r\n            case abilityScoreValue > 5 && abilityScoreValue < 8:\r\n                console.log(\"-2 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (-2);\r\n            case abilityScoreValue > 7 && abilityScoreValue < 10:\r\n                console.log(\"-1 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (-1);\r\n            case abilityScoreValue > 9 && abilityScoreValue < 12:\r\n                console.log(\"+-0 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (0);\r\n            case abilityScoreValue > 11 && abilityScoreValue < 14:\r\n                console.log(\"+1 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (1);\r\n            case abilityScoreValue > 13 && abilityScoreValue < 16:\r\n                console.log(\"+2 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (2);\r\n            case abilityScoreValue > 15 && abilityScoreValue < 18:\r\n                console.log(\"+3 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (3);\r\n            case abilityScoreValue > 17 && abilityScoreValue < 20:\r\n                console.log(\"+4 modifier for a ability score of \" + abilityScoreValue + \". \");\r\n                return (4);\r\n            default:\r\n                console.log(\"Do not have a modifier value set for \" + classSelected.spellcasting.spellcasting_ability.index + \" ability with a score of \" + abilityScoreValue + \" yet. \");\r\n                return (0);\r\n        }\r\n        //const num = (abilityScoreValue - 10) / 2;\r\n        //console.log(num);        \r\n    }\r\n\r\n    scoreDisplay() {\r\n        const { abilityScoresInfo, abilityScoresSelected } = this.state;\r\n        const { raceSelected, classSelected } = this.props;\r\n        let bonus = 0;\r\n        let abilityScore = '';\r\n        let abilityScores = abilityScoresInfo.map((ability) => {\r\n            abilityScore = 'card-text abilityScore ';\r\n            bonus = abilityScoresSelected[ability.index]          \r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore += 'savingThrow ';                      \r\n                    }\r\n                }\r\n            }\r\n            if (isSelected(raceSelected)) { \r\n                for (var b = 0; b < raceSelected.ability_bonuses.length; b++) {\r\n                    if (raceSelected.ability_bonuses[b].ability_score.index === ability.index) {                     \r\n                        abilityScore += 'bonus ';\r\n                        bonus = abilityScoresSelected[ability.index] + raceSelected.ability_bonuses[b].bonus;\r\n                    } \r\n                }\r\n            }  \r\n            return (<div className='card border-dark mb-3 col-4 card-ability-score text-center' key={ability.index}>\r\n                    <div className='card-header text-white bg-dark ability-score-header'>\r\n                        <h6>{ability.full_name}</h6>\r\n                    </div>\r\n                    <div className='card-body'>\r\n                        <p className={abilityScore} key={ability.index}>{bonus}</p>\r\n                    </div>\r\n                </div>);\r\n        });\r\n        return (abilityScores);\r\n    }\r\n\r\n\r\n\r\n\r\n    getScore(ability) {        \r\n        const { abilityScores } = this.state;\r\n        console.log('getScore() abilityScores: ', abilityScores);\r\n        const { abilityScoresSelected, abilityScoresModifiers } = this.state;\r\n        let scores = abilityScoresSelected;\r\n        let modifiers = abilityScoresModifiers;\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                let num = randomDiceRoll(6);\r\n                scores[ability] = num;                \r\n                modifiers[ability] = this.abilityScoreModifier(num);\r\n                this.setState({ abilityScoresSelected: scores, abilityScoresModifiers: modifiers, });\r\n                this.props.setAbilityScoresModifiers(modifiers);\r\n                break;\r\n            }\r\n        }      \r\n    }\r\n\r\n    handleSubmitAbilityScores = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected, abilityScoresModifiers } = this.state;\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = [];\r\n        let modifiers = abilityScoresModifiers;\r\n        for (let i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                let value = 0;\r\n                value = parseInt(abilities[i].value, 10);\r\n                scores[abilities[i].name] = value;\r\n                modifiers[abilities[i].name] = this.abilityScoreModifier(value);\r\n                this.setState({ abilityScoresSelected: scores, abilityScoresModifiers: modifiers, });\r\n                this.props.setAbilityScoresModifiers(modifiers);\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.props.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    buttons() {\r\n        const { abilityScoresInfo } = this.state;\r\n        let buttons = abilityScoresInfo.map((abilityScore, index) => {\r\n            return (<button onClick={() => this.getScore(abilityScore.index)} className='btn btn-primary ability-score-button col-5' type='button' key={index}>{abilityScore.full_name}</button>)\r\n        });\r\n        return (<div className='d-grid gap-2 d-md-block'>{buttons}</div>);\r\n    }\r\n\r\n    render() {\r\n        const { abilityScoresSwitch } = this.state;       \r\n        return (<div className='selection col-12'>\r\n                    <div className=\"col-12 selectionTitle\">\r\n                        <h3 className=\"text-center\">Set ability scores</h3>                      \r\n                    </div>  \r\n                <div className='row'>{this.scoreDisplay()}</div>\r\n                <div className='row'>\r\n                    <div className='col-12 scoreSelection text-center'>\r\n                        {abilityScoresSwitch ? <AbilityScoresForm handleSubmitAbilityScores={this.handleSubmitAbilityScores} abilityScoresSelected={this.state.abilityScoresSelected} /> : this.buttons()}\r\n                        <button onClick={() => this.abilityScoreSwitchy()} className='btn btn-primary ability-score-switchy-btn'>{abilityScoresSwitch ? \"Auto fill \" : \"Manual fill \"}</button><br />\r\n                    </div>\r\n                </div>\r\n                </div>)\r\n    }\r\n}\r\n\r\n//Does not update modifiers if you use submit button on form. ","import React, { Component } from 'react'\r\n//import AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './champion/Proficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport AbilityScores from './champion/AbilityScores'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component { //convert this to a function\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n      //      abilityScoresSwitch: false,\r\n        }\r\n     //   this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    //abilityScoreSwitchy() {\r\n    //    this.setState(state => ({\r\n    //        abilityScoresSwitch: !state.abilityScoresSwitch,\r\n    //    }));\r\n    //}\r\n\r\n    render() {       \r\n       // const { classSelected } = this.props;\r\n        const { navigation } = this.props;      \r\n        switch (navigation) {\r\n            case 'Races':\r\n                return (<Races {...this.props} />);           \r\n            case 'Classes':\r\n                return (<Classes {...this.props} />); \r\n            case 'Proficiencies':\r\n                return (<ClassProficiencies {...this.props} />);      \r\n            case 'Spells':\r\n                return (<ClassSpells {...this.props} />);\r\n            case 'Ability-Scores':\r\n                return (<AbilityScores {...this.props} />);               \r\n            default:\r\n                return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n        }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React, { Component } from 'react'\r\n//import isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    navigationButtons() {\r\n        const navigation = this.props.navigation\r\n        const navigationCategories = this.props.navigationCategories\r\n        const navigate = this.props.navigate\r\n        // const classSelected = this.props.classSelected       \r\n        let navButtons = navigationCategories.map((category, index) => {\r\n            if (navigation === category) {\r\n                return (<button type='button' className='btn btn-sm btn-success btn-nav' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                return (<button type='button' onClick={() => { navigate(category); }} className='btn btn-sm  btn-dark btn-nav' key={index}>{category}</button>);\r\n            }\r\n        });\r\n        return (navButtons);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<nav className=\"navbar navbar-expand-lg navbar-light\" id=\"navigation-bottom-container\">\r\n            <button className=\"btn btn-sm navbar-toggler bg-light\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navigation-bottom\" aria-controls=\"navigation-bottom\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon col-2\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse col-10\" id=\"navigation-bottom\">\r\n                {this.navigationButtons()}\r\n            </div>\r\n        </nav>);\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n//import Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\nimport isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            abilityScoresModifiers: {},\r\n            abilityScoresSelected: {},\r\n            alertMessage: \"\",\r\n            champion: 'Champion', //add support: user being able to name their Champion. \r\n            classSelected: {},           \r\n            levelData: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            raceSelected: {},\r\n            spells: {},\r\n            spellsChosen: [],\r\n            spellsInfo: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            setAbilityScoresSelected: this.setAbilityScoresSelected,\r\n            startingProficiencies: this.startingProficiencies,\r\n            setChosenSpells: this.setChosenSpells,\r\n            setSpells: this.setSpells,\r\n            setSpellsInfo: this.setSpellsInfo,\r\n            setAbilityScores: this.setAbilityScores,\r\n            setAbilityScoresInfo: this.setAbilityScoresInfo,\r\n            setAbilityScoresModifiers: this.setAbilityScoresModifiers,\r\n          \r\n        }\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {     \r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spells: spells, });\r\n    }\r\n\r\n    setSpellsInfo = (spellsInfo) => {\r\n        this.setState({ spellsInfo: spellsInfo, });\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setChosenSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (let i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (let j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: [], proficienciesChosen: [], spells: {}, spellsInfo: [], });\r\n    }\r\n   \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies, });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n      \r\n    //setAbilityScoresSelected = (abilityScoresSelected) => {\r\n    //    this.setState({ abilityScoresSelected: abilityScoresSelected, });\r\n    //}\r\n\r\n    setAbilityScores = (abilityScores, abilityScoresInfo, modifiers, abilityScoresSelected) => {\r\n        this.setState({\r\n            abilityScores: abilityScores,\r\n            abilityScoresInfo: abilityScoresInfo,\r\n            //abilityScoresModifiers: modifiers,\r\n            abilityScoresSelected: abilityScoresSelected,\r\n        });\r\n    }\r\n\r\n    //setAbilityScoresInfo = (abilityScoresInfo) => {\r\n    //    this.setState({ abilityScoresInfo: abilityScoresInfo, });\r\n    //}\r\n\r\n    setAbilityScoresModifiers = (modifiers) => {\r\n        console.log(\"modifiers being set in CreateCharacter App\", modifiers);\r\n        this.setState({ abilityScoresModifiers: modifiers, });\r\n    }\r\n        \r\n    getLevelData(index, currentLevel) { //\r\n        const url = 'https://www.dnd5eapi.co'\r\n        fetch(url + \"/api/classes/\" + index + \"/levels/\" + currentLevel)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    levelData: result,\r\n                });\r\n            });\r\n    }\r\n    \r\n    render() {\r\n      //hacky way of displaying alert\r\n        //hacky way to put a space between race and class name, fix this. this messes with the total view height need to fix. \r\n        const { raceSelected, classSelected } = this.state;\r\n\r\n        return (<div id='creation' className='container-fluid'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <div className='col-12 text-center' id='characterType'>\r\n                    <h5 className='col'>\r\n                        {isSelected(raceSelected) ? raceSelected.name : null}\r\n                        <span> </span> \r\n                        {isSelected(classSelected) ? classSelected.name : null}\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} getLevelData={this.getLevelData} setRace={this.setRace} navigate={this.navigate} setClass={this.setClass} />\r\n            </div>\r\n            <div className='row'>\r\n                <Navigation navigate={this.navigate} navigation={this.state.navigation} navigationCategories={this.state.navigationCategories} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\n//export default class App extends Component { \r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {           \r\n//            races: {},\r\n//            racesInfo: new Array(0),           \r\n//            classes: {},\r\n//            classesInfo: new Array(0),\r\n//            abilityScores: {},\r\n//            abilityScoresInfo: [],\r\n//            spells: {},\r\n//            spellsInfo: [],\r\n//            features: {},\r\n//            featuresInfo: [],\r\n//            levelData: [],\r\n//            ready: false,\r\n//            enter: false,\r\n//        }\r\n//      //  this.state = this.initialState;\r\n//      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n//        this.getInfo = this.getInfo.bind(this);\r\n//        this.getLevelData = this.getLevelData.bind(this);\r\n//        //   this.getStuff = this.getStuff.bind(this);\r\n//        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n//    }\r\n\r\n//    componentDidMount() {\r\n//        const url = 'https://www.dnd5eapi.co/api/'\r\n//        const promise = this.getCharacterInformation(url);\r\n//        promise.then((data) => {\r\n//            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n//        });\r\n//    }\r\n     \r\n\r\n//    getCharacterInformation(url) {\r\n//      return Promise.all([this.getRaces(url),\r\n//            this.getClasses(url),\r\n//            this.getAbilityScores(url),\r\n//            this.getSpells(url),\r\n//            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n//                return {races, classes, abilityScores, spells, features}\r\n//            });\r\n//    }\r\n\r\n\r\n//    getCharacterData(races, classes, abilityScores, spells, features) {\r\n//        Promise.all([this.getInfo(races, 'races'),\r\n//            this.getInfo(classes, 'classes'),\r\n//            this.getLevelData(classes, 1),\r\n//            this.getInfo(abilityScores, 'ability-scores'),\r\n//            this.getInfo(spells, 'spells'),\r\n//            this.getInfo(features, 'features'),\r\n//        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n//    }\r\n\r\n//    getRaces(url) {        \r\n//       return fetch(url + \"races\")\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ races: result, }, ); return result })          \r\n//            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n//    }\r\n\r\n//    getClasses(url) {\r\n//       return fetch(url + 'classes')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n//           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n//    }\r\n\r\n//    getAbilityScores(url) {\r\n//      return fetch(url + 'ability-scores')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n//    }\r\n\r\n//    getSpells(url) {\r\n//      return fetch(url + 'spells')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ spells: result, }, ); return result })\r\n//          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n//    }\r\n\r\n//    getFeatures(url) {      \r\n//       return fetch(url + 'features')\r\n//            .then(result => result.json())\r\n//            .then(result => { this.setState({ features: result }, ); return result  })\r\n//           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n//    }\r\n\r\n//    getLevelData(data, currentLevel) {       \r\n//        let levels = []\r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n//                .then(result => result.json())\r\n//                .then(result => { levels.push(result) });            \r\n//        }        \r\n//        this.setState({\r\n//            levelData: levels,\r\n//        });\r\n//    }\r\n\r\n//    getInfo(data, category) {\r\n//        let info = []    \r\n//        const url = 'https://www.dnd5eapi.co'\r\n//        for (var i = 0; i < data.results.length; i++) {\r\n//            Promise.resolve(fetch(url + data.results[i].url))\r\n//                .then(result => result.json())\r\n//                .then(result => { info.push(result) });\r\n//        }\r\n//       // console.log(info);   \r\n//        switch(category) {\r\n//            case 'races':\r\n//                this.setState({ racesInfo: info, });\r\n//                break;\r\n//            case 'classes':\r\n//                this.setState({ classesInfo: info, },);  \r\n//                break;\r\n//            case 'ability-scores':\r\n//                this.setState({ abilityScoresInfo: info, });\r\n//                break;\r\n//            case 'spells':\r\n//                this.setState({ spellsInfo: info, });\r\n//                break;\r\n//            case 'features':                \r\n//                this.setState({ featuresInfo: info, });\r\n//                break;\r\n//            default:\r\n//        }\r\n//    }\r\n\r\n//    //handleClick() {\r\n//    //    this.setState(state => ({\r\n//    //        isToggleOn: !state.isToggleOn\r\n//    //    }));\r\n//    //}\r\n\r\n\r\n//    chooseYourChampion = () => {\r\n//        this.setState(state => ({\r\n//            ready: !state.ready,\r\n//        }));\r\n//    }\r\n    \r\n//    render() {\r\n//        const { ready } = this.state;\r\n              \r\n//        if (!ready) {\r\n//            return (<div className=\"container-fluid\">\r\n//                <div className=\"row\">\r\n//                    <div className=\"col-12 text-center\">\r\n//                        <h1>Welcome</h1>\r\n//                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n//                    </div>\r\n//                </div>\r\n//            </div>);  \r\n//        } else {\r\n//            return (<CreateCharacter {...this.state} />);                   \r\n//        }\r\n//    }\r\n//}\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            races: {},\r\n            racesInfo: [],\r\n            classes: {},\r\n            classesInfo: [],           \r\n            features: {},\r\n            featuresInfo: [],           \r\n            ready: false,\r\n            enter: false,\r\n            setRaces: this.setRaces,\r\n            setRacesInfo: this.setRacesInfo,\r\n            setClasses: this.setClasses, \r\n            setClassesInfo: this.setClassesInfo,\r\n          \r\n        }\r\n        //  this.state = this.initialState;\r\n        //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n       // this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    getAbilityScores(url) {\r\n        return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n        return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, },); return result })\r\n            .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {\r\n        return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result },); return result })\r\n            .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    //getLevelData(data, currentLevel) {\r\n    //    let levels = []\r\n    //    const url = 'https://www.dnd5eapi.co'\r\n    //    for (var i = 0; i < data.results.length; i++) {\r\n    //        Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n    //            .then(result => result.json())\r\n    //            .then(result => { levels.push(result) });\r\n    //    }\r\n    //    this.setState({\r\n    //        levelData: levels,\r\n    //    });\r\n    //}\r\n\r\n    getInfo(data, category) {\r\n        let info = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n        // console.log(info);   \r\n        switch (category) {\r\n            //case 'races':\r\n            //    this.setState({ racesInfo: info, });\r\n            //    break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);\r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':\r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n\r\n    setRaces = (races) => {\r\n        this.setState({ races: races, });\r\n    }\r\n\r\n    setRacesInfo = (racesInfo) => {\r\n        this.setState({ racesInfo: racesInfo,})\r\n    }\r\n\r\n    setClasses = (classes) => {\r\n        this.setState({classes: classes,})\r\n    }\r\n\r\n    setClassesInfo = (classesInfo) => {\r\n        this.setState({classesInfo: classesInfo,})\r\n    }\r\n\r\n    //setAbilityScores = (abilityScores) => {\r\n    //    this.setState({ abilityScores: abilityScores })\r\n    //}\r\n\r\n    //setAbilityScoresInfo = (abilityScoresInfo) => {\r\n    //    this.setState({ abilityScoresInfo: abilityScoresInfo })\r\n    //}\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { ready } = this.state; //this has been set up top and not by the user. will need to change once characters can be saved and retrieved. \r\n\r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button>\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\nimport './assets/css/navigation-style.css'\r\nimport './assets/css/selection-style.css'\r\nimport './assets/css/info-style.css'\r\nimport './assets/css/abilityScores-style.css'\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}