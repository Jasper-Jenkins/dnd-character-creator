{"version":3,"sources":["helper/helper-functions.js","Info.js","AbilityScoresForm.js","ClassProficiencies.js","ClassSpells.js","champion/Races.js","champion/Classes.js","Selection.js","Navigation.js","helper/Alert.js","CreateCharacter.js","App.js","index.js"],"names":["isSelected","obj","key","hasOwnProperty","InfoDisplay","raceName","className","hit_die","ability_bonuses","abilityScores","saving_throws","characterProficiencies","Info","props","raceSelected","classSelected","abilityScoresInfo","proficiencies","spellsChosen","selectedSpell","setSelectedSpell","classSpells","bonuses","map","ability","abilityScore","a","length","index","full_name","abilityScoresSelected","name","bonus","i","ability_score","toLowerCase","saving_throw","j","proficiency","spell","onClick","navigation","spellDescription","undefined","desc","level","AbilityScoresForm","handleFocus","event","target","select","handleChange","value","scores","state","newScores","JSON","parse","stringify","parseInt","setState","submitForm","handleSubmit","initialState","console","log","this","htmlFor","type","id","onChange","onFocus","Component","ClassProficiencies","addProficiency","proficiencyName","choicesIndex","proficienciesChosen","choices","proficiency_choices","from","choose","message","updateAlertMessage","newProficiency","filter","newProfs","chosen","setProficiencies","removeProficiency","b","newProficiencies","newChoices","bind","numberOfCategories","chooseFrom","chooseProficiencies","k","push","classProficienciesToChooseFrom","ClassSpells","spellSlots","levelData","slotsAvailable","h","class","spellcasting","cantrips_known","updateSpellSlots","updateSpells","spells","setSpells","spellsChosenByLevel","cantrips","levelOneSpells","spellSource","currentLevel","level0","level1","setClassSpells","spellsInfo","classes","alert","addSpell","removeSpell","displaySpells","spellChoices","slotLevel","slotSpells","classNames","damage","damage_type","spellChoiceDisplay","CharacterRace","selectRace","racesInfo","setRace","race","buttons","races","results","aria-disabled","CharacterClass","selectClass","classesInfo","setClass","cClass","characterClass","Selection","abilityScoresSwitch","abilityScoreSwitchy","getScore","Navigation","navigationCategories","navigate","navButtons","category","tabIndex","UserAlert","element","alertMessage","CreateCharacter","abilityScoresSetup","abilityScoresData","count","fadeMessage","alertNode","document","getElementById","setTimeout","fade","setInterval","style","opacity","clearInterval","slots","randomDiceRoll","maxNum","abilityPoint","abilityPoints","abilityPointsArray","Math","floor","random","sort","splice","totalDiceRolls","startingProficiencies","profs","updateProficiencies","proficienciesChoices","abilities","noZeroes","zeroesAlert","chosenRace","chosenClass","App","chooseYourChampion","ready","Array","features","featuresInfo","enter","getInfo","getLevelData","getCharacterInformation","then","data","getCharacterData","url","Promise","all","getRaces","getClasses","getAbilityScores","getSpells","getFeatures","fetch","result","json","catch","e","levels","resolve","info","ReactDOM","render"],"mappings":"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","file":"static/js/main.76cbd835.chunk.js","sourcesContent":["export default function isSelected(obj) {\r\n    for (var key in obj) {\r\n        obj.hasOwnProperty(key)\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n","import React from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n//import CharacterImages from'./CharacterImages'\r\n//import ClassProficiencies from './ClassProficiencies'\r\n\r\nfunction InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies){ //choose 1, either underscores or camelCase. You can't have both!!! Or can you...no\r\n\r\n    return (<div className=\"col-12 info\">\r\n        <div className='row'>\r\n            <div className='col-12 characterTitle'>\r\n                <h3>{raceName ? raceName : \"Race\" } {className ? className : \"Class\"}</h3>\r\n                <div className='row'>{abilityScores}</div>  \r\n            </div>\r\n            <div className='col-6'>            \r\n                <strong>Ability bonuses</strong><br />\r\n                <ul>{ability_bonuses}</ul>\r\n            </div>\r\n            <div className='col-6'>\r\n                <strong>Hit die: </strong>{hit_die}<br />\r\n                <strong>Saving throws</strong><br />\r\n                <ul>{saving_throws}</ul>\r\n                <strong>Proficiencies</strong>\r\n                <ul>\r\n                    {characterProficiencies}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\n//Work on refactoring this mess\r\nconst Info = (props) => {\r\n  //  console.log(\"Info props\", props)\r\n    const { raceSelected } = props\r\n    const { classSelected } = props\r\n    const { abilityScoresInfo } = props\r\n    const { proficiencies } = props\r\n    const { spellsChosen } = props\r\n    const { selectedSpell } = props\r\n    const { setSelectedSpell } = props \r\n  //  const { proficienciesChosen } = props\r\n\r\n    let raceName = null;\r\n    let className = null; \r\n    let hit_die = \"\";\r\n    let ability_bonuses = [];\r\n    let saving_throws = [];\r\n    let characterProficiencies = [];\r\n    let classSpells = [];\r\n  //  let classFeatures = [];\r\n\r\n    let bonuses = []\r\n\r\n    //let abilities = Object.keys(props.abilityScoresSelected);\r\n    //console.log(\"HERE\", props.classSelected);\r\n\r\n    let abilityScores = abilityScoresInfo.map((ability) => {\r\n        let abilityScore = \"abilityScore\";\r\n        if (isSelected(classSelected)) {\r\n            for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                if (ability.index === classSelected.saving_throws[a].index) {\r\n                    abilityScore += \" savingThrow\"\r\n                }\r\n            }\r\n        }        \r\n        return (<div className='col-2 text-center ability' key={ability.index}>\r\n            <p>{ability.full_name}</p>\r\n            <p className={abilityScore}>{props.abilityScoresSelected[ability.index]}</p>\r\n                </div>);\r\n    });\r\n\r\n   // console.log(abilityScores)\r\n    \r\n    if (isSelected(raceSelected)) { //setting up info for when a race has been selected\r\n        raceName = raceSelected.name\r\n        ability_bonuses = raceSelected.ability_bonuses.map((bonus, index) => {\r\n            for (var i = 0; i < abilityScoresInfo.length; i++) {\r\n                if (abilityScoresInfo[i].name === bonus.ability_score.name) {\r\n                    return (<li key={index}>{abilityScoresInfo[i].full_name}: +{bonus.bonus}</li>);\r\n                }\r\n            }\r\n            return (<li key={index}>Ability: +BONUS</li>);\r\n        });        \r\n        bonuses = raceSelected.ability_bonuses.map((bonus) => {\r\n           // console.log(bonus)\r\n            return bonus\r\n        });\r\n\r\n       // console.log(bonuses);\r\n        abilityScores = abilityScoresInfo.map((ability) => {\r\n            let abilityScore = \"abilityScore\";\r\n            if (isSelected(classSelected)) {\r\n                for (var a = 0; a < classSelected.saving_throws.length; a++) {\r\n                    if (ability.index === classSelected.saving_throws[a].index) {\r\n                        abilityScore = \"savingThrow abilityScore\"\r\n                    }\r\n                }\r\n            }         \r\n            for (var i = 0; i < bonuses.length; i++) {\r\n                if (bonuses[i].ability_score.name.toLowerCase() === ability.index) { \r\n                    abilityScore += \"Bonus\"                               \r\n                    let bonus = props.abilityScoresSelected[ability.index] + bonuses[i].bonus;\r\n                    return (<div className='col-2 text-center ability' key={ability.index}>\r\n                        <p>{ability.full_name}</p>\r\n                        <p className={abilityScore}>{bonus}</p>\r\n                    </div>);\r\n                }\r\n            }               \r\n            return (<div className='col-2 text-center ability' key={ability.index}>\r\n                <p>{ability.full_name}</p>\r\n                <p className={abilityScore}>{props.abilityScoresSelected[ability.index]}</p>\r\n            </div>);\r\n        });\r\n    }\r\n\r\n    if (isSelected(classSelected)) { //setting up info for when a class has been selected\r\n        className = classSelected.name\r\n        hit_die = props.classSelected.hit_die\r\n        saving_throws = props.classSelected.saving_throws.map((saving_throw, index) => {\r\n            for (var j = 0; j < abilityScoresInfo.length; j++) {\r\n                if (abilityScoresInfo[j].name === saving_throw.name) {\r\n                    return (<li key={saving_throw.name.toLowerCase()}>{abilityScoresInfo[j].full_name}</li>);\r\n                }\r\n            }\r\n            return (<li key={index}>Ability: +BONUS</li>);\r\n        });\r\n\r\n       // console.log(\"Chosen profs \", proficienciesChosen);\r\n      \r\n        characterProficiencies = proficiencies.map((proficiency) => {\r\n            return (<li key={proficiency.name}>{proficiency.name}</li>);\r\n        });\r\n\r\n\r\n\r\n\r\n        if (spellsChosen.length > 0) {\r\n            classSpells = spellsChosen.map((spell) => {\r\n                if (spell === selectedSpell) {\r\n                    return (<li key={spell.name}>{spell.name}</li>);\r\n                } else {\r\n                    return (<li onClick={() => setSelectedSpell(spell)} key={spell.name}>{spell.name}</li>);\r\n                }\r\n            });            \r\n        } \r\n    }\r\n    \r\n    switch (props.navigation) {\r\n        //case \"Races\":        \r\n        //    if (props.isRaceSelected(raceSelected) || props.isClassSelected(classSelected)) {\r\n        //        return InfoDisplay(raceName, className, hit_die, ability_bonuses, saving_throws);\r\n        //    } else {\r\n        //        return (<div className=\"col-12 info\">\r\n        //                    <p className='text-center'> ...Choose your race</p>\r\n        //                </div>);\r\n        //    }\r\n        //case 'Classes':\r\n        //    if (props.isClassSelected(classSelected) || props.isRaceSelected(raceSelected)) {\r\n        //        return InfoDisplay(raceName, className, hit_die, ability_bonuses, saving_throws);\r\n        //    } else {\r\n        //        return (<div className=\"col-12 info\">\r\n        //                    <h3>{className}</h3>\r\n        //                    <p className='text-center'> ...Choose your class</p>\r\n        //                </div>);\r\n        //    }\r\n        case 'Ability-Scores':\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies);\r\n        case 'Proficiencies':\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies);\r\n        case 'Spells':\r\n            if (isSelected(classSelected)) {\r\n                let spellDescription;\r\n                if (selectedSpell.name === undefined) {\r\n               //     console.log(\"check check check\")\r\n                } else {\r\n                    spellDescription = <p>{selectedSpell.desc}</p>\r\n                }\r\n                return (<div className='col-12 info'>\r\n                    <div className='row'>\r\n                        <div className='col-12'>\r\n                            <h3>{props.raceSelected.name} {props.classSelected.name}</h3>\r\n                        </div>\r\n                        <div className='col-3'>\r\n                            <p>Spells</p>\r\n                            <ul>{classSpells}</ul>\r\n                        </div>\r\n                        <div className='col-9'>\r\n                            <h4>{selectedSpell.name} {selectedSpell.level}</h4>\r\n                            {spellDescription}\r\n                        </div>\r\n                    </div>\r\n                </div>);\r\n            } else {\r\n                return (<div className='col-12 info'>\r\n                            <p className='text-center'>..Choose your class to select spells </p>\r\n                        </div>);\r\n            }\r\n        default:\r\n            return InfoDisplay(raceName, className, hit_die, ability_bonuses, abilityScores, saving_throws, characterProficiencies); \r\n        }\r\n    }\r\n    \r\nexport default Info","import React, { Component} from 'react'\r\n\r\nclass AbilityScoresForm extends Component {\r\n    constructor(props) {\r\n        super(props);      \r\n        this.initialState = {\r\n            scores: [\r\n                { name: 'cha', value: 0, },\r\n                { name: 'con', value: 0, },\r\n                { name: 'dex', value: 0, },\r\n                { name: 'int', value: 0, },\r\n                { name: 'str', value: 0, },\r\n                { name: 'wis', value: 0, },\r\n            ],\r\n            \r\n        }\r\n        this.state = this.initialState\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        console.log(\"AbilityScoresForm \", this.props);\r\n        this.setState({\r\n            scores: [\r\n                { name: 'cha', value: this.props.abilityScoresSelected['cha'], },\r\n                { name: 'con', value: this.props.abilityScoresSelected['con'], },\r\n                { name: 'dex', value: this.props.abilityScoresSelected['dex'], },\r\n                { name: 'int', value: this.props.abilityScoresSelected['int'], },\r\n                { name: 'str', value: this.props.abilityScoresSelected['str'], },\r\n                { name: 'wis', value: this.props.abilityScoresSelected['wis'], },\r\n            ],\r\n        })\r\n    }\r\n\r\n    handleFocus = (event) => event.target.select();\r\n        \r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        const { scores } = this.state\r\n        const newScores = JSON.parse(JSON.stringify(scores))\r\n        \r\n        for (var i = 0; i < newScores.length; i++) {\r\n            if (newScores[i].name === name) {\r\n                if (value === '') {\r\n                    newScores[i].value = 0                    \r\n                } else {\r\n                    newScores[i].value = parseInt(value, 10);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        this.setState({\r\n            scores: newScores,\r\n        });\r\n    } \r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state.scores)\r\n     //   this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { scores } = this.state;\r\n        \r\n        return (<form>\r\n            <label className={scores[0].value > 18 || scores[0].value < 3 ? 'col-4 toHigh ' : 'col-4 validScore ' } htmlFor=\"cha\">Charisma</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='cha'\r\n                        id='cha'\r\n                        value={scores[0].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[1].value > 18 || scores[1].value < 3 ? 'col-4 toHigh ' : 'col-4 validScore '} htmlFor=\"con\">Constitution</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='con'\r\n                        id='con'\r\n                        value={scores[1].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[2].value > 18 || scores[2].value < 3 ? 'col-4 toHigh ' : 'col-4 validScore '}htmlFor=\"dex\">Dexterity</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='dex'\r\n                        id='dex'\r\n                        value={scores[2].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[3].value > 18 || scores[3].value < 3 ? 'col-4 toHigh ' : 'col-4 validScore '} htmlFor=\"int\">Intelligence</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='int'\r\n                        id='int'\r\n                        value={scores[3].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[4].value > 18 || scores[4].value < 3 ? 'col-4 toHigh ' : 'col-4 validScore '} htmlFor='str'>Strength</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='str'\r\n                        id='str'\r\n                        value={scores[4].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n            <label className={scores[5].value > 18 || scores[5].value < 3 ? 'col-4 toHigh ' : 'col-4 validScore '} htmlFor=\"wis\">Wisdom</label>\r\n                    <input className='col-2'\r\n                        type='number'\r\n                        name='wis'\r\n                        id='wis'\r\n                        value={scores[5].value}\r\n                        onChange={this.handleChange}\r\n                        onFocus={this.handleFocus} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>);       \r\n    }\r\n}\r\n\r\nexport default AbilityScoresForm;","import React, { Component } from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nclass ClassProficiencies extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n     //   console.log(\"constructor() \", props);\r\n        this.state = {\r\n            proficiencies: [],\r\n            proficienciesChosen: [],            \r\n        };\r\n        this.setProficiencies = this.setProficiencies.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { classSelected }  = this.props;\r\n        if (isSelected(classSelected)) {\r\n            this.setProficiencies();\r\n        }           \r\n    }   \r\n    \r\n    setProficiencies() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.props; \r\n        const { proficienciesChosen } = this.props;\r\n        let chosen = []; \r\n        let numberOfCategories = classSelected.proficiency_choices.length;\r\n        if (proficienciesChosen.length < 1) {\r\n            for (var a = 0; a < numberOfCategories; a++) { // # of categories to choose from\r\n                chosen[a] = [];\r\n            }\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: chosen,\r\n            }, this.props.setProficiencies(proficiencies, chosen));\r\n        } else {\r\n            this.setState({\r\n                proficiencies: proficiencies,\r\n                proficienciesChosen: proficienciesChosen,\r\n            });\r\n        }        \r\n    }\r\n   \r\n    addProficiency = (proficiencyName, choicesIndex) => { // Clean \r\n        const { classSelected } = this.props;\r\n       // const { proficiencies } = this.state; // testing another way to use state in setState below. \r\n        const { proficienciesChosen } = this.state;\r\n        const choices = classSelected.proficiency_choices;\r\n        for (var i = 0; i < choices[choicesIndex].from.length; i++) {\r\n            if (proficienciesChosen[choicesIndex].length < choices[choicesIndex].choose) {\r\n                if (choices[choicesIndex].from[i].name === proficiencyName) {\r\n                    let newProficiency = choices[choicesIndex].from.filter(function (proficiency) { return proficiency.name === proficiencyName });\r\n                    const newProfs = [...this.state.proficiencies, newProficiency[0]];\r\n                    let chosen = proficienciesChosen;\r\n                    chosen[choicesIndex] = [...chosen[choicesIndex], newProficiency[0]];\r\n                    this.setState(state => ({\r\n                        proficiencies: [...state.proficiencies, newProficiency[0]],\r\n                        proficienciesChosen: chosen,\r\n                    }), this.props.setProficiencies(newProfs, chosen));\r\n                    break;\r\n                }\r\n            } else {\r\n                const message = \"You can only select \" + choices[choicesIndex].choose + \" from this category.\"\r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            }            \r\n        }\r\n    }\r\n    \r\n    removeProficiency = (proficiencyName, choicesIndex) => {\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        for (var a = 0; a < proficienciesChosen.length; a++) {\r\n            for (var b = 0; b < proficienciesChosen[a].length; b++) {\r\n                if (proficienciesChosen[a][b].name === proficiencyName) {                    \r\n                    let newProficiencies = proficiencies.filter(function (proficiency) { return proficiency.name !== proficiencyName });\r\n                    let newChoices = proficienciesChosen;\r\n                    newChoices[choicesIndex] = proficienciesChosen[choicesIndex].filter(function (proficiency) { return proficiency.name !== proficiencyName });              \r\n                    \r\n                    this.setState({\r\n                        proficiencies: [...newProficiencies],\r\n                        proficienciesChosen: newChoices,\r\n                    }, this.props.setProficiencies([...newProficiencies], newChoices));\r\n                    break;\r\n                }\r\n            }           \r\n        }       \r\n    }\r\n\r\n    classProficienciesToChooseFrom() {\r\n        const { classSelected } = this.props;\r\n        const { proficiencies } = this.state;\r\n        const { proficienciesChosen } = this.state;\r\n        let chooseFrom = []\r\n        for (var i = 0; i < classSelected.proficiency_choices.length; i++) {\r\n            let choicesIndex = i;\r\n            const chooseProficiencies = classSelected.proficiency_choices[i].from.map((proficiency) => {               \r\n                    for (var j = 0; j < proficiencies.length; j++) {\r\n                        for (var k = 0; k < proficienciesChosen[choicesIndex].length; k++) {\r\n                            if (proficiency.name === proficienciesChosen[choicesIndex][k].name) {\r\n                                return (<button className='btn-sm btn-block btn-secondary' onClick={() => this.removeProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                            }\r\n                        }\r\n                    }                \r\n                    return (<button className='btn-sm btn-block btn-primary' onClick={() => this.addProficiency(proficiency.name, choicesIndex)} key={proficiency.name}>{proficiency.name}</button>);\r\n                });\r\n            chooseFrom.push(<div className='col-6 chooseProficiency' key={'catetory' + choicesIndex}><h6>Choose: {classSelected.proficiency_choices[choicesIndex].choose}</h6>{chooseProficiencies}</div>)\r\n        }\r\n        return (chooseFrom);\r\n    }\r\n\r\n    render() {\r\n        return (<div className='col-12 text-center selection'>\r\n                    {this.classProficienciesToChooseFrom()}\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default ClassProficiencies","import React, { Component } from 'react';\r\n\r\nclass ClassSpells extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSpells: [], \r\n            spellSlots: [], \r\n            spellsChosen: [],    \r\n        };\r\n    }\r\n\r\n    componentDidMount() {        \r\n        this.spellSlots();\r\n        this.setClassSpells(1); // character level: 1\r\n    }\r\n    spellSlots = () => { // this function assumes the level of the character is already resolved and the data for that level has been retrieved: 'levelData'\r\n        const { classSelected } = this.props;\r\n        const { levelData } = this.props;    \r\n        let slotsAvailable = [];\r\n        if (classSelected.name === 'Ranger' || classSelected.name === 'Paladin') {\r\n            for (var h = 0; h < levelData.length; h++) {\r\n                if (levelData[h].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = 0;\r\n                    for (var i = 1; i < 6; i++) {\r\n                        if (levelData[h].spellcasting['spell_slots_level_' + i] !== 0) {\r\n                            slotsAvailable[i] = levelData[h].spellcasting['spell_slots_level_' + i];\r\n                            console.log(\"SLOTS avail\", slotsAvailable[i])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var j = 0; j < levelData.length; j++) {\r\n                if (levelData[j].class.name === classSelected.name) {\r\n                    slotsAvailable[0] = levelData[j].spellcasting.cantrips_known;\r\n                    for (var k = 1; k < 10; k++) {\r\n                        if (levelData[j].spellcasting['spell_slots_level_' + k] !== 0) {\r\n                            slotsAvailable[k] = levelData[j].spellcasting['spell_slots_level_' + k];\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        } \r\n        this.setState({\r\n            spellSlots: slotsAvailable,\r\n        }, this.props.updateSpellSlots(slotsAvailable));\r\n    }\r\n\r\n    updateSpells = (spell) => {\r\n        const { spellsChosen } = this.props;\r\n        let spells = [...spellsChosen, spell];\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells); //parent spells update so Info can display chosen spells\r\n    }\r\n\r\n    spellsChosenByLevel = () => {\r\n        const { spellsChosen } = this.props;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let spells = [];\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].level === 0) {\r\n                cantrips++;\r\n            } else if (spellsChosen[i].level === 1) {\r\n                levelOneSpells++;\r\n            }\r\n        }\r\n        spells.push(cantrips);\r\n        spells.push(levelOneSpells);\r\n        return spells;\r\n    }\r\n\r\n    spellSource = (spell, currentLevel) => {\r\n        const { classSelected } = this.props;\r\n        const { spellsChosen } = this.props;\r\n        const { spellSlots } = this.state;\r\n        let cantrips = 0;\r\n        let levelOneSpells = 0;\r\n        let level0, level1;\r\n        let message = \"You cannot add \" + spell.name + \" to your spell book.\";\r\n        \r\n        switch(classSelected.name) {\r\n            case \"Barbarian\":\r\n                break;\r\n            case \"Bard\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots; \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Cleric\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Druid\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Fighter\":\r\n                break;\r\n            case \"Monk\":\r\n                break;\r\n            case \"Paladin\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Ranger\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [level0, level1] = spellSlots;\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < level0 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                if (levelOneSpells < level1 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n                break;\r\n            case \"Rogue\":\r\n                break;\r\n            case \"Sorcerer\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }               \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 4 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Warlock\":\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 2 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                }\r\n\r\n                if (levelOneSpells < 2 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                }\r\n               \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            case \"Wizard\":\r\n                console.log(\"Wizard Spell source. \")\r\n                if (spellsChosen.length === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                [cantrips, levelOneSpells] = this.spellsChosenByLevel();\r\n                if (cantrips < 3 && spell.level === 0) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n                if (levelOneSpells < 6 && spell.level === 1) {\r\n                    this.updateSpells(spell);\r\n                    break;\r\n                } \r\n              \r\n                this.props.updateAlertMessage(message);\r\n                break;\r\n            default:\r\n                break;\r\n        }              \r\n    }\r\n\r\n    setClassSpells = (level) => { \r\n        const { classSelected } = this.props;\r\n        const { spellsInfo } = this.props;   \r\n        let spells = []\r\n        switch (level) {\r\n            case 1:\r\n                for (var i = 0; i < spellsInfo.length; i++) {\r\n                    for (var j = 0; j < spellsInfo[i].classes.length; j++) {\r\n                        if (classSelected.name === spellsInfo[i].classes[j].name && (spellsInfo[i].level <= level)) {\r\n                            spells.push(spellsInfo[i])\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    classSpells: spells,\r\n                });\r\n                console.log(\"state classSpells updated\", spells);\r\n                break;\r\n            default: \r\n                alert(\"level of character is invalid in spells creation. \")\r\n        }\r\n    }\r\n    \r\n    addSpell = (spell) => {\r\n        const { setSelectedSpell } = this.props;\r\n        this.spellSource(spell, 1);\r\n        setSelectedSpell(spell)\r\n    }\r\n\r\n    removeSpell = (spell) => {\r\n        const { spellsChosen } = this.props\r\n        const { setSelectedSpell } = this.props\r\n        let spells = []\r\n        for (var i = 0; i < spellsChosen.length; i++) {\r\n            if (spellsChosen[i].name !== spell.name) {\r\n                spells.push(spellsChosen[i])\r\n            }\r\n        }\r\n        this.setState({\r\n            spellsChosen: spells,\r\n        });\r\n        this.props.setSpells(spells)\r\n        setSelectedSpell({})\r\n    }\r\n\r\n    displaySpells = () => {\r\n        const { classSelected } = this.props;\r\n        const { classSpells } = this.state;\r\n        const { spellSlots } = this.state;\r\n        const { spellsChosen } = this.props;\r\n        let spellChoices = [];       \r\n        for (var a = 0; a < spellSlots.length; a++) {         \r\n            const slotLevel = a;\r\n            let slotSpells = classSpells.filter((spell) => {\r\n                return (spell.level === slotLevel ? spell : null);\r\n            });\r\n            spellChoices[slotLevel] = slotSpells.map((spell) => {\r\n                let classNames = \"btn btn-sm btn-block spell-btn \";\r\n                if (spell.damage !== undefined) { // Is there a better check for this?\r\n                        if (spell.damage.damage_type !== undefined) {\r\n                            classNames += spell.damage.damage_type.index + \" \";\r\n                        }\r\n                    }\r\n                if (spellsChosen.length === 0) {\r\n                    classNames += \"btn-secondary \";\r\n                        return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                }\r\n                for (var b = 0; b < spellsChosen.length; b++) {\r\n                    let chosen = b;\r\n                    if (spellsChosen[chosen].name === spell.name) {  \r\n                        classNames += \"btn-primary \";\r\n                        return (<button className={classNames} onClick={() => this.removeSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n                    } \r\n                }\r\n                classNames += 'btn-secondary ';\r\n                return (<button className={classNames} onClick={() => this.addSpell(spell)} key={spell.name + spell.level}>{spell.name}</button>);\r\n            });\r\n        }\r\n        let spellChoiceDisplay = [];\r\n        for (var b = 0; b < spellChoices.length; b++) {\r\n            if (b === 0) {\r\n                if (classSelected.name === \"Paladin\" || classSelected.name === \"Ranger\") {\r\n                    spellChoiceDisplay[b] = <div className='col-12' key='no-known-spells'><h6>You have no spells to choose from at level 1</h6></div>\r\n                } else {\r\n                    spellChoiceDisplay[b] = <div className='col-6 spells' key='cantrips'><h6>Cantrips</h6>{spellChoices[b]}</div>\r\n                }                \r\n            } else {\r\n                let keyForThee = \"spellLevel\";\r\n                spellChoiceDisplay[b] = <div className='col-6 spells' key={keyForThee + b}><h6>Spell Level {b}</h6>{spellChoices[b]}</div> \r\n            }            \r\n        }\r\n        return (spellChoiceDisplay);\r\n    }  \r\n    \r\n    render() {\r\n        return (<div className='col-12 text-center selection'>{this.displaySpells()}</div>);\r\n    }\r\n}\r\n\r\nexport default ClassSpells;","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterRace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            raceSelected: {},            \r\n        }\r\n       // this.buttons = this.buttons.bind(this);\r\n        this.selectRace = this.selectRace.bind(this);\r\n    //    console.log(\"Race Constructor\", props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.raceSelected)) {\r\n       //     console.log('race is selcted');\r\n            this.setState({ raceSelected: this.props.raceSelected, });\r\n        }\r\n    //    console.log(\"Races buttons mounted\");\r\n    }\r\n\r\n    selectRace = (index) => {\r\n        const { racesInfo } = this.props;\r\n        const { setRace } = this.props;\r\n        for (let i = 0; i < racesInfo.length; i++) {\r\n            if (racesInfo[i].index === index) {\r\n                const raceSelected = racesInfo.filter(function (race) { return race.name === racesInfo[i].name });\r\n                this.setState({ raceSelected: raceSelected[0] });\r\n                setRace(raceSelected[0]); \r\n                break;\r\n            }\r\n        }\r\n    }   \r\n\r\n    buttons = () => {\r\n        const { races } = this.props;\r\n        const { raceSelected } = this.state;\r\n        //console.log(\"race selected \", raceSelected);\r\n        let raceButtons = races.results.map((race) => {\r\n            if (isSelected(raceSelected) && raceSelected.index === race.index) {\r\n                return (<button className='selectionButtons buttonSelected col-4 {race.index}' aria-disabled='true' key={race.index}>{race.name}</button>);\r\n            }\r\n            return (<button onClick={() => this.selectRace(race.index)} className='selectionButtons col-4' key={race.index}>{race.name}</button>);\r\n        });\r\n        return raceButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className='text-center selection col-12'>\r\n                    <p className=\"selectionTitle\">Choose your Champions Race</p>\r\n                    {this.buttons()}\r\n                </div>);\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport isSelected from '../helper/helper-functions'\r\n\r\nexport default class CharacterClass extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSelected: {},\r\n        }\r\n        this.buttons = this.buttons.bind(this);\r\n        this.selectClass = this.selectClass.bind(this);\r\n    };   \r\n\r\n    componentDidMount() {\r\n        if (isSelected(this.props.classSelected)) {\r\n            this.setState({ classSelected: this.props.classSelected, });\r\n        } \r\n    }\r\n\r\n    selectClass(index) {\r\n        const { classesInfo } = this.props;\r\n        const { setClass } = this.props;\r\n        for (let i = 0; i < classesInfo.length; i++) {\r\n            if (classesInfo[i].index === index) {\r\n                const classSelected = classesInfo.filter(function (cClass) { return cClass.name === classesInfo[i].name });\r\n                this.setState({ classSelected: classSelected[0], });\r\n                setClass(classSelected[0]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    buttons() {\r\n        const { classes } = this.props\r\n        const { classSelected } = this.state;\r\n\r\n        let classButtons = classes.results.map((characterClass) => {\r\n            if (isSelected(classSelected) && classSelected.index === characterClass.index) {\r\n                //console.log(\"selection disabled for class\");\r\n                return (<button className='selectionButtons buttonSelected col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n            }\r\n            return (<button onClick={() => this.selectClass(characterClass.index)} className='selectionButtons col-4' key={characterClass.index}>{characterClass.name}</button>);\r\n\r\n        });       \r\n        return classButtons;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"col-12 text-center selection\">\r\n                 <p className=\"selectionTitle\">Choose your Champions Class</p>\r\n                        {this.buttons()}\r\n                    </div>);\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport AbilityScoresForm from './AbilityScoresForm'\r\nimport ClassProficiencies from './ClassProficiencies'\r\nimport ClassSpells from './ClassSpells'\r\nimport Races from './champion/Races'\r\nimport Classes from './champion/Classes'\r\nimport isSelected from './helper/helper-functions'\r\n\r\n\r\nclass Selection extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            abilityScoresSwitch: false,\r\n        }\r\n        this.abilityScoreSwitchy = this.abilityScoreSwitchy.bind(this)\r\n    }\r\n\r\n    abilityScoreSwitchy() {\r\n        this.setState(state => ({\r\n            abilityScoresSwitch: !state.abilityScoresSwitch,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const abilityScoresInfo = this.props.abilityScoresInfo;\r\n        const classSelected = this.props.classSelected;\r\n        const navigation = this.props.navigation;\r\n        const getScore = this.props.getScore;\r\n        const abilityScoresSwitch = this.state.abilityScoresSwitch\r\n        switch (navigation) {\r\n        case 'Races':\r\n            return (<Races {...this.props} />);           \r\n        case 'Classes':\r\n            return (<Classes {...this.props} />); \r\n        case 'Proficiencies':\r\n            if (isSelected(classSelected)) {\r\n                return (<ClassProficiencies {...this.props} />);\r\n            }\r\n            return (<div className='col-12 text-center selection'>You must choose a class to select your proficiencies.</div>);            \r\n        case 'Spells':\r\n            if (isSelected(classSelected) && classSelected.spellcasting !== undefined) { // Needs better validation? \r\n                return (<ClassSpells {...this.props} />);\r\n            }\r\n            return (<div className='col-12 text-center selection'>{classSelected.name} is not a spell caster.</div>);            \r\n        case 'Ability-Scores':\r\n            let scores = abilityScoresInfo.map((abilityScore, index) => {\r\n                return (<button onClick={() =>getScore(abilityScore.index)} className='col-4 selectionButtons' key={index}>{abilityScore.full_name}</button>)\r\n            });\r\n                return (<div className='col-12 text-center selection'>\r\n                    <button onClick={() => this.abilityScoreSwitchy()} >Push me</button><br />\r\n                    {abilityScoresSwitch ? <AbilityScoresForm handleSubmit={this.props.handleSubmit} abilityScoresSelected={this.props.abilityScoresSelected} /> : scores}                  \r\n                </div>);\r\n        default:\r\n            return (<div className='col-12 text-center selection'>DEFAULT: It's a broke!</div>);\r\n    }    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Selection ","import React from 'react'\r\nimport isSelected from './helper/helper-functions'\r\n\r\nconst Navigation = (props) => {\r\n //   console.log(\"Navigation\", props)\r\n    const navigation = props.navigation\r\n    const navigationCategories = props.navigationCategories\r\n    const navigate = props.navigate\r\n    const classSelected = props.classSelected\r\n\r\n    let navButtons = navigationCategories.map((category, index) => {\r\n        if (isSelected(classSelected)) {\r\n            if (navigation === category) {\r\n                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n            }\r\n        } else {\r\n            if (navigation === category) {\r\n                return (<button type='button' className='btn btn-sm btn-success btn-nav disabled' tabIndex='-1' aria-disabled='true' key={index}>{category}</button>);\r\n            } else {\r\n                if (category === 'Classes' && (navigation === 'Proficiencies' || navigation === 'Spells')) {\r\n                    switch (navigation) {\r\n                        case 'Proficiencies':\r\n                            return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                        default:\r\n                            return (<button onClick={() => navigate(category)} type='button'className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                    }     \r\n                } else {\r\n                    return (<button onClick={() => navigate(category)} type='button' className='btn btn-sm btn-dark btn-nav' key={index}>{category}</button>);\r\n                }\r\n            }\r\n        }                \r\n    });\r\n    return (<div className='col-12 text-center navigation'>\r\n                {navButtons}\r\n            </div>);\r\n}\r\nexport default Navigation","import React from 'react'\r\n\r\nconst UserAlert = (props) => { //this needs better validation against invalid messages\r\n  //  console.log(\"userAlert props\", props);\r\n\r\n    let element = (<div className='row' id='alert'></div>);\r\n    if (props.alertMessage.length > 0) {\r\n        element = (<div className='row' id='alert'>\r\n            <div className='col text-center'>\r\n                {props.alertMessage}\r\n            </div>\r\n        </div>);\r\n    }\r\n    return (element);\r\n}\r\n\r\nexport default UserAlert;\r\n","import React, { Component } from 'react'\r\n\r\nimport Info from './Info'\r\nimport Selection from './Selection'\r\nimport Navigation from './Navigation'\r\n//import CharacterSave from './CharacterSave'\r\n//import isSelected from './helper/helper-functions'\r\nimport UserAlert from './helper/Alert'\r\n//import GOOFING from './GOOFING'\r\n\r\nclass CreateCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            abilityScoresSelected: {},\r\n            navigationCategories: ['Races', 'Classes', 'Ability-Scores', 'Proficiencies', 'Spells'],\r\n            navigation: 'Races',\r\n            classSelected: {},\r\n            raceSelected: {},\r\n            proficiencies: [],\r\n            proficienciesChoices: [],\r\n            proficienciesChosen: [],\r\n            spellsChosen: [],\r\n            spellSlots: [],\r\n            selectedSpell: {},\r\n            alertMessage: \"\",\r\n            updateSpellSlots: this.updateSpellSlots,\r\n            updateAlertMessage: this.updateAlertMessage,\r\n            setSelectedSpell: this.setSelectedSpell,\r\n            setProficiencies: this.setProficiencies,\r\n            startingProficiencies: this.startingProficiencies,\r\n            updateProficiencies: this.updateProficiencies,\r\n            setSpells: this.setSpells,\r\n        }\r\n        //this.updateSpellsSlots = this.updateSpellSlots.bind(this);\r\n        //this.updateAlertMessage = this.updateAlertMessage.bind(this);\r\n        //this.updateSelectedSpell = this.updateSelectedSpell.bind(this);\r\n        //this.isClassSelected = this.isClassSelected.bind(this);\r\n        //this.isRaceSelected = this.isRaceSelected.bind(this);\r\n        this.setRace = this.setRace.bind(this);\r\n        this.setClass = this.setClass.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const { abilityScores } = this.props;\r\n        this.abilityScoresSetup(abilityScores);\r\n    //    console.log(\"CreateCharacter mounted\");\r\n               \r\n    }\r\n\r\n    componentDidUpdate() {\r\n     //   console.log(\"CreateCharacter updated\")\r\n    }\r\n\r\n\r\n    abilityScoresSetup = (abilityScoresData) => {\r\n        const { count } = abilityScoresData;\r\n        const { results } = abilityScoresData;\r\n        let abilityScores = {};\r\n        for (var j = 0; j < count; j++) {\r\n            let ability = results[j].index;\r\n            abilityScores[ability] = 0;\r\n        }\r\n        this.setState({ abilityScoresSelected: abilityScores, });\r\n    }\r\n\r\n    updateAlertMessage = (message) => {\r\n        this.setState({ alertMessage: message }, this.fadeMessage()); \r\n    }\r\n\r\n    fadeMessage = () => { // FIX THIS!!! AAAAAAAAAAAA!!!!!!\r\n        const alertNode = document.getElementById('alert');\r\n\r\n        //const alertNode = document.createElement(\"div\");\r\n        //alertNode.setAttribute(\"className\", \"alert\");\r\n        //document.body.appendChild(\"alertNode\");\r\n        setTimeout(() => {\r\n            let fade = setInterval(() => {\r\n                if (!alertNode.style.opacity) {\r\n                   alertNode.style.opacity = 1;\r\n                }\r\n                if (alertNode.style.opacity > 0) {\r\n                    alertNode.style.opacity -= 0.01;\r\n                } else {\r\n                    clearInterval(fade);\r\n                }\r\n            }, 10);// If I do not wait the 10 seconds, it craps on my parade!\r\n        }, 1700);\r\n        this.setState({ alertMessage: \"\" });\r\n        alertNode.style.opacity = 1;\r\n    }\r\n\r\n    setSelectedSpell = (spell) => {\r\n        this.setState({ selectedSpell: spell, });\r\n    }\r\n\r\n    setSpells = (spells) => {\r\n        this.setState({ spellsChosen: spells, });\r\n    }\r\n\r\n    updateSpellSlots = (slots) => {\r\n        this.setState({ spellSlots: slots, });\r\n    }\r\n\r\n    navigate = (category) => {\r\n        this.setState({ navigation: category, });\r\n    }\r\n\r\n    getScore = (ability) => {\r\n        const { abilityScores } = this.props;\r\n        const { abilityScoresSelected } = this.state;\r\n        let scores = abilityScoresSelected\r\n        for (var i = 0; i < abilityScores.count; i++) {\r\n            if (abilityScores.results[i].index === ability) {\r\n                scores[ability] = this.randomDiceRoll(6)\r\n                this.setState({abilityScoresSelected: scores})\r\n                break;\r\n            }\r\n        }\r\n   //     console.log(\"Ability Scores Selected\", abilityScoresSelected[ability])\r\n    }\r\n\r\n    randomDiceRoll = (maxNum) => { // may need to extend this to accept two additional arguments: total rolls to roll, and total rolls to keep \r\n        let totalDiceRolls = 5;\r\n        let totalRollsToKeep = 3;\r\n        let abilityPoint = 0;\r\n        let abilityPoints = 0;\r\n        let abilityPointsArray = [];\r\n        for (var i = 0; i < totalDiceRolls; i++) {\r\n            abilityPoint = Math.floor((Math.random() * maxNum) + 1);\r\n            abilityPointsArray.push(abilityPoint);\r\n        }\r\n        abilityPointsArray.sort()\r\n        abilityPointsArray.splice(0, totalDiceRolls - totalRollsToKeep)\r\n        for (var j = 0; j < abilityPointsArray.length; j++) {\r\n            abilityPoints += abilityPointsArray[j];\r\n        }\r\n        return abilityPoints;\r\n    }    \r\n\r\n    setRace(chosenRace) {\r\n        this.setState({ raceSelected: chosenRace, });\r\n    }\r\n\r\n    setClass(chosenClass) {\r\n        this.setState({ classSelected: chosenClass, spellsChosen: [], selectedSpell: {}, proficiencies: chosenClass.proficiencies, proficienciesChosen: [] });\r\n    }\r\n    \r\n    startingProficiencies = (proficiencies) => {\r\n        this.setState({ proficiencies: proficiencies });\r\n    }\r\n\r\n    setProficiencies = (profs, choices) => {\r\n        this.setState({\r\n            proficiencies: profs,\r\n            proficienciesChosen: choices,\r\n        });\r\n    }\r\n       \r\n    updateProficiencies = (proficiencies, choices) => {\r\n        this.setState({\r\n            proficiencies: proficiencies,\r\n            proficienciesChoices: choices,\r\n        });\r\n    }    \r\n        \r\n    handleSubmit = (abilities) => { //needs tending too, add better out of bounds messages...and how its handled \r\n        const { abilityScoresSelected } = this.state\r\n        let scores = abilityScoresSelected\r\n        let noZeroes = []\r\n        for (var i = 0; i < abilities.length; i++) {\r\n            if (abilities[i].value < 3 || abilities[i].value > 18) { //needs better validation\r\n                noZeroes.push(abilities[i].name);\r\n            } else {\r\n                scores[abilities[i].name] = parseInt(abilities[i].value, 10)\r\n                this.setState({ abilityScoresSelected: scores })\r\n            }\r\n        }\r\n        if (noZeroes.length > 0) {\r\n            let zeroesAlert = \"Ability Scores must not be 0, you currently have 0 in: \";\r\n            for (var k = 0; k < noZeroes.length; k++) {\r\n                if (k < noZeroes.length - 1) {\r\n                    zeroesAlert += noZeroes[k] + \", \";\r\n                } else {\r\n                    zeroesAlert += noZeroes[k];\r\n                }\r\n            }\r\n            zeroesAlert += \".\";\r\n            this.updateAlertMessage(zeroesAlert);\r\n        }\r\n    }\r\n       \r\n    render() {\r\n       // const { navigationCategories, navigation, } = this.state\r\n        \r\n        return (<div id='creator' className='container-fluid creation'>\r\n            <UserAlert alertMessage={this.state.alertMessage} />\r\n            <div className='row'>\r\n                <Info {...this.state} {...this.props} />\r\n            </div>\r\n            <div className='row'>\r\n                <Selection {...this.state} {...this.props} setRace={this.setRace} setClass={this.setClass} handleSubmit={this.handleSubmit} getScore={this.getScore} />\r\n            </div>\r\n            <div className='row'>\r\n                <Navigation {...this.state} {...this.props} navigate={this.navigate} />\r\n            </div>           \r\n        </div>);\r\n    }\r\n}\r\n\r\n//<div className='row'>\r\n//    <CharacterSave {...this.state} />\r\n//</div>\r\n//<GOOFING />\r\n\r\n\r\n\r\nexport default CreateCharacter","import React, { Component } from 'react'\r\nimport CreateCharacter from './CreateCharacter'\r\n\r\nexport default class App extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {           \r\n            races: {},\r\n            racesInfo: new Array(0),           \r\n            classes: {},\r\n            classesInfo: new Array(0),\r\n            abilityScores: {},\r\n            abilityScoresInfo: [],\r\n            spells: {},\r\n            spellsInfo: [],\r\n            features: {},\r\n            featuresInfo: [],\r\n            levelData: [],\r\n            ready: false,\r\n            enter: false,\r\n        }\r\n      //  this.state = this.initialState;\r\n      //  this.readyToCreate = this.readyToCreate.bind(this);\r\n        this.getInfo = this.getInfo.bind(this);\r\n        this.getLevelData = this.getLevelData.bind(this);\r\n        //   this.getStuff = this.getStuff.bind(this);\r\n        this.chooseYourChampion = this.chooseYourChampion.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://www.dnd5eapi.co/api/'\r\n        const promise = this.getCharacterInformation(url);\r\n        promise.then((data) => {\r\n            this.getCharacterData(data.races, data.classes, data.abilityScores, data.spells, data.features)\r\n        });\r\n    }\r\n     \r\n\r\n    getCharacterInformation(url) {\r\n      return Promise.all([this.getRaces(url),\r\n            this.getClasses(url),\r\n            this.getAbilityScores(url),\r\n            this.getSpells(url),\r\n            this.getFeatures(url),]).then(([races, classes, abilityScores, spells, features]) => {              \r\n                return {races, classes, abilityScores, spells, features}\r\n            });\r\n    }\r\n\r\n\r\n    getCharacterData(races, classes, abilityScores, spells, features) {\r\n        Promise.all([this.getInfo(races, 'races'),\r\n            this.getInfo(classes, 'classes'),\r\n            this.getLevelData(classes, 1),\r\n            this.getInfo(abilityScores, 'ability-scores'),\r\n            this.getInfo(spells, 'spells'),\r\n            this.getInfo(features, 'features'),\r\n        ]).then(() => { this.setState({ enter: true, }) })\r\n       \r\n    }\r\n\r\n    getRaces(url) {        \r\n       return fetch(url + \"races\")\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ races: result, }, ); return result })          \r\n            .catch(e => { console.log(e + \" -- getRaces() -- \" + url); });        \r\n    }\r\n\r\n    getClasses(url) {\r\n       return fetch(url + 'classes')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ classes: result, }, ); return result })            \r\n           .catch(e => { console.log(e + \" -- getClasses() -- \" + url); });\r\n    }\r\n\r\n    getAbilityScores(url) {\r\n      return fetch(url + 'ability-scores')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ abilityScores: result, }, ); return result })\r\n          .catch(e => { console.log(e + \" -- getAbilityScores() -- \" + url); });\r\n    }\r\n\r\n    getSpells(url) {\r\n      return fetch(url + 'spells')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ spells: result, }, ); return result })\r\n          .catch(e => { console.log(e + \" -- getSpells() -- \" + url); });\r\n    }\r\n\r\n    getFeatures(url) {      \r\n       return fetch(url + 'features')\r\n            .then(result => result.json())\r\n            .then(result => { this.setState({ features: result }, ); return result  })\r\n           .catch(e => { console.log(e + \" -- getFeatures() -- \" + url); });\r\n    }\r\n\r\n    getLevelData(data, currentLevel) {       \r\n        let levels = []\r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + \"/api/classes/\" + data.results[i].index + \"/levels/\" + currentLevel))\r\n                .then(result => result.json())\r\n                .then(result => { levels.push(result) });            \r\n        }        \r\n        this.setState({\r\n            levelData: levels,\r\n        });\r\n    }\r\n\r\n    getInfo(data, category) {\r\n        let info = []    \r\n        const url = 'https://www.dnd5eapi.co'\r\n        for (var i = 0; i < data.results.length; i++) {\r\n            Promise.resolve(fetch(url + data.results[i].url))\r\n                .then(result => result.json())\r\n                .then(result => { info.push(result) });\r\n        }\r\n       // console.log(info);   \r\n        switch(category) {\r\n            case 'races':\r\n                this.setState({ racesInfo: info, });\r\n                break;\r\n            case 'classes':\r\n                this.setState({ classesInfo: info, },);  \r\n                break;\r\n            case 'ability-scores':\r\n                this.setState({ abilityScoresInfo: info, });\r\n                break;\r\n            case 'spells':\r\n                this.setState({ spellsInfo: info, });\r\n                break;\r\n            case 'features':                \r\n                this.setState({ featuresInfo: info, });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //handleClick() {\r\n    //    this.setState(state => ({\r\n    //        isToggleOn: !state.isToggleOn\r\n    //    }));\r\n    //}\r\n\r\n\r\n    chooseYourChampion = () => {\r\n        this.setState(state => ({\r\n            ready: !state.ready,\r\n        }));\r\n    }\r\n    \r\n    render() {\r\n        const { ready } = this.state;\r\n              \r\n        if (!ready) {\r\n            return (<div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <h1>Welcome</h1>\r\n                        {this.state.enter ? <button onClick={this.chooseYourChampion} className='btn btn-lg btn-primary'>Begin your journey!</button> : <p>...Loading API</p> }                       \r\n                    </div>\r\n                </div>\r\n            </div>);  \r\n        } else {\r\n            return (<CreateCharacter {...this.state} />);                   \r\n        }\r\n    }\r\n}\r\n// races.results === undefined || classes.results === undefined || abilityScores.results === undefined || spells.results === undefined || spellsInfo.length === spells.count || levelData.length === 12 || features.results === undefined","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n//import GOOFING from './GOOFING'\r\nimport './assets/css/style.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root')) \r\n//ReactDOM.render(<GOOFING />, document.getElementById('root'))"],"sourceRoot":""}